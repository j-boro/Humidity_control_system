
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc10  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  0800be10  0800be10  0000ce10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c288  0800c288  0000e31c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c288  0800c288  0000d288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c290  0800c290  0000e31c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c290  0800c290  0000d290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c294  0800c294  0000d294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800c298  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001dc  0800c474  0000e1dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000027c  0800c514  0000e27c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000934  2000031c  0800c5b4  0000e31c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000c50  0800c5b4  0000ec50  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000e31c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f161  00000000  00000000  0000e34a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004843  00000000  00000000  0002d4ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001930  00000000  00000000  00031cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001371  00000000  00000000  00033620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002d231  00000000  00000000  00034991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000237f9  00000000  00000000  00061bc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00108723  00000000  00000000  000853bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0018dade  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007c80  00000000  00000000  0018db24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004d  00000000  00000000  001957a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000031c 	.word	0x2000031c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800bdf8 	.word	0x0800bdf8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000320 	.word	0x20000320
 800023c:	0800bdf8 	.word	0x0800bdf8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a2 	b.w	80009c4 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	460c      	mov	r4, r1
 8000710:	2b00      	cmp	r3, #0
 8000712:	d14e      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000714:	4694      	mov	ip, r2
 8000716:	458c      	cmp	ip, r1
 8000718:	4686      	mov	lr, r0
 800071a:	fab2 f282 	clz	r2, r2
 800071e:	d962      	bls.n	80007e6 <__udivmoddi4+0xde>
 8000720:	b14a      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000722:	f1c2 0320 	rsb	r3, r2, #32
 8000726:	4091      	lsls	r1, r2
 8000728:	fa20 f303 	lsr.w	r3, r0, r3
 800072c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000730:	4319      	orrs	r1, r3
 8000732:	fa00 fe02 	lsl.w	lr, r0, r2
 8000736:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800073a:	fa1f f68c 	uxth.w	r6, ip
 800073e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000742:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000746:	fb07 1114 	mls	r1, r7, r4, r1
 800074a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074e:	fb04 f106 	mul.w	r1, r4, r6
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f104 30ff 	add.w	r0, r4, #4294967295
 800075e:	f080 8112 	bcs.w	8000986 <__udivmoddi4+0x27e>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 810f 	bls.w	8000986 <__udivmoddi4+0x27e>
 8000768:	3c02      	subs	r4, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a59      	subs	r1, r3, r1
 800076e:	fa1f f38e 	uxth.w	r3, lr
 8000772:	fbb1 f0f7 	udiv	r0, r1, r7
 8000776:	fb07 1110 	mls	r1, r7, r0, r1
 800077a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800077e:	fb00 f606 	mul.w	r6, r0, r6
 8000782:	429e      	cmp	r6, r3
 8000784:	d90a      	bls.n	800079c <__udivmoddi4+0x94>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f100 31ff 	add.w	r1, r0, #4294967295
 800078e:	f080 80fc 	bcs.w	800098a <__udivmoddi4+0x282>
 8000792:	429e      	cmp	r6, r3
 8000794:	f240 80f9 	bls.w	800098a <__udivmoddi4+0x282>
 8000798:	4463      	add	r3, ip
 800079a:	3802      	subs	r0, #2
 800079c:	1b9b      	subs	r3, r3, r6
 800079e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007a2:	2100      	movs	r1, #0
 80007a4:	b11d      	cbz	r5, 80007ae <__udivmoddi4+0xa6>
 80007a6:	40d3      	lsrs	r3, r2
 80007a8:	2200      	movs	r2, #0
 80007aa:	e9c5 3200 	strd	r3, r2, [r5]
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d905      	bls.n	80007c2 <__udivmoddi4+0xba>
 80007b6:	b10d      	cbz	r5, 80007bc <__udivmoddi4+0xb4>
 80007b8:	e9c5 0100 	strd	r0, r1, [r5]
 80007bc:	2100      	movs	r1, #0
 80007be:	4608      	mov	r0, r1
 80007c0:	e7f5      	b.n	80007ae <__udivmoddi4+0xa6>
 80007c2:	fab3 f183 	clz	r1, r3
 80007c6:	2900      	cmp	r1, #0
 80007c8:	d146      	bne.n	8000858 <__udivmoddi4+0x150>
 80007ca:	42a3      	cmp	r3, r4
 80007cc:	d302      	bcc.n	80007d4 <__udivmoddi4+0xcc>
 80007ce:	4290      	cmp	r0, r2
 80007d0:	f0c0 80f0 	bcc.w	80009b4 <__udivmoddi4+0x2ac>
 80007d4:	1a86      	subs	r6, r0, r2
 80007d6:	eb64 0303 	sbc.w	r3, r4, r3
 80007da:	2001      	movs	r0, #1
 80007dc:	2d00      	cmp	r5, #0
 80007de:	d0e6      	beq.n	80007ae <__udivmoddi4+0xa6>
 80007e0:	e9c5 6300 	strd	r6, r3, [r5]
 80007e4:	e7e3      	b.n	80007ae <__udivmoddi4+0xa6>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	f040 8090 	bne.w	800090c <__udivmoddi4+0x204>
 80007ec:	eba1 040c 	sub.w	r4, r1, ip
 80007f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007f4:	fa1f f78c 	uxth.w	r7, ip
 80007f8:	2101      	movs	r1, #1
 80007fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80007fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000802:	fb08 4416 	mls	r4, r8, r6, r4
 8000806:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800080a:	fb07 f006 	mul.w	r0, r7, r6
 800080e:	4298      	cmp	r0, r3
 8000810:	d908      	bls.n	8000824 <__udivmoddi4+0x11c>
 8000812:	eb1c 0303 	adds.w	r3, ip, r3
 8000816:	f106 34ff 	add.w	r4, r6, #4294967295
 800081a:	d202      	bcs.n	8000822 <__udivmoddi4+0x11a>
 800081c:	4298      	cmp	r0, r3
 800081e:	f200 80cd 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 8000822:	4626      	mov	r6, r4
 8000824:	1a1c      	subs	r4, r3, r0
 8000826:	fa1f f38e 	uxth.w	r3, lr
 800082a:	fbb4 f0f8 	udiv	r0, r4, r8
 800082e:	fb08 4410 	mls	r4, r8, r0, r4
 8000832:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000836:	fb00 f707 	mul.w	r7, r0, r7
 800083a:	429f      	cmp	r7, r3
 800083c:	d908      	bls.n	8000850 <__udivmoddi4+0x148>
 800083e:	eb1c 0303 	adds.w	r3, ip, r3
 8000842:	f100 34ff 	add.w	r4, r0, #4294967295
 8000846:	d202      	bcs.n	800084e <__udivmoddi4+0x146>
 8000848:	429f      	cmp	r7, r3
 800084a:	f200 80b0 	bhi.w	80009ae <__udivmoddi4+0x2a6>
 800084e:	4620      	mov	r0, r4
 8000850:	1bdb      	subs	r3, r3, r7
 8000852:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000856:	e7a5      	b.n	80007a4 <__udivmoddi4+0x9c>
 8000858:	f1c1 0620 	rsb	r6, r1, #32
 800085c:	408b      	lsls	r3, r1
 800085e:	fa22 f706 	lsr.w	r7, r2, r6
 8000862:	431f      	orrs	r7, r3
 8000864:	fa20 fc06 	lsr.w	ip, r0, r6
 8000868:	fa04 f301 	lsl.w	r3, r4, r1
 800086c:	ea43 030c 	orr.w	r3, r3, ip
 8000870:	40f4      	lsrs	r4, r6
 8000872:	fa00 f801 	lsl.w	r8, r0, r1
 8000876:	0c38      	lsrs	r0, r7, #16
 8000878:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800087c:	fbb4 fef0 	udiv	lr, r4, r0
 8000880:	fa1f fc87 	uxth.w	ip, r7
 8000884:	fb00 441e 	mls	r4, r0, lr, r4
 8000888:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800088c:	fb0e f90c 	mul.w	r9, lr, ip
 8000890:	45a1      	cmp	r9, r4
 8000892:	fa02 f201 	lsl.w	r2, r2, r1
 8000896:	d90a      	bls.n	80008ae <__udivmoddi4+0x1a6>
 8000898:	193c      	adds	r4, r7, r4
 800089a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800089e:	f080 8084 	bcs.w	80009aa <__udivmoddi4+0x2a2>
 80008a2:	45a1      	cmp	r9, r4
 80008a4:	f240 8081 	bls.w	80009aa <__udivmoddi4+0x2a2>
 80008a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008ac:	443c      	add	r4, r7
 80008ae:	eba4 0409 	sub.w	r4, r4, r9
 80008b2:	fa1f f983 	uxth.w	r9, r3
 80008b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008ba:	fb00 4413 	mls	r4, r0, r3, r4
 80008be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80008c6:	45a4      	cmp	ip, r4
 80008c8:	d907      	bls.n	80008da <__udivmoddi4+0x1d2>
 80008ca:	193c      	adds	r4, r7, r4
 80008cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80008d0:	d267      	bcs.n	80009a2 <__udivmoddi4+0x29a>
 80008d2:	45a4      	cmp	ip, r4
 80008d4:	d965      	bls.n	80009a2 <__udivmoddi4+0x29a>
 80008d6:	3b02      	subs	r3, #2
 80008d8:	443c      	add	r4, r7
 80008da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80008de:	fba0 9302 	umull	r9, r3, r0, r2
 80008e2:	eba4 040c 	sub.w	r4, r4, ip
 80008e6:	429c      	cmp	r4, r3
 80008e8:	46ce      	mov	lr, r9
 80008ea:	469c      	mov	ip, r3
 80008ec:	d351      	bcc.n	8000992 <__udivmoddi4+0x28a>
 80008ee:	d04e      	beq.n	800098e <__udivmoddi4+0x286>
 80008f0:	b155      	cbz	r5, 8000908 <__udivmoddi4+0x200>
 80008f2:	ebb8 030e 	subs.w	r3, r8, lr
 80008f6:	eb64 040c 	sbc.w	r4, r4, ip
 80008fa:	fa04 f606 	lsl.w	r6, r4, r6
 80008fe:	40cb      	lsrs	r3, r1
 8000900:	431e      	orrs	r6, r3
 8000902:	40cc      	lsrs	r4, r1
 8000904:	e9c5 6400 	strd	r6, r4, [r5]
 8000908:	2100      	movs	r1, #0
 800090a:	e750      	b.n	80007ae <__udivmoddi4+0xa6>
 800090c:	f1c2 0320 	rsb	r3, r2, #32
 8000910:	fa20 f103 	lsr.w	r1, r0, r3
 8000914:	fa0c fc02 	lsl.w	ip, ip, r2
 8000918:	fa24 f303 	lsr.w	r3, r4, r3
 800091c:	4094      	lsls	r4, r2
 800091e:	430c      	orrs	r4, r1
 8000920:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000924:	fa00 fe02 	lsl.w	lr, r0, r2
 8000928:	fa1f f78c 	uxth.w	r7, ip
 800092c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000930:	fb08 3110 	mls	r1, r8, r0, r3
 8000934:	0c23      	lsrs	r3, r4, #16
 8000936:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800093a:	fb00 f107 	mul.w	r1, r0, r7
 800093e:	4299      	cmp	r1, r3
 8000940:	d908      	bls.n	8000954 <__udivmoddi4+0x24c>
 8000942:	eb1c 0303 	adds.w	r3, ip, r3
 8000946:	f100 36ff 	add.w	r6, r0, #4294967295
 800094a:	d22c      	bcs.n	80009a6 <__udivmoddi4+0x29e>
 800094c:	4299      	cmp	r1, r3
 800094e:	d92a      	bls.n	80009a6 <__udivmoddi4+0x29e>
 8000950:	3802      	subs	r0, #2
 8000952:	4463      	add	r3, ip
 8000954:	1a5b      	subs	r3, r3, r1
 8000956:	b2a4      	uxth	r4, r4
 8000958:	fbb3 f1f8 	udiv	r1, r3, r8
 800095c:	fb08 3311 	mls	r3, r8, r1, r3
 8000960:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000964:	fb01 f307 	mul.w	r3, r1, r7
 8000968:	42a3      	cmp	r3, r4
 800096a:	d908      	bls.n	800097e <__udivmoddi4+0x276>
 800096c:	eb1c 0404 	adds.w	r4, ip, r4
 8000970:	f101 36ff 	add.w	r6, r1, #4294967295
 8000974:	d213      	bcs.n	800099e <__udivmoddi4+0x296>
 8000976:	42a3      	cmp	r3, r4
 8000978:	d911      	bls.n	800099e <__udivmoddi4+0x296>
 800097a:	3902      	subs	r1, #2
 800097c:	4464      	add	r4, ip
 800097e:	1ae4      	subs	r4, r4, r3
 8000980:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000984:	e739      	b.n	80007fa <__udivmoddi4+0xf2>
 8000986:	4604      	mov	r4, r0
 8000988:	e6f0      	b.n	800076c <__udivmoddi4+0x64>
 800098a:	4608      	mov	r0, r1
 800098c:	e706      	b.n	800079c <__udivmoddi4+0x94>
 800098e:	45c8      	cmp	r8, r9
 8000990:	d2ae      	bcs.n	80008f0 <__udivmoddi4+0x1e8>
 8000992:	ebb9 0e02 	subs.w	lr, r9, r2
 8000996:	eb63 0c07 	sbc.w	ip, r3, r7
 800099a:	3801      	subs	r0, #1
 800099c:	e7a8      	b.n	80008f0 <__udivmoddi4+0x1e8>
 800099e:	4631      	mov	r1, r6
 80009a0:	e7ed      	b.n	800097e <__udivmoddi4+0x276>
 80009a2:	4603      	mov	r3, r0
 80009a4:	e799      	b.n	80008da <__udivmoddi4+0x1d2>
 80009a6:	4630      	mov	r0, r6
 80009a8:	e7d4      	b.n	8000954 <__udivmoddi4+0x24c>
 80009aa:	46d6      	mov	lr, sl
 80009ac:	e77f      	b.n	80008ae <__udivmoddi4+0x1a6>
 80009ae:	4463      	add	r3, ip
 80009b0:	3802      	subs	r0, #2
 80009b2:	e74d      	b.n	8000850 <__udivmoddi4+0x148>
 80009b4:	4606      	mov	r6, r0
 80009b6:	4623      	mov	r3, r4
 80009b8:	4608      	mov	r0, r1
 80009ba:	e70f      	b.n	80007dc <__udivmoddi4+0xd4>
 80009bc:	3e02      	subs	r6, #2
 80009be:	4463      	add	r3, ip
 80009c0:	e730      	b.n	8000824 <__udivmoddi4+0x11c>
 80009c2:	bf00      	nop

080009c4 <__aeabi_idiv0>:
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop

080009c8 <uncertain>:
 */

extern _Bool tryingFor, fanState;
_Bool uncert = 0;

void uncertain(float humidity, float lowerThresh, float upperThresh){
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	ed87 0a03 	vstr	s0, [r7, #12]
 80009d2:	edc7 0a02 	vstr	s1, [r7, #8]
 80009d6:	ed87 1a01 	vstr	s2, [r7, #4]
	if(humidity < lowerThresh || humidity > upperThresh){
 80009da:	ed97 7a03 	vldr	s14, [r7, #12]
 80009de:	edd7 7a02 	vldr	s15, [r7, #8]
 80009e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ea:	d409      	bmi.n	8000a00 <uncertain+0x38>
 80009ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80009f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80009f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009fc:	dc00      	bgt.n	8000a00 <uncertain+0x38>
		uncert = 0;
	}
}
 80009fe:	e002      	b.n	8000a06 <uncertain+0x3e>
		uncert = 0;
 8000a00:	4b04      	ldr	r3, [pc, #16]	@ (8000a14 <uncertain+0x4c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	701a      	strb	r2, [r3, #0]
}
 8000a06:	bf00      	nop
 8000a08:	3714      	adds	r7, #20
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	20000338 	.word	0x20000338

08000a18 <main_control_loop>:

void main_control_loop(float humidity, float lowerThresh, float upperThresh){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000a22:	edc7 0a02 	vstr	s1, [r7, #8]
 8000a26:	ed87 1a01 	vstr	s2, [r7, #4]

	if(uncert == 0){
 8000a2a:	4b38      	ldr	r3, [pc, #224]	@ (8000b0c <main_control_loop+0xf4>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	f083 0301 	eor.w	r3, r3, #1
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d058      	beq.n	8000aea <main_control_loop+0xd2>
		if(humidity < lowerThresh){
 8000a38:	ed97 7a03 	vldr	s14, [r7, #12]
 8000a3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a48:	d503      	bpl.n	8000a52 <main_control_loop+0x3a>
			tryingFor = 1;
 8000a4a:	4b31      	ldr	r3, [pc, #196]	@ (8000b10 <main_control_loop+0xf8>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	701a      	strb	r2, [r3, #0]
			tryingFor = 1;
		}
	} else if(uncert == 1)
		uncertain(humidity, lowerThresh, upperThresh);

}
 8000a50:	e057      	b.n	8000b02 <main_control_loop+0xea>
		} else if(humidity > upperThresh){
 8000a52:	ed97 7a03 	vldr	s14, [r7, #12]
 8000a56:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a62:	dd03      	ble.n	8000a6c <main_control_loop+0x54>
			tryingFor = 0;
 8000a64:	4b2a      	ldr	r3, [pc, #168]	@ (8000b10 <main_control_loop+0xf8>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	701a      	strb	r2, [r3, #0]
}
 8000a6a:	e04a      	b.n	8000b02 <main_control_loop+0xea>
		} else if(humidity >= lowerThresh && humidity <= upperThresh && tryingFor == 1){
 8000a6c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000a70:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a7c:	db13      	blt.n	8000aa6 <main_control_loop+0x8e>
 8000a7e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000a82:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a8e:	d80a      	bhi.n	8000aa6 <main_control_loop+0x8e>
 8000a90:	4b1f      	ldr	r3, [pc, #124]	@ (8000b10 <main_control_loop+0xf8>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d006      	beq.n	8000aa6 <main_control_loop+0x8e>
			uncert = 1;
 8000a98:	4b1c      	ldr	r3, [pc, #112]	@ (8000b0c <main_control_loop+0xf4>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	701a      	strb	r2, [r3, #0]
			tryingFor = 0;
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b10 <main_control_loop+0xf8>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
}
 8000aa4:	e02d      	b.n	8000b02 <main_control_loop+0xea>
		} else if(humidity >= lowerThresh && humidity <= upperThresh && tryingFor == 0){
 8000aa6:	ed97 7a03 	vldr	s14, [r7, #12]
 8000aaa:	edd7 7a02 	vldr	s15, [r7, #8]
 8000aae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ab6:	da00      	bge.n	8000aba <main_control_loop+0xa2>
}
 8000ab8:	e023      	b.n	8000b02 <main_control_loop+0xea>
		} else if(humidity >= lowerThresh && humidity <= upperThresh && tryingFor == 0){
 8000aba:	ed97 7a03 	vldr	s14, [r7, #12]
 8000abe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ac2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aca:	d900      	bls.n	8000ace <main_control_loop+0xb6>
}
 8000acc:	e019      	b.n	8000b02 <main_control_loop+0xea>
		} else if(humidity >= lowerThresh && humidity <= upperThresh && tryingFor == 0){
 8000ace:	4b10      	ldr	r3, [pc, #64]	@ (8000b10 <main_control_loop+0xf8>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	f083 0301 	eor.w	r3, r3, #1
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d012      	beq.n	8000b02 <main_control_loop+0xea>
			uncert = 1;
 8000adc:	4b0b      	ldr	r3, [pc, #44]	@ (8000b0c <main_control_loop+0xf4>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	701a      	strb	r2, [r3, #0]
			tryingFor = 1;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b10 <main_control_loop+0xf8>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	701a      	strb	r2, [r3, #0]
}
 8000ae8:	e00b      	b.n	8000b02 <main_control_loop+0xea>
	} else if(uncert == 1)
 8000aea:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <main_control_loop+0xf4>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d007      	beq.n	8000b02 <main_control_loop+0xea>
		uncertain(humidity, lowerThresh, upperThresh);
 8000af2:	ed97 1a01 	vldr	s2, [r7, #4]
 8000af6:	edd7 0a02 	vldr	s1, [r7, #8]
 8000afa:	ed97 0a03 	vldr	s0, [r7, #12]
 8000afe:	f7ff ff63 	bl	80009c8 <uncertain>
}
 8000b02:	bf00      	nop
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000338 	.word	0x20000338
 8000b10:	20000540 	.word	0x20000540

08000b14 <fan_control>:

void fan_control(float humidity, float lowerThresh, float upperThresh){
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	ed87 0a03 	vstr	s0, [r7, #12]
 8000b1e:	edc7 0a02 	vstr	s1, [r7, #8]
 8000b22:	ed87 1a01 	vstr	s2, [r7, #4]
	if(humidity > upperThresh){
 8000b26:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b36:	dd03      	ble.n	8000b40 <fan_control+0x2c>
		fanState = 1;
 8000b38:	4b0b      	ldr	r3, [pc, #44]	@ (8000b68 <fan_control+0x54>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	701a      	strb	r2, [r3, #0]
	} else if(humidity < lowerThresh){
		fanState = 0;
	}
}
 8000b3e:	e00c      	b.n	8000b5a <fan_control+0x46>
	} else if(humidity < lowerThresh){
 8000b40:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b44:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b50:	d400      	bmi.n	8000b54 <fan_control+0x40>
}
 8000b52:	e002      	b.n	8000b5a <fan_control+0x46>
		fanState = 0;
 8000b54:	4b04      	ldr	r3, [pc, #16]	@ (8000b68 <fan_control+0x54>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	701a      	strb	r2, [r3, #0]
}
 8000b5a:	bf00      	nop
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	20000541 	.word	0x20000541

08000b6c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000b70:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba8 <MX_CRC_Init+0x3c>)
 8000b72:	4a0e      	ldr	r2, [pc, #56]	@ (8000bac <MX_CRC_Init+0x40>)
 8000b74:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000b76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <MX_CRC_Init+0x3c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba8 <MX_CRC_Init+0x3c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000b82:	4b09      	ldr	r3, [pc, #36]	@ (8000ba8 <MX_CRC_Init+0x3c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000b88:	4b07      	ldr	r3, [pc, #28]	@ (8000ba8 <MX_CRC_Init+0x3c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000b8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <MX_CRC_Init+0x3c>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000b94:	4804      	ldr	r0, [pc, #16]	@ (8000ba8 <MX_CRC_Init+0x3c>)
 8000b96:	f001 fcad 	bl	80024f4 <HAL_CRC_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000ba0:	f000 ff20 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	2000033c 	.word	0x2000033c
 8000bac:	40023000 	.word	0x40023000

08000bb0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000be8 <HAL_CRC_MspInit+0x38>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d10b      	bne.n	8000bda <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bec <HAL_CRC_MspInit+0x3c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	4a09      	ldr	r2, [pc, #36]	@ (8000bec <HAL_CRC_MspInit+0x3c>)
 8000bc8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bce:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <HAL_CRC_MspInit+0x3c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000bda:	bf00      	nop
 8000bdc:	3714      	adds	r7, #20
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	40023000 	.word	0x40023000
 8000bec:	40023800 	.word	0x40023800

08000bf0 <compute_crc16>:
  }
}

/* USER CODE BEGIN 1 */
uint16_t compute_crc16(uint8_t *data, uint16_t length)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 8000bfc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c00:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < length; i++)
 8000c02:	2300      	movs	r3, #0
 8000c04:	81bb      	strh	r3, [r7, #12]
 8000c06:	e025      	b.n	8000c54 <compute_crc16+0x64>
    {
        crc ^= (data[i] << 8);
 8000c08:	89bb      	ldrh	r3, [r7, #12]
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	021b      	lsls	r3, r3, #8
 8000c12:	b21a      	sxth	r2, r3
 8000c14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c18:	4053      	eors	r3, r2
 8000c1a:	b21b      	sxth	r3, r3
 8000c1c:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++)
 8000c1e:	2300      	movs	r3, #0
 8000c20:	72fb      	strb	r3, [r7, #11]
 8000c22:	e011      	b.n	8000c48 <compute_crc16+0x58>
        {
            if (crc & 0x8000)
 8000c24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	da07      	bge.n	8000c3c <compute_crc16+0x4c>
            {
                crc = (crc << 1) ^ 0x8005;
 8000c2c:	89fb      	ldrh	r3, [r7, #14]
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	b21a      	sxth	r2, r3
 8000c32:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <compute_crc16+0x7c>)
 8000c34:	4053      	eors	r3, r2
 8000c36:	b21b      	sxth	r3, r3
 8000c38:	81fb      	strh	r3, [r7, #14]
 8000c3a:	e002      	b.n	8000c42 <compute_crc16+0x52>
            }
            else
            {
                crc <<= 1;
 8000c3c:	89fb      	ldrh	r3, [r7, #14]
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++)
 8000c42:	7afb      	ldrb	r3, [r7, #11]
 8000c44:	3301      	adds	r3, #1
 8000c46:	72fb      	strb	r3, [r7, #11]
 8000c48:	7afb      	ldrb	r3, [r7, #11]
 8000c4a:	2b07      	cmp	r3, #7
 8000c4c:	d9ea      	bls.n	8000c24 <compute_crc16+0x34>
    for (uint16_t i = 0; i < length; i++)
 8000c4e:	89bb      	ldrh	r3, [r7, #12]
 8000c50:	3301      	adds	r3, #1
 8000c52:	81bb      	strh	r3, [r7, #12]
 8000c54:	89ba      	ldrh	r2, [r7, #12]
 8000c56:	887b      	ldrh	r3, [r7, #2]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d3d5      	bcc.n	8000c08 <compute_crc16+0x18>
            }
            crc &= 0xFFFF;
        }
    }
    return crc;
 8000c5c:	89fb      	ldrh	r3, [r7, #14]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	ffff8005 	.word	0xffff8005

08000c70 <send_data_with_crc>:

void send_data_with_crc(uint8_t *data, uint16_t length)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	807b      	strh	r3, [r7, #2]
    uint16_t crc = compute_crc16(data, length);
 8000c7c:	887b      	ldrh	r3, [r7, #2]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff ffb5 	bl	8000bf0 <compute_crc16>
 8000c86:	4603      	mov	r3, r0
 8000c88:	81fb      	strh	r3, [r7, #14]
    HAL_UART_Transmit(&huart3, data, length, HAL_MAX_DELAY);
 8000c8a:	887a      	ldrh	r2, [r7, #2]
 8000c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c90:	6879      	ldr	r1, [r7, #4]
 8000c92:	4807      	ldr	r0, [pc, #28]	@ (8000cb0 <send_data_with_crc+0x40>)
 8000c94:	f004 ff7e 	bl	8005b94 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart3, (uint8_t*)&crc, sizeof(crc), HAL_MAX_DELAY);
 8000c98:	f107 010e 	add.w	r1, r7, #14
 8000c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	4803      	ldr	r0, [pc, #12]	@ (8000cb0 <send_data_with_crc+0x40>)
 8000ca4:	f004 ff76 	bl	8005b94 <HAL_UART_Transmit>
}
 8000ca8:	bf00      	nop
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000598 	.word	0x20000598

08000cb4 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d38 <MX_ETH_Init+0x84>)
 8000cba:	4a20      	ldr	r2, [pc, #128]	@ (8000d3c <MX_ETH_Init+0x88>)
 8000cbc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000cbe:	4b20      	ldr	r3, [pc, #128]	@ (8000d40 <MX_ETH_Init+0x8c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000cc4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d40 <MX_ETH_Init+0x8c>)
 8000cc6:	2280      	movs	r2, #128	@ 0x80
 8000cc8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000cca:	4b1d      	ldr	r3, [pc, #116]	@ (8000d40 <MX_ETH_Init+0x8c>)
 8000ccc:	22e1      	movs	r2, #225	@ 0xe1
 8000cce:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d40 <MX_ETH_Init+0x8c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d40 <MX_ETH_Init+0x8c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000cdc:	4b18      	ldr	r3, [pc, #96]	@ (8000d40 <MX_ETH_Init+0x8c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000ce2:	4b15      	ldr	r3, [pc, #84]	@ (8000d38 <MX_ETH_Init+0x84>)
 8000ce4:	4a16      	ldr	r2, [pc, #88]	@ (8000d40 <MX_ETH_Init+0x8c>)
 8000ce6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000ce8:	4b13      	ldr	r3, [pc, #76]	@ (8000d38 <MX_ETH_Init+0x84>)
 8000cea:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000cee:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <MX_ETH_Init+0x84>)
 8000cf2:	4a14      	ldr	r2, [pc, #80]	@ (8000d44 <MX_ETH_Init+0x90>)
 8000cf4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000cf6:	4b10      	ldr	r3, [pc, #64]	@ (8000d38 <MX_ETH_Init+0x84>)
 8000cf8:	4a13      	ldr	r2, [pc, #76]	@ (8000d48 <MX_ETH_Init+0x94>)
 8000cfa:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <MX_ETH_Init+0x84>)
 8000cfe:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000d02:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d04:	480c      	ldr	r0, [pc, #48]	@ (8000d38 <MX_ETH_Init+0x84>)
 8000d06:	f001 fd79 	bl	80027fc <HAL_ETH_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000d10:	f000 fe68 	bl	80019e4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d14:	2238      	movs	r2, #56	@ 0x38
 8000d16:	2100      	movs	r1, #0
 8000d18:	480c      	ldr	r0, [pc, #48]	@ (8000d4c <MX_ETH_Init+0x98>)
 8000d1a:	f008 fb66 	bl	80093ea <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d4c <MX_ETH_Init+0x98>)
 8000d20:	2221      	movs	r2, #33	@ 0x21
 8000d22:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d24:	4b09      	ldr	r3, [pc, #36]	@ (8000d4c <MX_ETH_Init+0x98>)
 8000d26:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000d2a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d2c:	4b07      	ldr	r3, [pc, #28]	@ (8000d4c <MX_ETH_Init+0x98>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000398 	.word	0x20000398
 8000d3c:	40028000 	.word	0x40028000
 8000d40:	20000448 	.word	0x20000448
 8000d44:	2000027c 	.word	0x2000027c
 8000d48:	200001dc 	.word	0x200001dc
 8000d4c:	20000360 	.word	0x20000360

08000d50 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08e      	sub	sp, #56	@ 0x38
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a4e      	ldr	r2, [pc, #312]	@ (8000ea8 <HAL_ETH_MspInit+0x158>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	f040 8096 	bne.w	8000ea0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000d74:	4b4d      	ldr	r3, [pc, #308]	@ (8000eac <HAL_ETH_MspInit+0x15c>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d78:	4a4c      	ldr	r2, [pc, #304]	@ (8000eac <HAL_ETH_MspInit+0x15c>)
 8000d7a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d80:	4b4a      	ldr	r3, [pc, #296]	@ (8000eac <HAL_ETH_MspInit+0x15c>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d88:	623b      	str	r3, [r7, #32]
 8000d8a:	6a3b      	ldr	r3, [r7, #32]
 8000d8c:	4b47      	ldr	r3, [pc, #284]	@ (8000eac <HAL_ETH_MspInit+0x15c>)
 8000d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d90:	4a46      	ldr	r2, [pc, #280]	@ (8000eac <HAL_ETH_MspInit+0x15c>)
 8000d92:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d96:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d98:	4b44      	ldr	r3, [pc, #272]	@ (8000eac <HAL_ETH_MspInit+0x15c>)
 8000d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000da0:	61fb      	str	r3, [r7, #28]
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	4b41      	ldr	r3, [pc, #260]	@ (8000eac <HAL_ETH_MspInit+0x15c>)
 8000da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da8:	4a40      	ldr	r2, [pc, #256]	@ (8000eac <HAL_ETH_MspInit+0x15c>)
 8000daa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000dae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db0:	4b3e      	ldr	r3, [pc, #248]	@ (8000eac <HAL_ETH_MspInit+0x15c>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000db8:	61bb      	str	r3, [r7, #24]
 8000dba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dbc:	4b3b      	ldr	r3, [pc, #236]	@ (8000eac <HAL_ETH_MspInit+0x15c>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc0:	4a3a      	ldr	r2, [pc, #232]	@ (8000eac <HAL_ETH_MspInit+0x15c>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc8:	4b38      	ldr	r3, [pc, #224]	@ (8000eac <HAL_ETH_MspInit+0x15c>)
 8000dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd4:	4b35      	ldr	r3, [pc, #212]	@ (8000eac <HAL_ETH_MspInit+0x15c>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd8:	4a34      	ldr	r2, [pc, #208]	@ (8000eac <HAL_ETH_MspInit+0x15c>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de0:	4b32      	ldr	r3, [pc, #200]	@ (8000eac <HAL_ETH_MspInit+0x15c>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dec:	4b2f      	ldr	r3, [pc, #188]	@ (8000eac <HAL_ETH_MspInit+0x15c>)
 8000dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df0:	4a2e      	ldr	r2, [pc, #184]	@ (8000eac <HAL_ETH_MspInit+0x15c>)
 8000df2:	f043 0302 	orr.w	r3, r3, #2
 8000df6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df8:	4b2c      	ldr	r3, [pc, #176]	@ (8000eac <HAL_ETH_MspInit+0x15c>)
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfc:	f003 0302 	and.w	r3, r3, #2
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e04:	4b29      	ldr	r3, [pc, #164]	@ (8000eac <HAL_ETH_MspInit+0x15c>)
 8000e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e08:	4a28      	ldr	r2, [pc, #160]	@ (8000eac <HAL_ETH_MspInit+0x15c>)
 8000e0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e10:	4b26      	ldr	r3, [pc, #152]	@ (8000eac <HAL_ETH_MspInit+0x15c>)
 8000e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e1c:	2332      	movs	r3, #50	@ 0x32
 8000e1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e2c:	230b      	movs	r3, #11
 8000e2e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e34:	4619      	mov	r1, r3
 8000e36:	481e      	ldr	r0, [pc, #120]	@ (8000eb0 <HAL_ETH_MspInit+0x160>)
 8000e38:	f002 f82e 	bl	8002e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e3c:	2386      	movs	r3, #134	@ 0x86
 8000e3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e4c:	230b      	movs	r3, #11
 8000e4e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e54:	4619      	mov	r1, r3
 8000e56:	4817      	ldr	r0, [pc, #92]	@ (8000eb4 <HAL_ETH_MspInit+0x164>)
 8000e58:	f002 f81e 	bl	8002e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e6e:	230b      	movs	r3, #11
 8000e70:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e76:	4619      	mov	r1, r3
 8000e78:	480f      	ldr	r0, [pc, #60]	@ (8000eb8 <HAL_ETH_MspInit+0x168>)
 8000e7a:	f002 f80d 	bl	8002e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e7e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e90:	230b      	movs	r3, #11
 8000e92:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4808      	ldr	r0, [pc, #32]	@ (8000ebc <HAL_ETH_MspInit+0x16c>)
 8000e9c:	f001 fffc 	bl	8002e98 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	3738      	adds	r7, #56	@ 0x38
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40028000 	.word	0x40028000
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40020800 	.word	0x40020800
 8000eb4:	40020000 	.word	0x40020000
 8000eb8:	40020400 	.word	0x40020400
 8000ebc:	40021800 	.word	0x40021800

08000ec0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08e      	sub	sp, #56	@ 0x38
 8000ec4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed6:	4b5d      	ldr	r3, [pc, #372]	@ (800104c <MX_GPIO_Init+0x18c>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	4a5c      	ldr	r2, [pc, #368]	@ (800104c <MX_GPIO_Init+0x18c>)
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee2:	4b5a      	ldr	r3, [pc, #360]	@ (800104c <MX_GPIO_Init+0x18c>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	f003 0304 	and.w	r3, r3, #4
 8000eea:	623b      	str	r3, [r7, #32]
 8000eec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eee:	4b57      	ldr	r3, [pc, #348]	@ (800104c <MX_GPIO_Init+0x18c>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	4a56      	ldr	r2, [pc, #344]	@ (800104c <MX_GPIO_Init+0x18c>)
 8000ef4:	f043 0320 	orr.w	r3, r3, #32
 8000ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efa:	4b54      	ldr	r3, [pc, #336]	@ (800104c <MX_GPIO_Init+0x18c>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	f003 0320 	and.w	r3, r3, #32
 8000f02:	61fb      	str	r3, [r7, #28]
 8000f04:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f06:	4b51      	ldr	r3, [pc, #324]	@ (800104c <MX_GPIO_Init+0x18c>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	4a50      	ldr	r2, [pc, #320]	@ (800104c <MX_GPIO_Init+0x18c>)
 8000f0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f12:	4b4e      	ldr	r3, [pc, #312]	@ (800104c <MX_GPIO_Init+0x18c>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f1a:	61bb      	str	r3, [r7, #24]
 8000f1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	4b4b      	ldr	r3, [pc, #300]	@ (800104c <MX_GPIO_Init+0x18c>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	4a4a      	ldr	r2, [pc, #296]	@ (800104c <MX_GPIO_Init+0x18c>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2a:	4b48      	ldr	r3, [pc, #288]	@ (800104c <MX_GPIO_Init+0x18c>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f36:	4b45      	ldr	r3, [pc, #276]	@ (800104c <MX_GPIO_Init+0x18c>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	4a44      	ldr	r2, [pc, #272]	@ (800104c <MX_GPIO_Init+0x18c>)
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f42:	4b42      	ldr	r3, [pc, #264]	@ (800104c <MX_GPIO_Init+0x18c>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f4e:	4b3f      	ldr	r3, [pc, #252]	@ (800104c <MX_GPIO_Init+0x18c>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	4a3e      	ldr	r2, [pc, #248]	@ (800104c <MX_GPIO_Init+0x18c>)
 8000f54:	f043 0310 	orr.w	r3, r3, #16
 8000f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5a:	4b3c      	ldr	r3, [pc, #240]	@ (800104c <MX_GPIO_Init+0x18c>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	f003 0310 	and.w	r3, r3, #16
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f66:	4b39      	ldr	r3, [pc, #228]	@ (800104c <MX_GPIO_Init+0x18c>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	4a38      	ldr	r2, [pc, #224]	@ (800104c <MX_GPIO_Init+0x18c>)
 8000f6c:	f043 0308 	orr.w	r3, r3, #8
 8000f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f72:	4b36      	ldr	r3, [pc, #216]	@ (800104c <MX_GPIO_Init+0x18c>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	f003 0308 	and.w	r3, r3, #8
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f7e:	4b33      	ldr	r3, [pc, #204]	@ (800104c <MX_GPIO_Init+0x18c>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	4a32      	ldr	r2, [pc, #200]	@ (800104c <MX_GPIO_Init+0x18c>)
 8000f84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8a:	4b30      	ldr	r3, [pc, #192]	@ (800104c <MX_GPIO_Init+0x18c>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin|TOUCH_Pin, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	f244 1181 	movw	r1, #16769	@ 0x4181
 8000f9c:	482c      	ldr	r0, [pc, #176]	@ (8001050 <MX_GPIO_Init+0x190>)
 8000f9e:	f002 f927 	bl	80031f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fa8:	482a      	ldr	r0, [pc, #168]	@ (8001054 <MX_GPIO_Init+0x194>)
 8000faa:	f002 f921 	bl	80031f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2140      	movs	r1, #64	@ 0x40
 8000fb2:	4829      	ldr	r0, [pc, #164]	@ (8001058 <MX_GPIO_Init+0x198>)
 8000fb4:	f002 f91c 	bl	80031f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000fb8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fbe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000fc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4823      	ldr	r0, [pc, #140]	@ (800105c <MX_GPIO_Init+0x19c>)
 8000fd0:	f001 ff62 	bl	8002e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin TOUCH_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin|TOUCH_Pin;
 8000fd4:	f244 1381 	movw	r3, #16769	@ 0x4181
 8000fd8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fea:	4619      	mov	r1, r3
 8000fec:	4818      	ldr	r0, [pc, #96]	@ (8001050 <MX_GPIO_Init+0x190>)
 8000fee:	f001 ff53 	bl	8002e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : FAN_Pin */
  GPIO_InitStruct.Pin = FAN_Pin;
 8000ff2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2300      	movs	r3, #0
 8001002:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(FAN_GPIO_Port, &GPIO_InitStruct);
 8001004:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001008:	4619      	mov	r1, r3
 800100a:	4812      	ldr	r0, [pc, #72]	@ (8001054 <MX_GPIO_Init+0x194>)
 800100c:	f001 ff44 	bl	8002e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001010:	2340      	movs	r3, #64	@ 0x40
 8001012:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001014:	2301      	movs	r3, #1
 8001016:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2300      	movs	r3, #0
 800101e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001020:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001024:	4619      	mov	r1, r3
 8001026:	480c      	ldr	r0, [pc, #48]	@ (8001058 <MX_GPIO_Init+0x198>)
 8001028:	f001 ff36 	bl	8002e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800102c:	2380      	movs	r3, #128	@ 0x80
 800102e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001030:	2300      	movs	r3, #0
 8001032:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001038:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103c:	4619      	mov	r1, r3
 800103e:	4806      	ldr	r0, [pc, #24]	@ (8001058 <MX_GPIO_Init+0x198>)
 8001040:	f001 ff2a 	bl	8002e98 <HAL_GPIO_Init>

}
 8001044:	bf00      	nop
 8001046:	3738      	adds	r7, #56	@ 0x38
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40023800 	.word	0x40023800
 8001050:	40020400 	.word	0x40020400
 8001054:	40021000 	.word	0x40021000
 8001058:	40021800 	.word	0x40021800
 800105c:	40020800 	.word	0x40020800

08001060 <humidifier_on>:
#include "gpio.h"
#include "stm32f7xx_hal.h"

extern int state;

void humidifier_on(){
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	if(state == 0){
 8001064:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <humidifier_on+0x4c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d11d      	bne.n	80010a8 <humidifier_on+0x48>
		  HAL_GPIO_WritePin(TOUCH_GPIO_Port, TOUCH_Pin, 1);
 800106c:	2201      	movs	r2, #1
 800106e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001072:	480f      	ldr	r0, [pc, #60]	@ (80010b0 <humidifier_on+0x50>)
 8001074:	f002 f8bc 	bl	80031f0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8001078:	2201      	movs	r2, #1
 800107a:	2101      	movs	r1, #1
 800107c:	480c      	ldr	r0, [pc, #48]	@ (80010b0 <humidifier_on+0x50>)
 800107e:	f002 f8b7 	bl	80031f0 <HAL_GPIO_WritePin>
		  HAL_Delay(150);
 8001082:	2096      	movs	r0, #150	@ 0x96
 8001084:	f001 f900 	bl	8002288 <HAL_Delay>
		  HAL_GPIO_WritePin(TOUCH_GPIO_Port, TOUCH_Pin, 0);
 8001088:	2200      	movs	r2, #0
 800108a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800108e:	4808      	ldr	r0, [pc, #32]	@ (80010b0 <humidifier_on+0x50>)
 8001090:	f002 f8ae 	bl	80031f0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 8001094:	2200      	movs	r2, #0
 8001096:	2101      	movs	r1, #1
 8001098:	4805      	ldr	r0, [pc, #20]	@ (80010b0 <humidifier_on+0x50>)
 800109a:	f002 f8a9 	bl	80031f0 <HAL_GPIO_WritePin>
		  state++;
 800109e:	4b03      	ldr	r3, [pc, #12]	@ (80010ac <humidifier_on+0x4c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	3301      	adds	r3, #1
 80010a4:	4a01      	ldr	r2, [pc, #4]	@ (80010ac <humidifier_on+0x4c>)
 80010a6:	6013      	str	r3, [r2, #0]
	}
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200004f8 	.word	0x200004f8
 80010b0:	40020400 	.word	0x40020400

080010b4 <humidifier_off>:

void humidifier_off(){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	  if(state == 1 || state == 2){
 80010b8:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <humidifier_off+0x64>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d003      	beq.n	80010c8 <humidifier_off+0x14>
 80010c0:	4b15      	ldr	r3, [pc, #84]	@ (8001118 <humidifier_off+0x64>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d124      	bne.n	8001112 <humidifier_off+0x5e>
		  HAL_GPIO_WritePin(TOUCH_GPIO_Port, TOUCH_Pin, 1);
 80010c8:	2201      	movs	r2, #1
 80010ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010ce:	4813      	ldr	r0, [pc, #76]	@ (800111c <humidifier_off+0x68>)
 80010d0:	f002 f88e 	bl	80031f0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 80010d4:	2201      	movs	r2, #1
 80010d6:	2101      	movs	r1, #1
 80010d8:	4810      	ldr	r0, [pc, #64]	@ (800111c <humidifier_off+0x68>)
 80010da:	f002 f889 	bl	80031f0 <HAL_GPIO_WritePin>
		  HAL_Delay(150);
 80010de:	2096      	movs	r0, #150	@ 0x96
 80010e0:	f001 f8d2 	bl	8002288 <HAL_Delay>
		  HAL_GPIO_WritePin(TOUCH_GPIO_Port, TOUCH_Pin, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010ea:	480c      	ldr	r0, [pc, #48]	@ (800111c <humidifier_off+0x68>)
 80010ec:	f002 f880 	bl	80031f0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2101      	movs	r1, #1
 80010f4:	4809      	ldr	r0, [pc, #36]	@ (800111c <humidifier_off+0x68>)
 80010f6:	f002 f87b 	bl	80031f0 <HAL_GPIO_WritePin>
		  state++;
 80010fa:	4b07      	ldr	r3, [pc, #28]	@ (8001118 <humidifier_off+0x64>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	3301      	adds	r3, #1
 8001100:	4a05      	ldr	r2, [pc, #20]	@ (8001118 <humidifier_off+0x64>)
 8001102:	6013      	str	r3, [r2, #0]
		  if(state == 3)
 8001104:	4b04      	ldr	r3, [pc, #16]	@ (8001118 <humidifier_off+0x64>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b03      	cmp	r3, #3
 800110a:	d102      	bne.n	8001112 <humidifier_off+0x5e>
			  state = 0;
 800110c:	4b02      	ldr	r3, [pc, #8]	@ (8001118 <humidifier_off+0x64>)
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
	  }
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200004f8 	.word	0x200004f8
 800111c:	40020400 	.word	0x40020400

08001120 <lcd_init>:
static void lcd_send_command(I2C_HandleTypeDef *hi2c, uint8_t cmd);
static void lcd_send_data(I2C_HandleTypeDef *hi2c, uint8_t data);
static void lcd_send(I2C_HandleTypeDef *hi2c, uint8_t data, uint8_t flags);

void lcd_init(I2C_HandleTypeDef *hi2c)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]

    HAL_Delay(50);
 8001128:	2032      	movs	r0, #50	@ 0x32
 800112a:	f001 f8ad 	bl	8002288 <HAL_Delay>
    lcd_send_command(hi2c, 0x30); // Wake up
 800112e:	2130      	movs	r1, #48	@ 0x30
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f000 f87d 	bl	8001230 <lcd_send_command>
    HAL_Delay(5);
 8001136:	2005      	movs	r0, #5
 8001138:	f001 f8a6 	bl	8002288 <HAL_Delay>
    lcd_send_command(hi2c, 0x30);
 800113c:	2130      	movs	r1, #48	@ 0x30
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f000 f876 	bl	8001230 <lcd_send_command>
    HAL_Delay(1);
 8001144:	2001      	movs	r0, #1
 8001146:	f001 f89f 	bl	8002288 <HAL_Delay>
    lcd_send_command(hi2c, 0x30);
 800114a:	2130      	movs	r1, #48	@ 0x30
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f000 f86f 	bl	8001230 <lcd_send_command>
    HAL_Delay(10);
 8001152:	200a      	movs	r0, #10
 8001154:	f001 f898 	bl	8002288 <HAL_Delay>

    lcd_send_command(hi2c, 0x20); // Set 4-bit mode
 8001158:	2120      	movs	r1, #32
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 f868 	bl	8001230 <lcd_send_command>
    HAL_Delay(1);
 8001160:	2001      	movs	r0, #1
 8001162:	f001 f891 	bl	8002288 <HAL_Delay>

    // Display settings
    lcd_send_command(hi2c, 0x28); // 4-bit mode, 2-line, 5x8 font
 8001166:	2128      	movs	r1, #40	@ 0x28
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f000 f861 	bl	8001230 <lcd_send_command>
    lcd_send_command(hi2c, 0x08); // Display off
 800116e:	2108      	movs	r1, #8
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f000 f85d 	bl	8001230 <lcd_send_command>
    lcd_send_command(hi2c, 0x01); // Clear display
 8001176:	2101      	movs	r1, #1
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f000 f859 	bl	8001230 <lcd_send_command>
    HAL_Delay(2);
 800117e:	2002      	movs	r0, #2
 8001180:	f001 f882 	bl	8002288 <HAL_Delay>
    lcd_send_command(hi2c, 0x06); // Entry mode set, increment automatically
 8001184:	2106      	movs	r1, #6
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f000 f852 	bl	8001230 <lcd_send_command>
    lcd_send_command(hi2c, 0x0C); // Display on, cursor off
 800118c:	210c      	movs	r1, #12
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f000 f84e 	bl	8001230 <lcd_send_command>
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <lcd_send_string>:

void lcd_send_string(I2C_HandleTypeDef *hi2c, char *str)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 16 && *str != '\0'; i++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	e00a      	b.n	80011c2 <lcd_send_string+0x26>
    {
        lcd_send_data(hi2c, (uint8_t)(*str++));
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	1c5a      	adds	r2, r3, #1
 80011b0:	603a      	str	r2, [r7, #0]
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4619      	mov	r1, r3
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 f84a 	bl	8001250 <lcd_send_data>
    for (int i = 0; i < 16 && *str != '\0'; i++)
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	3301      	adds	r3, #1
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2b0f      	cmp	r3, #15
 80011c6:	dc03      	bgt.n	80011d0 <lcd_send_string+0x34>
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1ed      	bne.n	80011ac <lcd_send_string+0x10>
    }

    if (*str != '\0')
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d018      	beq.n	800120a <lcd_send_string+0x6e>
    {
        lcd_send_command(hi2c, 0xC0);
 80011d8:	21c0      	movs	r1, #192	@ 0xc0
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 f828 	bl	8001230 <lcd_send_command>

        for (int i = 0; i < 16 && *str != '\0'; i++)
 80011e0:	2300      	movs	r3, #0
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	e00a      	b.n	80011fc <lcd_send_string+0x60>
        {
            lcd_send_data(hi2c, (uint8_t)(*str++));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	1c5a      	adds	r2, r3, #1
 80011ea:	603a      	str	r2, [r7, #0]
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	4619      	mov	r1, r3
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 f82d 	bl	8001250 <lcd_send_data>
        for (int i = 0; i < 16 && *str != '\0'; i++)
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	3301      	adds	r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	2b0f      	cmp	r3, #15
 8001200:	dc03      	bgt.n	800120a <lcd_send_string+0x6e>
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1ed      	bne.n	80011e6 <lcd_send_string+0x4a>
        }
    }
}
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <lcd_clear>:

void lcd_clear(I2C_HandleTypeDef *hi2c)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
    lcd_send_command(hi2c, 0x01); // Clear display
 800121a:	2101      	movs	r1, #1
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f000 f807 	bl	8001230 <lcd_send_command>
    HAL_Delay(2);
 8001222:	2002      	movs	r0, #2
 8001224:	f001 f830 	bl	8002288 <HAL_Delay>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <lcd_send_command>:
    lcd_clear(hi2c);        // Clear the LCD
    lcd_send_string(hi2c, buffer); // Display the formatted string
}

static void lcd_send_command(I2C_HandleTypeDef *hi2c, uint8_t cmd)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	70fb      	strb	r3, [r7, #3]
    lcd_send(hi2c, cmd, LCD_COMMAND);
 800123c:	78fb      	ldrb	r3, [r7, #3]
 800123e:	2200      	movs	r2, #0
 8001240:	4619      	mov	r1, r3
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f000 f814 	bl	8001270 <lcd_send>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <lcd_send_data>:

static void lcd_send_data(I2C_HandleTypeDef *hi2c, uint8_t data)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	70fb      	strb	r3, [r7, #3]
    lcd_send(hi2c, data, LCD_DATA);
 800125c:	78fb      	ldrb	r3, [r7, #3]
 800125e:	2201      	movs	r2, #1
 8001260:	4619      	mov	r1, r3
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 f804 	bl	8001270 <lcd_send>
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <lcd_send>:

static void lcd_send(I2C_HandleTypeDef *hi2c, uint8_t data, uint8_t flags)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af02      	add	r7, sp, #8
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	70fb      	strb	r3, [r7, #3]
 800127c:	4613      	mov	r3, r2
 800127e:	70bb      	strb	r3, [r7, #2]
    uint8_t upper_nibble = (data & 0xF0) | LCD_BACKLIGHT | flags;
 8001280:	78fb      	ldrb	r3, [r7, #3]
 8001282:	f023 030f 	bic.w	r3, r3, #15
 8001286:	b2da      	uxtb	r2, r3
 8001288:	78bb      	ldrb	r3, [r7, #2]
 800128a:	4313      	orrs	r3, r2
 800128c:	b2db      	uxtb	r3, r3
 800128e:	f043 0308 	orr.w	r3, r3, #8
 8001292:	73fb      	strb	r3, [r7, #15]
    uint8_t lower_nibble = ((data << 4) & 0xF0) | LCD_BACKLIGHT | flags;
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	011b      	lsls	r3, r3, #4
 8001298:	b2da      	uxtb	r2, r3
 800129a:	78bb      	ldrb	r3, [r7, #2]
 800129c:	4313      	orrs	r3, r2
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	f043 0308 	orr.w	r3, r3, #8
 80012a4:	73bb      	strb	r3, [r7, #14]

    uint8_t data_arr[4];
    data_arr[0] = upper_nibble | LCD_ENABLE;
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	f043 0304 	orr.w	r3, r3, #4
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	723b      	strb	r3, [r7, #8]
    data_arr[1] = upper_nibble & ~LCD_ENABLE;
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	f023 0304 	bic.w	r3, r3, #4
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lower_nibble | LCD_ENABLE;
 80012ba:	7bbb      	ldrb	r3, [r7, #14]
 80012bc:	f043 0304 	orr.w	r3, r3, #4
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lower_nibble & ~LCD_ENABLE;
 80012c4:	7bbb      	ldrb	r3, [r7, #14]
 80012c6:	f023 0304 	bic.w	r3, r3, #4
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(hi2c, LCD_ADDR, data_arr, 4, 100);
 80012ce:	f107 0208 	add.w	r2, r7, #8
 80012d2:	2364      	movs	r3, #100	@ 0x64
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2304      	movs	r3, #4
 80012d8:	214e      	movs	r1, #78	@ 0x4e
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f002 f83e 	bl	800335c <HAL_I2C_Master_Transmit>
}
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <lcd_display_two_floats>:

void lcd_display_two_floats(I2C_HandleTypeDef *hi2c, char *line1, char *line2, float value1, float value2)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08c      	sub	sp, #48	@ 0x30
 80012ec:	af02      	add	r7, sp, #8
 80012ee:	6178      	str	r0, [r7, #20]
 80012f0:	6139      	str	r1, [r7, #16]
 80012f2:	60fa      	str	r2, [r7, #12]
 80012f4:	ed87 0a02 	vstr	s0, [r7, #8]
 80012f8:	edc7 0a01 	vstr	s1, [r7, #4]
    char buffer[16]; // Buffer for formatted strings, max 16 characters per line

    // Clear the LCD before displaying new content
    lcd_clear(hi2c);
 80012fc:	6978      	ldr	r0, [r7, #20]
 80012fe:	f7ff ff88 	bl	8001212 <lcd_clear>

    // Display the first line
    if (line1 != NULL)
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d016      	beq.n	8001336 <lcd_display_two_floats+0x4e>
    {
        snprintf(buffer, sizeof(buffer), line1, value1);
 8001308:	edd7 7a02 	vldr	s15, [r7, #8]
 800130c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001310:	f107 0318 	add.w	r3, r7, #24
 8001314:	ed8d 7b00 	vstr	d7, [sp]
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	2110      	movs	r1, #16
 800131c:	4618      	mov	r0, r3
 800131e:	f007 ffcd 	bl	80092bc <sniprintf>
        lcd_send_command(hi2c, 0x80); // Set cursor to the beginning of the first line
 8001322:	2180      	movs	r1, #128	@ 0x80
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ff83 	bl	8001230 <lcd_send_command>
        lcd_send_string(hi2c, buffer);
 800132a:	f107 0318 	add.w	r3, r7, #24
 800132e:	4619      	mov	r1, r3
 8001330:	6978      	ldr	r0, [r7, #20]
 8001332:	f7ff ff33 	bl	800119c <lcd_send_string>
    }

    // Display the second line
    if (line2 != NULL)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d016      	beq.n	800136a <lcd_display_two_floats+0x82>
    {
        snprintf(buffer, sizeof(buffer), line2, value2);
 800133c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001340:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001344:	f107 0318 	add.w	r3, r7, #24
 8001348:	ed8d 7b00 	vstr	d7, [sp]
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	2110      	movs	r1, #16
 8001350:	4618      	mov	r0, r3
 8001352:	f007 ffb3 	bl	80092bc <sniprintf>
        lcd_send_command(hi2c, 0xC0); // Set cursor to the beginning of the second line
 8001356:	21c0      	movs	r1, #192	@ 0xc0
 8001358:	6978      	ldr	r0, [r7, #20]
 800135a:	f7ff ff69 	bl	8001230 <lcd_send_command>
        lcd_send_string(hi2c, buffer);
 800135e:	f107 0318 	add.w	r3, r7, #24
 8001362:	4619      	mov	r1, r3
 8001364:	6978      	ldr	r0, [r7, #20]
 8001366:	f7ff ff19 	bl	800119c <lcd_send_string>
    }
}
 800136a:	bf00      	nop
 800136c:	3728      	adds	r7, #40	@ 0x28
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001378:	4b1b      	ldr	r3, [pc, #108]	@ (80013e8 <MX_I2C1_Init+0x74>)
 800137a:	4a1c      	ldr	r2, [pc, #112]	@ (80013ec <MX_I2C1_Init+0x78>)
 800137c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800137e:	4b1a      	ldr	r3, [pc, #104]	@ (80013e8 <MX_I2C1_Init+0x74>)
 8001380:	4a1b      	ldr	r2, [pc, #108]	@ (80013f0 <MX_I2C1_Init+0x7c>)
 8001382:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001384:	4b18      	ldr	r3, [pc, #96]	@ (80013e8 <MX_I2C1_Init+0x74>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800138a:	4b17      	ldr	r3, [pc, #92]	@ (80013e8 <MX_I2C1_Init+0x74>)
 800138c:	2201      	movs	r2, #1
 800138e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001390:	4b15      	ldr	r3, [pc, #84]	@ (80013e8 <MX_I2C1_Init+0x74>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001396:	4b14      	ldr	r3, [pc, #80]	@ (80013e8 <MX_I2C1_Init+0x74>)
 8001398:	2200      	movs	r2, #0
 800139a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800139c:	4b12      	ldr	r3, [pc, #72]	@ (80013e8 <MX_I2C1_Init+0x74>)
 800139e:	2200      	movs	r2, #0
 80013a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013a2:	4b11      	ldr	r3, [pc, #68]	@ (80013e8 <MX_I2C1_Init+0x74>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013a8:	4b0f      	ldr	r3, [pc, #60]	@ (80013e8 <MX_I2C1_Init+0x74>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013ae:	480e      	ldr	r0, [pc, #56]	@ (80013e8 <MX_I2C1_Init+0x74>)
 80013b0:	f001 ff38 	bl	8003224 <HAL_I2C_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013ba:	f000 fb13 	bl	80019e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013be:	2100      	movs	r1, #0
 80013c0:	4809      	ldr	r0, [pc, #36]	@ (80013e8 <MX_I2C1_Init+0x74>)
 80013c2:	f002 fc7f 	bl	8003cc4 <HAL_I2CEx_ConfigAnalogFilter>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013cc:	f000 fb0a 	bl	80019e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013d0:	2100      	movs	r1, #0
 80013d2:	4805      	ldr	r0, [pc, #20]	@ (80013e8 <MX_I2C1_Init+0x74>)
 80013d4:	f002 fcc1 	bl	8003d5a <HAL_I2CEx_ConfigDigitalFilter>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013de:	f000 fb01 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000450 	.word	0x20000450
 80013ec:	40005400 	.word	0x40005400
 80013f0:	20303e5d 	.word	0x20303e5d

080013f4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001468 <MX_I2C2_Init+0x74>)
 80013fa:	4a1c      	ldr	r2, [pc, #112]	@ (800146c <MX_I2C2_Init+0x78>)
 80013fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80013fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001468 <MX_I2C2_Init+0x74>)
 8001400:	4a1b      	ldr	r2, [pc, #108]	@ (8001470 <MX_I2C2_Init+0x7c>)
 8001402:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001404:	4b18      	ldr	r3, [pc, #96]	@ (8001468 <MX_I2C2_Init+0x74>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800140a:	4b17      	ldr	r3, [pc, #92]	@ (8001468 <MX_I2C2_Init+0x74>)
 800140c:	2201      	movs	r2, #1
 800140e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001410:	4b15      	ldr	r3, [pc, #84]	@ (8001468 <MX_I2C2_Init+0x74>)
 8001412:	2200      	movs	r2, #0
 8001414:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001416:	4b14      	ldr	r3, [pc, #80]	@ (8001468 <MX_I2C2_Init+0x74>)
 8001418:	2200      	movs	r2, #0
 800141a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800141c:	4b12      	ldr	r3, [pc, #72]	@ (8001468 <MX_I2C2_Init+0x74>)
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001422:	4b11      	ldr	r3, [pc, #68]	@ (8001468 <MX_I2C2_Init+0x74>)
 8001424:	2200      	movs	r2, #0
 8001426:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001428:	4b0f      	ldr	r3, [pc, #60]	@ (8001468 <MX_I2C2_Init+0x74>)
 800142a:	2200      	movs	r2, #0
 800142c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800142e:	480e      	ldr	r0, [pc, #56]	@ (8001468 <MX_I2C2_Init+0x74>)
 8001430:	f001 fef8 	bl	8003224 <HAL_I2C_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800143a:	f000 fad3 	bl	80019e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800143e:	2100      	movs	r1, #0
 8001440:	4809      	ldr	r0, [pc, #36]	@ (8001468 <MX_I2C2_Init+0x74>)
 8001442:	f002 fc3f 	bl	8003cc4 <HAL_I2CEx_ConfigAnalogFilter>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800144c:	f000 faca 	bl	80019e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001450:	2100      	movs	r1, #0
 8001452:	4805      	ldr	r0, [pc, #20]	@ (8001468 <MX_I2C2_Init+0x74>)
 8001454:	f002 fc81 	bl	8003d5a <HAL_I2CEx_ConfigDigitalFilter>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800145e:	f000 fac1 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200004a4 	.word	0x200004a4
 800146c:	40005800 	.word	0x40005800
 8001470:	20303e5d 	.word	0x20303e5d

08001474 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b0b0      	sub	sp, #192	@ 0xc0
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800148c:	f107 031c 	add.w	r3, r7, #28
 8001490:	2290      	movs	r2, #144	@ 0x90
 8001492:	2100      	movs	r1, #0
 8001494:	4618      	mov	r0, r3
 8001496:	f007 ffa8 	bl	80093ea <memset>
  if(i2cHandle->Instance==I2C1)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a44      	ldr	r2, [pc, #272]	@ (80015b0 <HAL_I2C_MspInit+0x13c>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d13e      	bne.n	8001522 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014a8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014aa:	2300      	movs	r3, #0
 80014ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014b0:	f107 031c 	add.w	r3, r7, #28
 80014b4:	4618      	mov	r0, r3
 80014b6:	f003 fb0b 	bl	8004ad0 <HAL_RCCEx_PeriphCLKConfig>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80014c0:	f000 fa90 	bl	80019e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c4:	4b3b      	ldr	r3, [pc, #236]	@ (80015b4 <HAL_I2C_MspInit+0x140>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c8:	4a3a      	ldr	r2, [pc, #232]	@ (80015b4 <HAL_I2C_MspInit+0x140>)
 80014ca:	f043 0302 	orr.w	r3, r3, #2
 80014ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d0:	4b38      	ldr	r3, [pc, #224]	@ (80015b4 <HAL_I2C_MspInit+0x140>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	61bb      	str	r3, [r7, #24]
 80014da:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80014dc:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80014e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014e4:	2312      	movs	r3, #18
 80014e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f0:	2303      	movs	r3, #3
 80014f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014f6:	2304      	movs	r3, #4
 80014f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001500:	4619      	mov	r1, r3
 8001502:	482d      	ldr	r0, [pc, #180]	@ (80015b8 <HAL_I2C_MspInit+0x144>)
 8001504:	f001 fcc8 	bl	8002e98 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001508:	4b2a      	ldr	r3, [pc, #168]	@ (80015b4 <HAL_I2C_MspInit+0x140>)
 800150a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150c:	4a29      	ldr	r2, [pc, #164]	@ (80015b4 <HAL_I2C_MspInit+0x140>)
 800150e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001512:	6413      	str	r3, [r2, #64]	@ 0x40
 8001514:	4b27      	ldr	r3, [pc, #156]	@ (80015b4 <HAL_I2C_MspInit+0x140>)
 8001516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001518:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001520:	e041      	b.n	80015a6 <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C2)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a25      	ldr	r2, [pc, #148]	@ (80015bc <HAL_I2C_MspInit+0x148>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d13c      	bne.n	80015a6 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800152c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001530:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001532:	2300      	movs	r3, #0
 8001534:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001538:	f107 031c 	add.w	r3, r7, #28
 800153c:	4618      	mov	r0, r3
 800153e:	f003 fac7 	bl	8004ad0 <HAL_RCCEx_PeriphCLKConfig>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8001548:	f000 fa4c 	bl	80019e4 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800154c:	4b19      	ldr	r3, [pc, #100]	@ (80015b4 <HAL_I2C_MspInit+0x140>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001550:	4a18      	ldr	r2, [pc, #96]	@ (80015b4 <HAL_I2C_MspInit+0x140>)
 8001552:	f043 0320 	orr.w	r3, r3, #32
 8001556:	6313      	str	r3, [r2, #48]	@ 0x30
 8001558:	4b16      	ldr	r3, [pc, #88]	@ (80015b4 <HAL_I2C_MspInit+0x140>)
 800155a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155c:	f003 0320 	and.w	r3, r3, #32
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001564:	2303      	movs	r3, #3
 8001566:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800156a:	2312      	movs	r3, #18
 800156c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001570:	2301      	movs	r3, #1
 8001572:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001576:	2303      	movs	r3, #3
 8001578:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800157c:	2304      	movs	r3, #4
 800157e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001582:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001586:	4619      	mov	r1, r3
 8001588:	480d      	ldr	r0, [pc, #52]	@ (80015c0 <HAL_I2C_MspInit+0x14c>)
 800158a:	f001 fc85 	bl	8002e98 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800158e:	4b09      	ldr	r3, [pc, #36]	@ (80015b4 <HAL_I2C_MspInit+0x140>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001592:	4a08      	ldr	r2, [pc, #32]	@ (80015b4 <HAL_I2C_MspInit+0x140>)
 8001594:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001598:	6413      	str	r3, [r2, #64]	@ 0x40
 800159a:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <HAL_I2C_MspInit+0x140>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
}
 80015a6:	bf00      	nop
 80015a8:	37c0      	adds	r7, #192	@ 0xc0
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40005400 	.word	0x40005400
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40020400 	.word	0x40020400
 80015bc:	40005800 	.word	0x40005800
 80015c0:	40021400 	.word	0x40021400
 80015c4:	00000000 	.word	0x00000000

080015c8 <readHumidity>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float readHumidity(void) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af02      	add	r7, sp, #8
  uint8_t command[2] = {0xFD};
 80015ce:	23fd      	movs	r3, #253	@ 0xfd
 80015d0:	81bb      	strh	r3, [r7, #12]
  uint8_t data[6];
  HAL_StatusTypeDef ret;

  ret = HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, command, 1, 1000);
 80015d2:	f107 020c 	add.w	r2, r7, #12
 80015d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2301      	movs	r3, #1
 80015de:	2188      	movs	r1, #136	@ 0x88
 80015e0:	4825      	ldr	r0, [pc, #148]	@ (8001678 <readHumidity+0xb0>)
 80015e2:	f001 febb 	bl	800335c <HAL_I2C_Master_Transmit>
 80015e6:	4603      	mov	r3, r0
 80015e8:	75fb      	strb	r3, [r7, #23]
  if (ret != HAL_OK) {
 80015ea:	7dfb      	ldrb	r3, [r7, #23]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <readHumidity+0x2c>
    return -1;
 80015f0:	4b22      	ldr	r3, [pc, #136]	@ (800167c <readHumidity+0xb4>)
 80015f2:	e032      	b.n	800165a <readHumidity+0x92>
  }

  HAL_Delay(10);
 80015f4:	200a      	movs	r0, #10
 80015f6:	f000 fe47 	bl	8002288 <HAL_Delay>

  ret = HAL_I2C_Master_Receive(&hi2c1, 0x44 << 1, data, 6, 1000);
 80015fa:	1d3a      	adds	r2, r7, #4
 80015fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	2306      	movs	r3, #6
 8001604:	2188      	movs	r1, #136	@ 0x88
 8001606:	481c      	ldr	r0, [pc, #112]	@ (8001678 <readHumidity+0xb0>)
 8001608:	f001 ffc0 	bl	800358c <HAL_I2C_Master_Receive>
 800160c:	4603      	mov	r3, r0
 800160e:	75fb      	strb	r3, [r7, #23]
  if (ret != HAL_OK) {
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <readHumidity+0x52>
    return -1;
 8001616:	4b19      	ldr	r3, [pc, #100]	@ (800167c <readHumidity+0xb4>)
 8001618:	e01f      	b.n	800165a <readHumidity+0x92>
  }

  uint16_t rawHumidity = (data[3] << 8) | data[4];
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	021b      	lsls	r3, r3, #8
 800161e:	b21a      	sxth	r2, r3
 8001620:	7a3b      	ldrb	r3, [r7, #8]
 8001622:	b21b      	sxth	r3, r3
 8001624:	4313      	orrs	r3, r2
 8001626:	b21b      	sxth	r3, r3
 8001628:	82bb      	strh	r3, [r7, #20]
  float humidity = -6.0 + 125.0 * (float)rawHumidity / 65535.0;
 800162a:	8abb      	ldrh	r3, [r7, #20]
 800162c:	ee07 3a90 	vmov	s15, r3
 8001630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001634:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001638:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8001668 <readHumidity+0xa0>
 800163c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001640:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8001670 <readHumidity+0xa8>
 8001644:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001648:	eeb1 6b08 	vmov.f64	d6, #24	@ 0x40c00000  6.0
 800164c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001650:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001654:	edc7 7a04 	vstr	s15, [r7, #16]

  return humidity;
 8001658:	693b      	ldr	r3, [r7, #16]
}
 800165a:	ee07 3a90 	vmov	s15, r3
 800165e:	eeb0 0a67 	vmov.f32	s0, s15
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	00000000 	.word	0x00000000
 800166c:	405f4000 	.word	0x405f4000
 8001670:	00000000 	.word	0x00000000
 8001674:	40efffe0 	.word	0x40efffe0
 8001678:	20000450 	.word	0x20000450
 800167c:	bf800000 	.word	0xbf800000

08001680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b092      	sub	sp, #72	@ 0x48
 8001684:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001686:	f000 fda2 	bl	80021ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800168a:	f000 f939 	bl	8001900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800168e:	f7ff fc17 	bl	8000ec0 <MX_GPIO_Init>
  MX_ETH_Init();
 8001692:	f7ff fb0f 	bl	8000cb4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001696:	f000 fc31 	bl	8001efc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800169a:	f000 fcc7 	bl	800202c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800169e:	f7ff fe69 	bl	8001374 <MX_I2C1_Init>
  MX_I2C2_Init();
 80016a2:	f7ff fea7 	bl	80013f4 <MX_I2C2_Init>
  MX_TIM4_Init();
 80016a6:	f000 fb87 	bl	8001db8 <MX_TIM4_Init>
  MX_CRC_Init();
 80016aa:	f7ff fa5f 	bl	8000b6c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 80016ae:	2100      	movs	r1, #0
 80016b0:	4885      	ldr	r0, [pc, #532]	@ (80018c8 <main+0x248>)
 80016b2:	f003 fedb 	bl	800546c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 80016b6:	2104      	movs	r1, #4
 80016b8:	4883      	ldr	r0, [pc, #524]	@ (80018c8 <main+0x248>)
 80016ba:	f003 fed7 	bl	800546c <HAL_TIM_Encoder_Start>
  __HAL_TIM_SET_COUNTER(&htim4, 480);
 80016be:	4b82      	ldr	r3, [pc, #520]	@ (80018c8 <main+0x248>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80016c6:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_UART_FLUSH_DRREGISTER(&huart3);
 80016c8:	4b80      	ldr	r3, [pc, #512]	@ (80018cc <main+0x24c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	699a      	ldr	r2, [r3, #24]
 80016ce:	4b7f      	ldr	r3, [pc, #508]	@ (80018cc <main+0x24c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f042 0208 	orr.w	r2, r2, #8
 80016d6:	619a      	str	r2, [r3, #24]
 80016d8:	4b7c      	ldr	r3, [pc, #496]	@ (80018cc <main+0x24c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	699a      	ldr	r2, [r3, #24]
 80016de:	4b7b      	ldr	r3, [pc, #492]	@ (80018cc <main+0x24c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f042 0210 	orr.w	r2, r2, #16
 80016e6:	619a      	str	r2, [r3, #24]
  HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_buffer[0], 1);
 80016e8:	2201      	movs	r2, #1
 80016ea:	4979      	ldr	r1, [pc, #484]	@ (80018d0 <main+0x250>)
 80016ec:	4877      	ldr	r0, [pc, #476]	@ (80018cc <main+0x24c>)
 80016ee:	f004 fada 	bl	8005ca6 <HAL_UART_Receive_IT>

  lcd_init(&hi2c2);
 80016f2:	4878      	ldr	r0, [pc, #480]	@ (80018d4 <main+0x254>)
 80016f4:	f7ff fd14 	bl	8001120 <lcd_init>
  lcd_clear(&hi2c2);
 80016f8:	4876      	ldr	r0, [pc, #472]	@ (80018d4 <main+0x254>)
 80016fa:	f7ff fd8a 	bl	8001212 <lcd_clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Target value processing
	  if(__HAL_TIM_GET_COUNTER(&htim4) >= 600)
 80016fe:	4b72      	ldr	r3, [pc, #456]	@ (80018c8 <main+0x248>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001704:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8001708:	d305      	bcc.n	8001716 <main+0x96>
		  __HAL_TIM_SET_COUNTER(&htim4, 600);
 800170a:	4b6f      	ldr	r3, [pc, #444]	@ (80018c8 <main+0x248>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8001712:	625a      	str	r2, [r3, #36]	@ 0x24
 8001714:	e008      	b.n	8001728 <main+0xa8>
	  else if(__HAL_TIM_GET_COUNTER(&htim4) <= 200)
 8001716:	4b6c      	ldr	r3, [pc, #432]	@ (80018c8 <main+0x248>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800171c:	2bc8      	cmp	r3, #200	@ 0xc8
 800171e:	d803      	bhi.n	8001728 <main+0xa8>
		  __HAL_TIM_SET_COUNTER(&htim4, 200);
 8001720:	4b69      	ldr	r3, [pc, #420]	@ (80018c8 <main+0x248>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	22c8      	movs	r2, #200	@ 0xc8
 8001726:	625a      	str	r2, [r3, #36]	@ 0x24

      float received_value = receiveData();
 8001728:	f000 f9a4 	bl	8001a74 <receiveData>
 800172c:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34

      if (received_value >= 0.0f){
 8001730:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001734:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173c:	db08      	blt.n	8001750 <main+0xd0>
    	  set = received_value;
 800173e:	4a66      	ldr	r2, [pc, #408]	@ (80018d8 <main+0x258>)
 8001740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001742:	6013      	str	r3, [r2, #0]
      	  encoderLast = __HAL_TIM_GET_COUNTER(&htim4);
 8001744:	4b60      	ldr	r3, [pc, #384]	@ (80018c8 <main+0x248>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800174a:	461a      	mov	r2, r3
 800174c:	4b63      	ldr	r3, [pc, #396]	@ (80018dc <main+0x25c>)
 800174e:	601a      	str	r2, [r3, #0]
      }

      if(encoderLast != __HAL_TIM_GET_COUNTER(&htim4)){
 8001750:	4b5d      	ldr	r3, [pc, #372]	@ (80018c8 <main+0x248>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001756:	4a61      	ldr	r2, [pc, #388]	@ (80018dc <main+0x25c>)
 8001758:	6812      	ldr	r2, [r2, #0]
 800175a:	4293      	cmp	r3, r2
 800175c:	d010      	beq.n	8001780 <main+0x100>
    	  set = (__HAL_TIM_GET_COUNTER(&htim4) - 200) / 4.0;
 800175e:	4b5a      	ldr	r3, [pc, #360]	@ (80018c8 <main+0x248>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001764:	3bc8      	subs	r3, #200	@ 0xc8
 8001766:	ee07 3a90 	vmov	s15, r3
 800176a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800176e:	eeb1 5b00 	vmov.f64	d5, #16	@ 0x40800000  4.0
 8001772:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001776:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800177a:	4b57      	ldr	r3, [pc, #348]	@ (80018d8 <main+0x258>)
 800177c:	edc3 7a00 	vstr	s15, [r3]
      }


	  //Humidifier control
      humidity = readHumidity();
 8001780:	f7ff ff22 	bl	80015c8 <readHumidity>
 8001784:	eef0 7a40 	vmov.f32	s15, s0
 8001788:	4b55      	ldr	r3, [pc, #340]	@ (80018e0 <main+0x260>)
 800178a:	edc3 7a00 	vstr	s15, [r3]

	  main_control_loop(humidity, set * 0.942, set * 1.028);
 800178e:	4b54      	ldr	r3, [pc, #336]	@ (80018e0 <main+0x260>)
 8001790:	edd3 5a00 	vldr	s11, [r3]
 8001794:	4b50      	ldr	r3, [pc, #320]	@ (80018d8 <main+0x258>)
 8001796:	edd3 7a00 	vldr	s15, [r3]
 800179a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800179e:	ed9f 6b44 	vldr	d6, [pc, #272]	@ 80018b0 <main+0x230>
 80017a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017a6:	eeb7 5bc7 	vcvt.f32.f64	s10, d7
 80017aa:	4b4b      	ldr	r3, [pc, #300]	@ (80018d8 <main+0x258>)
 80017ac:	edd3 7a00 	vldr	s15, [r3]
 80017b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017b4:	ed9f 6b40 	vldr	d6, [pc, #256]	@ 80018b8 <main+0x238>
 80017b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017bc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80017c0:	eeb0 1a67 	vmov.f32	s2, s15
 80017c4:	eef0 0a45 	vmov.f32	s1, s10
 80017c8:	eeb0 0a65 	vmov.f32	s0, s11
 80017cc:	f7ff f924 	bl	8000a18 <main_control_loop>

	  if(tryingFor){
 80017d0:	4b44      	ldr	r3, [pc, #272]	@ (80018e4 <main+0x264>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d002      	beq.n	80017de <main+0x15e>
		  humidifier_on();
 80017d8:	f7ff fc42 	bl	8001060 <humidifier_on>
 80017dc:	e001      	b.n	80017e2 <main+0x162>
	  } else{
		  humidifier_off();
 80017de:	f7ff fc69 	bl	80010b4 <humidifier_off>
	  }


	  //Fan control
	  fan_control(humidity, set * 1.028, set * 1.03);
 80017e2:	4b3f      	ldr	r3, [pc, #252]	@ (80018e0 <main+0x260>)
 80017e4:	edd3 5a00 	vldr	s11, [r3]
 80017e8:	4b3b      	ldr	r3, [pc, #236]	@ (80018d8 <main+0x258>)
 80017ea:	edd3 7a00 	vldr	s15, [r3]
 80017ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017f2:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 80018b8 <main+0x238>
 80017f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017fa:	eeb7 5bc7 	vcvt.f32.f64	s10, d7
 80017fe:	4b36      	ldr	r3, [pc, #216]	@ (80018d8 <main+0x258>)
 8001800:	edd3 7a00 	vldr	s15, [r3]
 8001804:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001808:	ed9f 6b2d 	vldr	d6, [pc, #180]	@ 80018c0 <main+0x240>
 800180c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001810:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001814:	eeb0 1a67 	vmov.f32	s2, s15
 8001818:	eef0 0a45 	vmov.f32	s1, s10
 800181c:	eeb0 0a65 	vmov.f32	s0, s11
 8001820:	f7ff f978 	bl	8000b14 <fan_control>
	  HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, fanState);
 8001824:	4b30      	ldr	r3, [pc, #192]	@ (80018e8 <main+0x268>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800182e:	482f      	ldr	r0, [pc, #188]	@ (80018ec <main+0x26c>)
 8001830:	f001 fcde 	bl	80031f0 <HAL_GPIO_WritePin>

      char buffer[50];
      sprintf(buffer, "%.2f,%.2f,%i,%i\n", set, humidity, fanState, humidState);
 8001834:	4b28      	ldr	r3, [pc, #160]	@ (80018d8 <main+0x258>)
 8001836:	edd3 7a00 	vldr	s15, [r3]
 800183a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800183e:	4b28      	ldr	r3, [pc, #160]	@ (80018e0 <main+0x260>)
 8001840:	edd3 7a00 	vldr	s15, [r3]
 8001844:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001848:	4b27      	ldr	r3, [pc, #156]	@ (80018e8 <main+0x268>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	4b28      	ldr	r3, [pc, #160]	@ (80018f0 <main+0x270>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	4638      	mov	r0, r7
 8001854:	9303      	str	r3, [sp, #12]
 8001856:	9202      	str	r2, [sp, #8]
 8001858:	ed8d 7b00 	vstr	d7, [sp]
 800185c:	ec53 2b16 	vmov	r2, r3, d6
 8001860:	4924      	ldr	r1, [pc, #144]	@ (80018f4 <main+0x274>)
 8001862:	f007 fd5f 	bl	8009324 <siprintf>
      send_data_with_crc((uint8_t *)buffer, strlen(buffer));
 8001866:	463b      	mov	r3, r7
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fd39 	bl	80002e0 <strlen>
 800186e:	4603      	mov	r3, r0
 8001870:	b29a      	uxth	r2, r3
 8001872:	463b      	mov	r3, r7
 8001874:	4611      	mov	r1, r2
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff f9fa 	bl	8000c70 <send_data_with_crc>


      //LCD update
	  lcd_clear(&hi2c2);
 800187c:	4815      	ldr	r0, [pc, #84]	@ (80018d4 <main+0x254>)
 800187e:	f7ff fcc8 	bl	8001212 <lcd_clear>
	  lcd_display_two_floats(&hi2c2, "Set: %.2f%%", "Read: %.2f%%", set, humidity);
 8001882:	4b15      	ldr	r3, [pc, #84]	@ (80018d8 <main+0x258>)
 8001884:	edd3 7a00 	vldr	s15, [r3]
 8001888:	4b15      	ldr	r3, [pc, #84]	@ (80018e0 <main+0x260>)
 800188a:	ed93 7a00 	vldr	s14, [r3]
 800188e:	eef0 0a47 	vmov.f32	s1, s14
 8001892:	eeb0 0a67 	vmov.f32	s0, s15
 8001896:	4a18      	ldr	r2, [pc, #96]	@ (80018f8 <main+0x278>)
 8001898:	4918      	ldr	r1, [pc, #96]	@ (80018fc <main+0x27c>)
 800189a:	480e      	ldr	r0, [pc, #56]	@ (80018d4 <main+0x254>)
 800189c:	f7ff fd24 	bl	80012e8 <lcd_display_two_floats>
	  HAL_Delay(500);
 80018a0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80018a4:	f000 fcf0 	bl	8002288 <HAL_Delay>
  {
 80018a8:	e729      	b.n	80016fe <main+0x7e>
 80018aa:	bf00      	nop
 80018ac:	f3af 8000 	nop.w
 80018b0:	2f1a9fbe 	.word	0x2f1a9fbe
 80018b4:	3fee24dd 	.word	0x3fee24dd
 80018b8:	20c49ba6 	.word	0x20c49ba6
 80018bc:	3ff072b0 	.word	0x3ff072b0
 80018c0:	47ae147b 	.word	0x47ae147b
 80018c4:	3ff07ae1 	.word	0x3ff07ae1
 80018c8:	2000054c 	.word	0x2000054c
 80018cc:	20000598 	.word	0x20000598
 80018d0:	20000500 	.word	0x20000500
 80018d4:	200004a4 	.word	0x200004a4
 80018d8:	20000004 	.word	0x20000004
 80018dc:	200004fc 	.word	0x200004fc
 80018e0:	20000000 	.word	0x20000000
 80018e4:	20000540 	.word	0x20000540
 80018e8:	20000541 	.word	0x20000541
 80018ec:	40021000 	.word	0x40021000
 80018f0:	20000542 	.word	0x20000542
 80018f4:	0800be10 	.word	0x0800be10
 80018f8:	0800be24 	.word	0x0800be24
 80018fc:	0800be34 	.word	0x0800be34

08001900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b094      	sub	sp, #80	@ 0x50
 8001904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001906:	f107 031c 	add.w	r3, r7, #28
 800190a:	2234      	movs	r2, #52	@ 0x34
 800190c:	2100      	movs	r1, #0
 800190e:	4618      	mov	r0, r3
 8001910:	f007 fd6b 	bl	80093ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001914:	f107 0308 	add.w	r3, r7, #8
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001924:	f002 fba0 	bl	8004068 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001928:	4b2c      	ldr	r3, [pc, #176]	@ (80019dc <SystemClock_Config+0xdc>)
 800192a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192c:	4a2b      	ldr	r2, [pc, #172]	@ (80019dc <SystemClock_Config+0xdc>)
 800192e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001932:	6413      	str	r3, [r2, #64]	@ 0x40
 8001934:	4b29      	ldr	r3, [pc, #164]	@ (80019dc <SystemClock_Config+0xdc>)
 8001936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001938:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001940:	4b27      	ldr	r3, [pc, #156]	@ (80019e0 <SystemClock_Config+0xe0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001948:	4a25      	ldr	r2, [pc, #148]	@ (80019e0 <SystemClock_Config+0xe0>)
 800194a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	4b23      	ldr	r3, [pc, #140]	@ (80019e0 <SystemClock_Config+0xe0>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001958:	603b      	str	r3, [r7, #0]
 800195a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800195c:	2301      	movs	r3, #1
 800195e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001960:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001964:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001966:	2302      	movs	r3, #2
 8001968:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800196a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800196e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001970:	2304      	movs	r3, #4
 8001972:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001974:	2360      	movs	r3, #96	@ 0x60
 8001976:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001978:	2302      	movs	r3, #2
 800197a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800197c:	2304      	movs	r3, #4
 800197e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001980:	2302      	movs	r3, #2
 8001982:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001984:	f107 031c 	add.w	r3, r7, #28
 8001988:	4618      	mov	r0, r3
 800198a:	f002 fbcd 	bl	8004128 <HAL_RCC_OscConfig>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001994:	f000 f826 	bl	80019e4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001998:	f002 fb76 	bl	8004088 <HAL_PWREx_EnableOverDrive>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80019a2:	f000 f81f 	bl	80019e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019a6:	230f      	movs	r3, #15
 80019a8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019aa:	2302      	movs	r3, #2
 80019ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80019bc:	f107 0308 	add.w	r3, r7, #8
 80019c0:	2103      	movs	r1, #3
 80019c2:	4618      	mov	r0, r3
 80019c4:	f002 fe5e 	bl	8004684 <HAL_RCC_ClockConfig>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80019ce:	f000 f809 	bl	80019e4 <Error_Handler>
  }
}
 80019d2:	bf00      	nop
 80019d4:	3750      	adds	r7, #80	@ 0x50
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40007000 	.word	0x40007000

080019e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e8:	b672      	cpsid	i
}
 80019ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019ec:	bf00      	nop
 80019ee:	e7fd      	b.n	80019ec <Error_Handler+0x8>

080019f0 <HAL_UART_RxCpltCallback>:

extern char rx_buffer[RX_BUFFER_SIZE];
volatile uint8_t data_received = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a18      	ldr	r2, [pc, #96]	@ (8001a60 <HAL_UART_RxCpltCallback+0x70>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d12a      	bne.n	8001a58 <HAL_UART_RxCpltCallback+0x68>
    {
        static uint16_t rx_index = 0;

        if (rx_buffer[rx_index] == '\n')
 8001a02:	4b18      	ldr	r3, [pc, #96]	@ (8001a64 <HAL_UART_RxCpltCallback+0x74>)
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	461a      	mov	r2, r3
 8001a08:	4b17      	ldr	r3, [pc, #92]	@ (8001a68 <HAL_UART_RxCpltCallback+0x78>)
 8001a0a:	5c9b      	ldrb	r3, [r3, r2]
 8001a0c:	2b0a      	cmp	r3, #10
 8001a0e:	d10c      	bne.n	8001a2a <HAL_UART_RxCpltCallback+0x3a>
        {
            rx_buffer[rx_index] = '\0';
 8001a10:	4b14      	ldr	r3, [pc, #80]	@ (8001a64 <HAL_UART_RxCpltCallback+0x74>)
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b14      	ldr	r3, [pc, #80]	@ (8001a68 <HAL_UART_RxCpltCallback+0x78>)
 8001a18:	2100      	movs	r1, #0
 8001a1a:	5499      	strb	r1, [r3, r2]
            data_received = 1;
 8001a1c:	4b13      	ldr	r3, [pc, #76]	@ (8001a6c <HAL_UART_RxCpltCallback+0x7c>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	701a      	strb	r2, [r3, #0]
            rx_index = 0;
 8001a22:	4b10      	ldr	r3, [pc, #64]	@ (8001a64 <HAL_UART_RxCpltCallback+0x74>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	801a      	strh	r2, [r3, #0]
 8001a28:	e00c      	b.n	8001a44 <HAL_UART_RxCpltCallback+0x54>
        }
        else
        {
            rx_index = (rx_index + 1) % RX_BUFFER_SIZE;
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a64 <HAL_UART_RxCpltCallback+0x74>)
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	425a      	negs	r2, r3
 8001a32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a36:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001a3a:	bf58      	it	pl
 8001a3c:	4253      	negpl	r3, r2
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	4b08      	ldr	r3, [pc, #32]	@ (8001a64 <HAL_UART_RxCpltCallback+0x74>)
 8001a42:	801a      	strh	r2, [r3, #0]
        }

        HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_buffer[rx_index], 1);
 8001a44:	4b07      	ldr	r3, [pc, #28]	@ (8001a64 <HAL_UART_RxCpltCallback+0x74>)
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b07      	ldr	r3, [pc, #28]	@ (8001a68 <HAL_UART_RxCpltCallback+0x78>)
 8001a4c:	4413      	add	r3, r2
 8001a4e:	2201      	movs	r2, #1
 8001a50:	4619      	mov	r1, r3
 8001a52:	4807      	ldr	r0, [pc, #28]	@ (8001a70 <HAL_UART_RxCpltCallback+0x80>)
 8001a54:	f004 f927 	bl	8005ca6 <HAL_UART_Receive_IT>
    }
}
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40004800 	.word	0x40004800
 8001a64:	20000544 	.word	0x20000544
 8001a68:	20000500 	.word	0x20000500
 8001a6c:	20000543 	.word	0x20000543
 8001a70:	20000598 	.word	0x20000598

08001a74 <receiveData>:

float receiveData()
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
    if (data_received)
 8001a7a:	4b2b      	ldr	r3, [pc, #172]	@ (8001b28 <receiveData+0xb4>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d048      	beq.n	8001b16 <receiveData+0xa2>
    {
        data_received = 0;
 8001a84:	4b28      	ldr	r3, [pc, #160]	@ (8001b28 <receiveData+0xb4>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	701a      	strb	r2, [r3, #0]

        //data parsing
        char *delimiter = strrchr(rx_buffer, ',');
 8001a8a:	212c      	movs	r1, #44	@ 0x2c
 8001a8c:	4827      	ldr	r0, [pc, #156]	@ (8001b2c <receiveData+0xb8>)
 8001a8e:	f007 fcc6 	bl	800941e <strrchr>
 8001a92:	60f8      	str	r0, [r7, #12]
        if (!delimiter)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <receiveData+0x2a>
            return -1.0f;
 8001a9a:	4b25      	ldr	r3, [pc, #148]	@ (8001b30 <receiveData+0xbc>)
 8001a9c:	e03c      	b.n	8001b18 <receiveData+0xa4>

        //data splitting
        *delimiter = '\0';
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
        uint16_t received_crc = (uint16_t)atoi(delimiter + 1);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f005 fe70 	bl	800778e <atoi>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	817b      	strh	r3, [r7, #10]

        uint16_t computed_crc = compute_crc16((uint8_t *)rx_buffer, strlen(rx_buffer));
 8001ab2:	481e      	ldr	r0, [pc, #120]	@ (8001b2c <receiveData+0xb8>)
 8001ab4:	f7fe fc14 	bl	80002e0 <strlen>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	4619      	mov	r1, r3
 8001abe:	481b      	ldr	r0, [pc, #108]	@ (8001b2c <receiveData+0xb8>)
 8001ac0:	f7ff f896 	bl	8000bf0 <compute_crc16>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	813b      	strh	r3, [r7, #8]
        if (received_crc != computed_crc)
 8001ac8:	897a      	ldrh	r2, [r7, #10]
 8001aca:	893b      	ldrh	r3, [r7, #8]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d001      	beq.n	8001ad4 <receiveData+0x60>
            return -1.0f; // CRC mismatch
 8001ad0:	4b17      	ldr	r3, [pc, #92]	@ (8001b30 <receiveData+0xbc>)
 8001ad2:	e021      	b.n	8001b18 <receiveData+0xa4>

        char *end_ptr;
        float value = strtof(rx_buffer, &end_ptr);
 8001ad4:	463b      	mov	r3, r7
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4814      	ldr	r0, [pc, #80]	@ (8001b2c <receiveData+0xb8>)
 8001ada:	f006 fc15 	bl	8008308 <strtof>
 8001ade:	ed87 0a01 	vstr	s0, [r7, #4]

        if (end_ptr != rx_buffer && *end_ptr == '\0' && value >= 0.0f && value <= 100.0f)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	4a11      	ldr	r2, [pc, #68]	@ (8001b2c <receiveData+0xb8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d015      	beq.n	8001b16 <receiveData+0xa2>
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d111      	bne.n	8001b16 <receiveData+0xa2>
 8001af2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001af6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afe:	db0a      	blt.n	8001b16 <receiveData+0xa2>
 8001b00:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b04:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001b34 <receiveData+0xc0>
 8001b08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b10:	d801      	bhi.n	8001b16 <receiveData+0xa2>
        {
            return value;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	e000      	b.n	8001b18 <receiveData+0xa4>
        }
    }

    return -1.0f;
 8001b16:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <receiveData+0xbc>)
}
 8001b18:	ee07 3a90 	vmov	s15, r3
 8001b1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000543 	.word	0x20000543
 8001b2c:	20000500 	.word	0x20000500
 8001b30:	bf800000 	.word	0xbf800000
 8001b34:	42c80000 	.word	0x42c80000

08001b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b7c <HAL_MspInit+0x44>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b42:	4a0e      	ldr	r2, [pc, #56]	@ (8001b7c <HAL_MspInit+0x44>)
 8001b44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b7c <HAL_MspInit+0x44>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b56:	4b09      	ldr	r3, [pc, #36]	@ (8001b7c <HAL_MspInit+0x44>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5a:	4a08      	ldr	r2, [pc, #32]	@ (8001b7c <HAL_MspInit+0x44>)
 8001b5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b60:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b62:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <HAL_MspInit+0x44>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b6a:	603b      	str	r3, [r7, #0]
 8001b6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800

08001b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b84:	bf00      	nop
 8001b86:	e7fd      	b.n	8001b84 <NMI_Handler+0x4>

08001b88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b8c:	bf00      	nop
 8001b8e:	e7fd      	b.n	8001b8c <HardFault_Handler+0x4>

08001b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b94:	bf00      	nop
 8001b96:	e7fd      	b.n	8001b94 <MemManage_Handler+0x4>

08001b98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b9c:	bf00      	nop
 8001b9e:	e7fd      	b.n	8001b9c <BusFault_Handler+0x4>

08001ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba4:	bf00      	nop
 8001ba6:	e7fd      	b.n	8001ba4 <UsageFault_Handler+0x4>

08001ba8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bd6:	f000 fb37 	bl	8002248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001be4:	4802      	ldr	r0, [pc, #8]	@ (8001bf0 <TIM4_IRQHandler+0x10>)
 8001be6:	f003 fccf 	bl	8005588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	2000054c 	.word	0x2000054c

08001bf4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001bf8:	4802      	ldr	r0, [pc, #8]	@ (8001c04 <USART3_IRQHandler+0x10>)
 8001bfa:	f004 f899 	bl	8005d30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000598 	.word	0x20000598

08001c08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return 1;
 8001c0c:	2301      	movs	r3, #1
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <_kill>:

int _kill(int pid, int sig)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c22:	f007 fc5d 	bl	80094e0 <__errno>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2216      	movs	r2, #22
 8001c2a:	601a      	str	r2, [r3, #0]
  return -1;
 8001c2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <_exit>:

void _exit (int status)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c40:	f04f 31ff 	mov.w	r1, #4294967295
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff ffe7 	bl	8001c18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c4a:	bf00      	nop
 8001c4c:	e7fd      	b.n	8001c4a <_exit+0x12>

08001c4e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b086      	sub	sp, #24
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	60f8      	str	r0, [r7, #12]
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	e00a      	b.n	8001c76 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c60:	f3af 8000 	nop.w
 8001c64:	4601      	mov	r1, r0
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	60ba      	str	r2, [r7, #8]
 8001c6c:	b2ca      	uxtb	r2, r1
 8001c6e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	3301      	adds	r3, #1
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	dbf0      	blt.n	8001c60 <_read+0x12>
  }

  return len;
 8001c7e:	687b      	ldr	r3, [r7, #4]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	e009      	b.n	8001cae <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	1c5a      	adds	r2, r3, #1
 8001c9e:	60ba      	str	r2, [r7, #8]
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	3301      	adds	r3, #1
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	dbf1      	blt.n	8001c9a <_write+0x12>
  }
  return len;
 8001cb6:	687b      	ldr	r3, [r7, #4]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <_close>:

int _close(int file)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ce8:	605a      	str	r2, [r3, #4]
  return 0;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <_isatty>:

int _isatty(int file)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d00:	2301      	movs	r3, #1
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b085      	sub	sp, #20
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	60f8      	str	r0, [r7, #12]
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d30:	4a14      	ldr	r2, [pc, #80]	@ (8001d84 <_sbrk+0x5c>)
 8001d32:	4b15      	ldr	r3, [pc, #84]	@ (8001d88 <_sbrk+0x60>)
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d3c:	4b13      	ldr	r3, [pc, #76]	@ (8001d8c <_sbrk+0x64>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d102      	bne.n	8001d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d44:	4b11      	ldr	r3, [pc, #68]	@ (8001d8c <_sbrk+0x64>)
 8001d46:	4a12      	ldr	r2, [pc, #72]	@ (8001d90 <_sbrk+0x68>)
 8001d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d4a:	4b10      	ldr	r3, [pc, #64]	@ (8001d8c <_sbrk+0x64>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d207      	bcs.n	8001d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d58:	f007 fbc2 	bl	80094e0 <__errno>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	220c      	movs	r2, #12
 8001d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d62:	f04f 33ff 	mov.w	r3, #4294967295
 8001d66:	e009      	b.n	8001d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d68:	4b08      	ldr	r3, [pc, #32]	@ (8001d8c <_sbrk+0x64>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d6e:	4b07      	ldr	r3, [pc, #28]	@ (8001d8c <_sbrk+0x64>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	4a05      	ldr	r2, [pc, #20]	@ (8001d8c <_sbrk+0x64>)
 8001d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20080000 	.word	0x20080000
 8001d88:	00000400 	.word	0x00000400
 8001d8c:	20000548 	.word	0x20000548
 8001d90:	20000c50 	.word	0x20000c50

08001d94 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d98:	4b06      	ldr	r3, [pc, #24]	@ (8001db4 <SystemInit+0x20>)
 8001d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d9e:	4a05      	ldr	r2, [pc, #20]	@ (8001db4 <SystemInit+0x20>)
 8001da0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001da4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08c      	sub	sp, #48	@ 0x30
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dbe:	f107 030c 	add.w	r3, r7, #12
 8001dc2:	2224      	movs	r2, #36	@ 0x24
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f007 fb0f 	bl	80093ea <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dcc:	463b      	mov	r3, r7
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	605a      	str	r2, [r3, #4]
 8001dd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001dd6:	4b21      	ldr	r3, [pc, #132]	@ (8001e5c <MX_TIM4_Init+0xa4>)
 8001dd8:	4a21      	ldr	r2, [pc, #132]	@ (8001e60 <MX_TIM4_Init+0xa8>)
 8001dda:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e5c <MX_TIM4_Init+0xa4>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e5c <MX_TIM4_Init+0xa4>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 800;
 8001de8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e5c <MX_TIM4_Init+0xa4>)
 8001dea:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001dee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e5c <MX_TIM4_Init+0xa4>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df6:	4b19      	ldr	r3, [pc, #100]	@ (8001e5c <MX_TIM4_Init+0xa4>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e00:	2300      	movs	r3, #0
 8001e02:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e04:	2301      	movs	r3, #1
 8001e06:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e10:	2300      	movs	r3, #0
 8001e12:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e14:	2301      	movs	r3, #1
 8001e16:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001e20:	f107 030c 	add.w	r3, r7, #12
 8001e24:	4619      	mov	r1, r3
 8001e26:	480d      	ldr	r0, [pc, #52]	@ (8001e5c <MX_TIM4_Init+0xa4>)
 8001e28:	f003 fa7a 	bl	8005320 <HAL_TIM_Encoder_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001e32:	f7ff fdd7 	bl	80019e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e36:	2300      	movs	r3, #0
 8001e38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e3e:	463b      	mov	r3, r7
 8001e40:	4619      	mov	r1, r3
 8001e42:	4806      	ldr	r0, [pc, #24]	@ (8001e5c <MX_TIM4_Init+0xa4>)
 8001e44:	f003 fdac 	bl	80059a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001e4e:	f7ff fdc9 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e52:	bf00      	nop
 8001e54:	3730      	adds	r7, #48	@ 0x30
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	2000054c 	.word	0x2000054c
 8001e60:	40000800 	.word	0x40000800

08001e64 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	@ 0x28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a1b      	ldr	r2, [pc, #108]	@ (8001ef0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d130      	bne.n	8001ee8 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e86:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef4 <HAL_TIM_Encoder_MspInit+0x90>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8a:	4a1a      	ldr	r2, [pc, #104]	@ (8001ef4 <HAL_TIM_Encoder_MspInit+0x90>)
 8001e8c:	f043 0304 	orr.w	r3, r3, #4
 8001e90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e92:	4b18      	ldr	r3, [pc, #96]	@ (8001ef4 <HAL_TIM_Encoder_MspInit+0x90>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	f003 0304 	and.w	r3, r3, #4
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e9e:	4b15      	ldr	r3, [pc, #84]	@ (8001ef4 <HAL_TIM_Encoder_MspInit+0x90>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea2:	4a14      	ldr	r2, [pc, #80]	@ (8001ef4 <HAL_TIM_Encoder_MspInit+0x90>)
 8001ea4:	f043 0308 	orr.w	r3, r3, #8
 8001ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eaa:	4b12      	ldr	r3, [pc, #72]	@ (8001ef4 <HAL_TIM_Encoder_MspInit+0x90>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001eb6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4809      	ldr	r0, [pc, #36]	@ (8001ef8 <HAL_TIM_Encoder_MspInit+0x94>)
 8001ed4:	f000 ffe0 	bl	8002e98 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2100      	movs	r1, #0
 8001edc:	201e      	movs	r0, #30
 8001ede:	f000 fad2 	bl	8002486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ee2:	201e      	movs	r0, #30
 8001ee4:	f000 faeb 	bl	80024be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001ee8:	bf00      	nop
 8001eea:	3728      	adds	r7, #40	@ 0x28
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40000800 	.word	0x40000800
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40020c00 	.word	0x40020c00

08001efc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f00:	4b14      	ldr	r3, [pc, #80]	@ (8001f54 <MX_USART3_UART_Init+0x58>)
 8001f02:	4a15      	ldr	r2, [pc, #84]	@ (8001f58 <MX_USART3_UART_Init+0x5c>)
 8001f04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f06:	4b13      	ldr	r3, [pc, #76]	@ (8001f54 <MX_USART3_UART_Init+0x58>)
 8001f08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f0e:	4b11      	ldr	r3, [pc, #68]	@ (8001f54 <MX_USART3_UART_Init+0x58>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f14:	4b0f      	ldr	r3, [pc, #60]	@ (8001f54 <MX_USART3_UART_Init+0x58>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f54 <MX_USART3_UART_Init+0x58>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f20:	4b0c      	ldr	r3, [pc, #48]	@ (8001f54 <MX_USART3_UART_Init+0x58>)
 8001f22:	220c      	movs	r2, #12
 8001f24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f26:	4b0b      	ldr	r3, [pc, #44]	@ (8001f54 <MX_USART3_UART_Init+0x58>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f2c:	4b09      	ldr	r3, [pc, #36]	@ (8001f54 <MX_USART3_UART_Init+0x58>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f32:	4b08      	ldr	r3, [pc, #32]	@ (8001f54 <MX_USART3_UART_Init+0x58>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f38:	4b06      	ldr	r3, [pc, #24]	@ (8001f54 <MX_USART3_UART_Init+0x58>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f3e:	4805      	ldr	r0, [pc, #20]	@ (8001f54 <MX_USART3_UART_Init+0x58>)
 8001f40:	f003 fdda 	bl	8005af8 <HAL_UART_Init>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001f4a:	f7ff fd4b 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000598 	.word	0x20000598
 8001f58:	40004800 	.word	0x40004800

08001f5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b0ae      	sub	sp, #184	@ 0xb8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f74:	f107 0314 	add.w	r3, r7, #20
 8001f78:	2290      	movs	r2, #144	@ 0x90
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f007 fa34 	bl	80093ea <memset>
  if(uartHandle->Instance==USART3)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a26      	ldr	r2, [pc, #152]	@ (8002020 <HAL_UART_MspInit+0xc4>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d144      	bne.n	8002016 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f90:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001f92:	2300      	movs	r3, #0
 8001f94:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f96:	f107 0314 	add.w	r3, r7, #20
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f002 fd98 	bl	8004ad0 <HAL_RCCEx_PeriphCLKConfig>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001fa6:	f7ff fd1d 	bl	80019e4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001faa:	4b1e      	ldr	r3, [pc, #120]	@ (8002024 <HAL_UART_MspInit+0xc8>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fae:	4a1d      	ldr	r2, [pc, #116]	@ (8002024 <HAL_UART_MspInit+0xc8>)
 8001fb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8002024 <HAL_UART_MspInit+0xc8>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fc2:	4b18      	ldr	r3, [pc, #96]	@ (8002024 <HAL_UART_MspInit+0xc8>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	4a17      	ldr	r2, [pc, #92]	@ (8002024 <HAL_UART_MspInit+0xc8>)
 8001fc8:	f043 0308 	orr.w	r3, r3, #8
 8001fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fce:	4b15      	ldr	r3, [pc, #84]	@ (8002024 <HAL_UART_MspInit+0xc8>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001fda:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001fde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ff4:	2307      	movs	r3, #7
 8001ff6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ffa:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ffe:	4619      	mov	r1, r3
 8002000:	4809      	ldr	r0, [pc, #36]	@ (8002028 <HAL_UART_MspInit+0xcc>)
 8002002:	f000 ff49 	bl	8002e98 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002006:	2200      	movs	r2, #0
 8002008:	2100      	movs	r1, #0
 800200a:	2027      	movs	r0, #39	@ 0x27
 800200c:	f000 fa3b 	bl	8002486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002010:	2027      	movs	r0, #39	@ 0x27
 8002012:	f000 fa54 	bl	80024be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002016:	bf00      	nop
 8002018:	37b8      	adds	r7, #184	@ 0xb8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40004800 	.word	0x40004800
 8002024:	40023800 	.word	0x40023800
 8002028:	40020c00 	.word	0x40020c00

0800202c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002030:	4b14      	ldr	r3, [pc, #80]	@ (8002084 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002032:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002036:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002038:	4b12      	ldr	r3, [pc, #72]	@ (8002084 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800203a:	2206      	movs	r2, #6
 800203c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800203e:	4b11      	ldr	r3, [pc, #68]	@ (8002084 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002040:	2202      	movs	r2, #2
 8002042:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002044:	4b0f      	ldr	r3, [pc, #60]	@ (8002084 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002046:	2200      	movs	r2, #0
 8002048:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800204a:	4b0e      	ldr	r3, [pc, #56]	@ (8002084 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800204c:	2202      	movs	r2, #2
 800204e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002050:	4b0c      	ldr	r3, [pc, #48]	@ (8002084 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002052:	2201      	movs	r2, #1
 8002054:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002056:	4b0b      	ldr	r3, [pc, #44]	@ (8002084 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002058:	2200      	movs	r2, #0
 800205a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800205c:	4b09      	ldr	r3, [pc, #36]	@ (8002084 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800205e:	2200      	movs	r2, #0
 8002060:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002062:	4b08      	ldr	r3, [pc, #32]	@ (8002084 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002064:	2201      	movs	r2, #1
 8002066:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002068:	4b06      	ldr	r3, [pc, #24]	@ (8002084 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800206a:	2200      	movs	r2, #0
 800206c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800206e:	4805      	ldr	r0, [pc, #20]	@ (8002084 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002070:	f001 febf 	bl	8003df2 <HAL_PCD_Init>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800207a:	f7ff fcb3 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000620 	.word	0x20000620

08002088 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b0ae      	sub	sp, #184	@ 0xb8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	2290      	movs	r2, #144	@ 0x90
 80020a6:	2100      	movs	r1, #0
 80020a8:	4618      	mov	r0, r3
 80020aa:	f007 f99e 	bl	80093ea <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020b6:	d159      	bne.n	800216c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80020b8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80020bc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80020be:	2300      	movs	r3, #0
 80020c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020c4:	f107 0314 	add.w	r3, r7, #20
 80020c8:	4618      	mov	r0, r3
 80020ca:	f002 fd01 	bl	8004ad0 <HAL_RCCEx_PeriphCLKConfig>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80020d4:	f7ff fc86 	bl	80019e4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d8:	4b26      	ldr	r3, [pc, #152]	@ (8002174 <HAL_PCD_MspInit+0xec>)
 80020da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020dc:	4a25      	ldr	r2, [pc, #148]	@ (8002174 <HAL_PCD_MspInit+0xec>)
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80020e4:	4b23      	ldr	r3, [pc, #140]	@ (8002174 <HAL_PCD_MspInit+0xec>)
 80020e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80020f0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80020f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f8:	2302      	movs	r3, #2
 80020fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002104:	2303      	movs	r3, #3
 8002106:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800210a:	230a      	movs	r3, #10
 800210c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002110:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002114:	4619      	mov	r1, r3
 8002116:	4818      	ldr	r0, [pc, #96]	@ (8002178 <HAL_PCD_MspInit+0xf0>)
 8002118:	f000 febe 	bl	8002e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800211c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002120:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002124:	2300      	movs	r3, #0
 8002126:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002130:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002134:	4619      	mov	r1, r3
 8002136:	4810      	ldr	r0, [pc, #64]	@ (8002178 <HAL_PCD_MspInit+0xf0>)
 8002138:	f000 feae 	bl	8002e98 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800213c:	4b0d      	ldr	r3, [pc, #52]	@ (8002174 <HAL_PCD_MspInit+0xec>)
 800213e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002140:	4a0c      	ldr	r2, [pc, #48]	@ (8002174 <HAL_PCD_MspInit+0xec>)
 8002142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002146:	6353      	str	r3, [r2, #52]	@ 0x34
 8002148:	4b0a      	ldr	r3, [pc, #40]	@ (8002174 <HAL_PCD_MspInit+0xec>)
 800214a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800214c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	4b07      	ldr	r3, [pc, #28]	@ (8002174 <HAL_PCD_MspInit+0xec>)
 8002156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002158:	4a06      	ldr	r2, [pc, #24]	@ (8002174 <HAL_PCD_MspInit+0xec>)
 800215a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800215e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002160:	4b04      	ldr	r3, [pc, #16]	@ (8002174 <HAL_PCD_MspInit+0xec>)
 8002162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002164:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800216c:	bf00      	nop
 800216e:	37b8      	adds	r7, #184	@ 0xb8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40023800 	.word	0x40023800
 8002178:	40020000 	.word	0x40020000

0800217c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800217c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002180:	f7ff fe08 	bl	8001d94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002184:	480c      	ldr	r0, [pc, #48]	@ (80021b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002186:	490d      	ldr	r1, [pc, #52]	@ (80021bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002188:	4a0d      	ldr	r2, [pc, #52]	@ (80021c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800218a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800218c:	e002      	b.n	8002194 <LoopCopyDataInit>

0800218e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800218e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002192:	3304      	adds	r3, #4

08002194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002198:	d3f9      	bcc.n	800218e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800219a:	4a0a      	ldr	r2, [pc, #40]	@ (80021c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800219c:	4c0a      	ldr	r4, [pc, #40]	@ (80021c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800219e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a0:	e001      	b.n	80021a6 <LoopFillZerobss>

080021a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a4:	3204      	adds	r2, #4

080021a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a8:	d3fb      	bcc.n	80021a2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80021aa:	f007 f99f 	bl	80094ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ae:	f7ff fa67 	bl	8001680 <main>
  bx  lr    
 80021b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021b4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80021b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021bc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80021c0:	0800c298 	.word	0x0800c298
  ldr r2, =_sbss
 80021c4:	2000031c 	.word	0x2000031c
  ldr r4, =_ebss
 80021c8:	20000c50 	.word	0x20000c50

080021cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021cc:	e7fe      	b.n	80021cc <ADC_IRQHandler>

080021ce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d2:	2003      	movs	r0, #3
 80021d4:	f000 f94c 	bl	8002470 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021d8:	2000      	movs	r0, #0
 80021da:	f000 f805 	bl	80021e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021de:	f7ff fcab 	bl	8001b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021f0:	4b12      	ldr	r3, [pc, #72]	@ (800223c <HAL_InitTick+0x54>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4b12      	ldr	r3, [pc, #72]	@ (8002240 <HAL_InitTick+0x58>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	4619      	mov	r1, r3
 80021fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002202:	fbb2 f3f3 	udiv	r3, r2, r3
 8002206:	4618      	mov	r0, r3
 8002208:	f000 f967 	bl	80024da <HAL_SYSTICK_Config>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e00e      	b.n	8002234 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b0f      	cmp	r3, #15
 800221a:	d80a      	bhi.n	8002232 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800221c:	2200      	movs	r2, #0
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	f04f 30ff 	mov.w	r0, #4294967295
 8002224:	f000 f92f 	bl	8002486 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002228:	4a06      	ldr	r2, [pc, #24]	@ (8002244 <HAL_InitTick+0x5c>)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	e000      	b.n	8002234 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
}
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000008 	.word	0x20000008
 8002240:	20000010 	.word	0x20000010
 8002244:	2000000c 	.word	0x2000000c

08002248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800224c:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <HAL_IncTick+0x20>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	4b06      	ldr	r3, [pc, #24]	@ (800226c <HAL_IncTick+0x24>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4413      	add	r3, r2
 8002258:	4a04      	ldr	r2, [pc, #16]	@ (800226c <HAL_IncTick+0x24>)
 800225a:	6013      	str	r3, [r2, #0]
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	20000010 	.word	0x20000010
 800226c:	20000b00 	.word	0x20000b00

08002270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return uwTick;
 8002274:	4b03      	ldr	r3, [pc, #12]	@ (8002284 <HAL_GetTick+0x14>)
 8002276:	681b      	ldr	r3, [r3, #0]
}
 8002278:	4618      	mov	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000b00 	.word	0x20000b00

08002288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002290:	f7ff ffee 	bl	8002270 <HAL_GetTick>
 8002294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a0:	d005      	beq.n	80022ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022a2:	4b0a      	ldr	r3, [pc, #40]	@ (80022cc <HAL_Delay+0x44>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4413      	add	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022ae:	bf00      	nop
 80022b0:	f7ff ffde 	bl	8002270 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d8f7      	bhi.n	80022b0 <HAL_Delay+0x28>
  {
  }
}
 80022c0:	bf00      	nop
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000010 	.word	0x20000010

080022d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002310 <__NVIC_SetPriorityGrouping+0x40>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022ec:	4013      	ands	r3, r2
 80022ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022f8:	4b06      	ldr	r3, [pc, #24]	@ (8002314 <__NVIC_SetPriorityGrouping+0x44>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022fe:	4a04      	ldr	r2, [pc, #16]	@ (8002310 <__NVIC_SetPriorityGrouping+0x40>)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	60d3      	str	r3, [r2, #12]
}
 8002304:	bf00      	nop
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e000ed00 	.word	0xe000ed00
 8002314:	05fa0000 	.word	0x05fa0000

08002318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800231c:	4b04      	ldr	r3, [pc, #16]	@ (8002330 <__NVIC_GetPriorityGrouping+0x18>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	0a1b      	lsrs	r3, r3, #8
 8002322:	f003 0307 	and.w	r3, r3, #7
}
 8002326:	4618      	mov	r0, r3
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	2b00      	cmp	r3, #0
 8002344:	db0b      	blt.n	800235e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	f003 021f 	and.w	r2, r3, #31
 800234c:	4907      	ldr	r1, [pc, #28]	@ (800236c <__NVIC_EnableIRQ+0x38>)
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	095b      	lsrs	r3, r3, #5
 8002354:	2001      	movs	r0, #1
 8002356:	fa00 f202 	lsl.w	r2, r0, r2
 800235a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	e000e100 	.word	0xe000e100

08002370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	6039      	str	r1, [r7, #0]
 800237a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800237c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002380:	2b00      	cmp	r3, #0
 8002382:	db0a      	blt.n	800239a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	b2da      	uxtb	r2, r3
 8002388:	490c      	ldr	r1, [pc, #48]	@ (80023bc <__NVIC_SetPriority+0x4c>)
 800238a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238e:	0112      	lsls	r2, r2, #4
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	440b      	add	r3, r1
 8002394:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002398:	e00a      	b.n	80023b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	b2da      	uxtb	r2, r3
 800239e:	4908      	ldr	r1, [pc, #32]	@ (80023c0 <__NVIC_SetPriority+0x50>)
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	3b04      	subs	r3, #4
 80023a8:	0112      	lsls	r2, r2, #4
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	440b      	add	r3, r1
 80023ae:	761a      	strb	r2, [r3, #24]
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	e000e100 	.word	0xe000e100
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b089      	sub	sp, #36	@ 0x24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f1c3 0307 	rsb	r3, r3, #7
 80023de:	2b04      	cmp	r3, #4
 80023e0:	bf28      	it	cs
 80023e2:	2304      	movcs	r3, #4
 80023e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	3304      	adds	r3, #4
 80023ea:	2b06      	cmp	r3, #6
 80023ec:	d902      	bls.n	80023f4 <NVIC_EncodePriority+0x30>
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3b03      	subs	r3, #3
 80023f2:	e000      	b.n	80023f6 <NVIC_EncodePriority+0x32>
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f8:	f04f 32ff 	mov.w	r2, #4294967295
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43da      	mvns	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	401a      	ands	r2, r3
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800240c:	f04f 31ff 	mov.w	r1, #4294967295
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	fa01 f303 	lsl.w	r3, r1, r3
 8002416:	43d9      	mvns	r1, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241c:	4313      	orrs	r3, r2
         );
}
 800241e:	4618      	mov	r0, r3
 8002420:	3724      	adds	r7, #36	@ 0x24
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
	...

0800242c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3b01      	subs	r3, #1
 8002438:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800243c:	d301      	bcc.n	8002442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800243e:	2301      	movs	r3, #1
 8002440:	e00f      	b.n	8002462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002442:	4a0a      	ldr	r2, [pc, #40]	@ (800246c <SysTick_Config+0x40>)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3b01      	subs	r3, #1
 8002448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800244a:	210f      	movs	r1, #15
 800244c:	f04f 30ff 	mov.w	r0, #4294967295
 8002450:	f7ff ff8e 	bl	8002370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002454:	4b05      	ldr	r3, [pc, #20]	@ (800246c <SysTick_Config+0x40>)
 8002456:	2200      	movs	r2, #0
 8002458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800245a:	4b04      	ldr	r3, [pc, #16]	@ (800246c <SysTick_Config+0x40>)
 800245c:	2207      	movs	r2, #7
 800245e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	e000e010 	.word	0xe000e010

08002470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7ff ff29 	bl	80022d0 <__NVIC_SetPriorityGrouping>
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002486:	b580      	push	{r7, lr}
 8002488:	b086      	sub	sp, #24
 800248a:	af00      	add	r7, sp, #0
 800248c:	4603      	mov	r3, r0
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	607a      	str	r2, [r7, #4]
 8002492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002498:	f7ff ff3e 	bl	8002318 <__NVIC_GetPriorityGrouping>
 800249c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	68b9      	ldr	r1, [r7, #8]
 80024a2:	6978      	ldr	r0, [r7, #20]
 80024a4:	f7ff ff8e 	bl	80023c4 <NVIC_EncodePriority>
 80024a8:	4602      	mov	r2, r0
 80024aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ae:	4611      	mov	r1, r2
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff ff5d 	bl	8002370 <__NVIC_SetPriority>
}
 80024b6:	bf00      	nop
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b082      	sub	sp, #8
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	4603      	mov	r3, r0
 80024c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff ff31 	bl	8002334 <__NVIC_EnableIRQ>
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff ffa2 	bl	800242c <SysTick_Config>
 80024e8:	4603      	mov	r3, r0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e054      	b.n	80025b0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	7f5b      	ldrb	r3, [r3, #29]
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	d105      	bne.n	800251c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7fe fb4a 	bl	8000bb0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2202      	movs	r2, #2
 8002520:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	791b      	ldrb	r3, [r3, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10c      	bne.n	8002544 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a22      	ldr	r2, [pc, #136]	@ (80025b8 <HAL_CRC_Init+0xc4>)
 8002530:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0218 	bic.w	r2, r2, #24
 8002540:	609a      	str	r2, [r3, #8]
 8002542:	e00c      	b.n	800255e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6899      	ldr	r1, [r3, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	461a      	mov	r2, r3
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f834 	bl	80025bc <HAL_CRCEx_Polynomial_Set>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e028      	b.n	80025b0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	795b      	ldrb	r3, [r3, #5]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d105      	bne.n	8002572 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f04f 32ff 	mov.w	r2, #4294967295
 800256e:	611a      	str	r2, [r3, #16]
 8002570:	e004      	b.n	800257c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6912      	ldr	r2, [r2, #16]
 800257a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695a      	ldr	r2, [r3, #20]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699a      	ldr	r2, [r3, #24]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	04c11db7 	.word	0x04c11db7

080025bc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80025bc:	b480      	push	{r7}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80025cc:	231f      	movs	r3, #31
 80025ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d102      	bne.n	80025e0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	75fb      	strb	r3, [r7, #23]
 80025de:	e063      	b.n	80026a8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80025e0:	bf00      	nop
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1e5a      	subs	r2, r3, #1
 80025e6:	613a      	str	r2, [r7, #16]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d009      	beq.n	8002600 <HAL_CRCEx_Polynomial_Set+0x44>
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	f003 031f 	and.w	r3, r3, #31
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	fa22 f303 	lsr.w	r3, r2, r3
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0f0      	beq.n	80025e2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b18      	cmp	r3, #24
 8002604:	d846      	bhi.n	8002694 <HAL_CRCEx_Polynomial_Set+0xd8>
 8002606:	a201      	add	r2, pc, #4	@ (adr r2, 800260c <HAL_CRCEx_Polynomial_Set+0x50>)
 8002608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800260c:	0800269b 	.word	0x0800269b
 8002610:	08002695 	.word	0x08002695
 8002614:	08002695 	.word	0x08002695
 8002618:	08002695 	.word	0x08002695
 800261c:	08002695 	.word	0x08002695
 8002620:	08002695 	.word	0x08002695
 8002624:	08002695 	.word	0x08002695
 8002628:	08002695 	.word	0x08002695
 800262c:	08002689 	.word	0x08002689
 8002630:	08002695 	.word	0x08002695
 8002634:	08002695 	.word	0x08002695
 8002638:	08002695 	.word	0x08002695
 800263c:	08002695 	.word	0x08002695
 8002640:	08002695 	.word	0x08002695
 8002644:	08002695 	.word	0x08002695
 8002648:	08002695 	.word	0x08002695
 800264c:	0800267d 	.word	0x0800267d
 8002650:	08002695 	.word	0x08002695
 8002654:	08002695 	.word	0x08002695
 8002658:	08002695 	.word	0x08002695
 800265c:	08002695 	.word	0x08002695
 8002660:	08002695 	.word	0x08002695
 8002664:	08002695 	.word	0x08002695
 8002668:	08002695 	.word	0x08002695
 800266c:	08002671 	.word	0x08002671
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	2b06      	cmp	r3, #6
 8002674:	d913      	bls.n	800269e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800267a:	e010      	b.n	800269e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	2b07      	cmp	r3, #7
 8002680:	d90f      	bls.n	80026a2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002686:	e00c      	b.n	80026a2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	2b0f      	cmp	r3, #15
 800268c:	d90b      	bls.n	80026a6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002692:	e008      	b.n	80026a6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	75fb      	strb	r3, [r7, #23]
        break;
 8002698:	e006      	b.n	80026a8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800269a:	bf00      	nop
 800269c:	e004      	b.n	80026a8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800269e:	bf00      	nop
 80026a0:	e002      	b.n	80026a8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80026a2:	bf00      	nop
 80026a4:	e000      	b.n	80026a8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80026a6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80026a8:	7dfb      	ldrb	r3, [r7, #23]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10d      	bne.n	80026ca <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f023 0118 	bic.w	r1, r3, #24
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80026ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	371c      	adds	r7, #28
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026e6:	f7ff fdc3 	bl	8002270 <HAL_GetTick>
 80026ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d008      	beq.n	800270a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2280      	movs	r2, #128	@ 0x80
 80026fc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e052      	b.n	80027b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0216 	bic.w	r2, r2, #22
 8002718:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	695a      	ldr	r2, [r3, #20]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002728:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272e:	2b00      	cmp	r3, #0
 8002730:	d103      	bne.n	800273a <HAL_DMA_Abort+0x62>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002736:	2b00      	cmp	r3, #0
 8002738:	d007      	beq.n	800274a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0208 	bic.w	r2, r2, #8
 8002748:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0201 	bic.w	r2, r2, #1
 8002758:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800275a:	e013      	b.n	8002784 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800275c:	f7ff fd88 	bl	8002270 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b05      	cmp	r3, #5
 8002768:	d90c      	bls.n	8002784 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2220      	movs	r2, #32
 800276e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2203      	movs	r2, #3
 8002774:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e015      	b.n	80027b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1e4      	bne.n	800275c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002796:	223f      	movs	r2, #63	@ 0x3f
 8002798:	409a      	lsls	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d004      	beq.n	80027d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2280      	movs	r2, #128	@ 0x80
 80027d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e00c      	b.n	80027f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2205      	movs	r2, #5
 80027da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0201 	bic.w	r2, r2, #1
 80027ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e086      	b.n	800291c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002814:	2b00      	cmp	r3, #0
 8002816:	d106      	bne.n	8002826 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2223      	movs	r2, #35	@ 0x23
 800281c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7fe fa95 	bl	8000d50 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002826:	4b3f      	ldr	r3, [pc, #252]	@ (8002924 <HAL_ETH_Init+0x128>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282a:	4a3e      	ldr	r2, [pc, #248]	@ (8002924 <HAL_ETH_Init+0x128>)
 800282c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002830:	6453      	str	r3, [r2, #68]	@ 0x44
 8002832:	4b3c      	ldr	r3, [pc, #240]	@ (8002924 <HAL_ETH_Init+0x128>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002836:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800283e:	4b3a      	ldr	r3, [pc, #232]	@ (8002928 <HAL_ETH_Init+0x12c>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	4a39      	ldr	r2, [pc, #228]	@ (8002928 <HAL_ETH_Init+0x12c>)
 8002844:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002848:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800284a:	4b37      	ldr	r3, [pc, #220]	@ (8002928 <HAL_ETH_Init+0x12c>)
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	4935      	ldr	r1, [pc, #212]	@ (8002928 <HAL_ETH_Init+0x12c>)
 8002854:	4313      	orrs	r3, r2
 8002856:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002858:	4b33      	ldr	r3, [pc, #204]	@ (8002928 <HAL_ETH_Init+0x12c>)
 800285a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6812      	ldr	r2, [r2, #0]
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002872:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002874:	f7ff fcfc 	bl	8002270 <HAL_GetTick>
 8002878:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800287a:	e011      	b.n	80028a0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800287c:	f7ff fcf8 	bl	8002270 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800288a:	d909      	bls.n	80028a0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2204      	movs	r2, #4
 8002890:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	22e0      	movs	r2, #224	@ 0xe0
 8002898:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e03d      	b.n	800291c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1e4      	bne.n	800287c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f97a 	bl	8002bac <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 fa25 	bl	8002d08 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 fa7b 	bl	8002dba <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	461a      	mov	r2, r3
 80028ca:	2100      	movs	r1, #0
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 f9e3 	bl	8002c98 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80028e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	4b0f      	ldr	r3, [pc, #60]	@ (800292c <HAL_ETH_Init+0x130>)
 80028f0:	430b      	orrs	r3, r1
 80028f2:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002906:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2210      	movs	r2, #16
 8002916:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40023800 	.word	0x40023800
 8002928:	40013800 	.word	0x40013800
 800292c:	00020060 	.word	0x00020060

08002930 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	4b53      	ldr	r3, [pc, #332]	@ (8002a94 <ETH_SetMACConfig+0x164>)
 8002946:	4013      	ands	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	7b9b      	ldrb	r3, [r3, #14]
 800294e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	7c12      	ldrb	r2, [r2, #16]
 8002954:	2a00      	cmp	r2, #0
 8002956:	d102      	bne.n	800295e <ETH_SetMACConfig+0x2e>
 8002958:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800295c:	e000      	b.n	8002960 <ETH_SetMACConfig+0x30>
 800295e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002960:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	7c52      	ldrb	r2, [r2, #17]
 8002966:	2a00      	cmp	r2, #0
 8002968:	d102      	bne.n	8002970 <ETH_SetMACConfig+0x40>
 800296a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800296e:	e000      	b.n	8002972 <ETH_SetMACConfig+0x42>
 8002970:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002972:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002978:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	7fdb      	ldrb	r3, [r3, #31]
 800297e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002980:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002986:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	7f92      	ldrb	r2, [r2, #30]
 800298c:	2a00      	cmp	r2, #0
 800298e:	d102      	bne.n	8002996 <ETH_SetMACConfig+0x66>
 8002990:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002994:	e000      	b.n	8002998 <ETH_SetMACConfig+0x68>
 8002996:	2200      	movs	r2, #0
                        macconf->Speed |
 8002998:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	7f1b      	ldrb	r3, [r3, #28]
 800299e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80029a0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80029a6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	791b      	ldrb	r3, [r3, #4]
 80029ac:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80029ae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80029b6:	2a00      	cmp	r2, #0
 80029b8:	d102      	bne.n	80029c0 <ETH_SetMACConfig+0x90>
 80029ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029be:	e000      	b.n	80029c2 <ETH_SetMACConfig+0x92>
 80029c0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80029c2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	7bdb      	ldrb	r3, [r3, #15]
 80029c8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80029ca:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80029d0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80029d8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80029da:	4313      	orrs	r3, r2
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	4313      	orrs	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029f2:	2001      	movs	r0, #1
 80029f4:	f7ff fc48 	bl	8002288 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002a0e:	4013      	ands	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a16:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002a1e:	2a00      	cmp	r2, #0
 8002a20:	d101      	bne.n	8002a26 <ETH_SetMACConfig+0xf6>
 8002a22:	2280      	movs	r2, #128	@ 0x80
 8002a24:	e000      	b.n	8002a28 <ETH_SetMACConfig+0xf8>
 8002a26:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a28:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002a2e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002a36:	2a01      	cmp	r2, #1
 8002a38:	d101      	bne.n	8002a3e <ETH_SetMACConfig+0x10e>
 8002a3a:	2208      	movs	r2, #8
 8002a3c:	e000      	b.n	8002a40 <ETH_SetMACConfig+0x110>
 8002a3e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002a40:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002a48:	2a01      	cmp	r2, #1
 8002a4a:	d101      	bne.n	8002a50 <ETH_SetMACConfig+0x120>
 8002a4c:	2204      	movs	r2, #4
 8002a4e:	e000      	b.n	8002a52 <ETH_SetMACConfig+0x122>
 8002a50:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002a52:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002a5a:	2a01      	cmp	r2, #1
 8002a5c:	d101      	bne.n	8002a62 <ETH_SetMACConfig+0x132>
 8002a5e:	2202      	movs	r2, #2
 8002a60:	e000      	b.n	8002a64 <ETH_SetMACConfig+0x134>
 8002a62:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a64:	4313      	orrs	r3, r2
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a7c:	2001      	movs	r0, #1
 8002a7e:	f7ff fc03 	bl	8002288 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	619a      	str	r2, [r3, #24]
}
 8002a8a:	bf00      	nop
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	fd20810f 	.word	0xfd20810f

08002a98 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	4b3d      	ldr	r3, [pc, #244]	@ (8002ba8 <ETH_SetDMAConfig+0x110>)
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	7b1b      	ldrb	r3, [r3, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d102      	bne.n	8002ac4 <ETH_SetDMAConfig+0x2c>
 8002abe:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002ac2:	e000      	b.n	8002ac6 <ETH_SetDMAConfig+0x2e>
 8002ac4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	7b5b      	ldrb	r3, [r3, #13]
 8002aca:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002acc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	7f52      	ldrb	r2, [r2, #29]
 8002ad2:	2a00      	cmp	r2, #0
 8002ad4:	d102      	bne.n	8002adc <ETH_SetDMAConfig+0x44>
 8002ad6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002ada:	e000      	b.n	8002ade <ETH_SetDMAConfig+0x46>
 8002adc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002ade:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	7b9b      	ldrb	r3, [r3, #14]
 8002ae4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002ae6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002aec:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	7f1b      	ldrb	r3, [r3, #28]
 8002af2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002af4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	7f9b      	ldrb	r3, [r3, #30]
 8002afa:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002afc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002b02:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b0a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b2e:	2001      	movs	r0, #1
 8002b30:	f7ff fbaa 	bl	8002288 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	791b      	ldrb	r3, [r3, #4]
 8002b46:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b4c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002b52:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002b58:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b60:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002b62:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b68:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002b6a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002b70:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6812      	ldr	r2, [r2, #0]
 8002b76:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b7a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002b7e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b8c:	2001      	movs	r0, #1
 8002b8e:	f7ff fb7b 	bl	8002288 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6013      	str	r3, [r2, #0]
}
 8002ba0:	bf00      	nop
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	f8de3f23 	.word	0xf8de3f23

08002bac <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b0a6      	sub	sp, #152	@ 0x98
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002be2:	2300      	movs	r3, #0
 8002be4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002be8:	2300      	movs	r3, #0
 8002bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002c02:	2300      	movs	r3, #0
 8002c04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002c14:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002c18:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002c1a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002c20:	2300      	movs	r3, #0
 8002c22:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002c26:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff fe7f 	bl	8002930 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002c32:	2301      	movs	r3, #1
 8002c34:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002c36:	2301      	movs	r3, #1
 8002c38:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002c40:	2301      	movs	r3, #1
 8002c42:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002c44:	2300      	movs	r3, #0
 8002c46:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002c54:	2300      	movs	r3, #0
 8002c56:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002c62:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c66:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002c68:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002c6c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002c6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c72:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002c74:	2301      	movs	r3, #1
 8002c76:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002c82:	f107 0308 	add.w	r3, r7, #8
 8002c86:	4619      	mov	r1, r3
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7ff ff05 	bl	8002a98 <ETH_SetDMAConfig>
}
 8002c8e:	bf00      	nop
 8002c90:	3798      	adds	r7, #152	@ 0x98
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
	...

08002c98 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3305      	adds	r3, #5
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	021b      	lsls	r3, r3, #8
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	3204      	adds	r2, #4
 8002cb0:	7812      	ldrb	r2, [r2, #0]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	4b11      	ldr	r3, [pc, #68]	@ (8002d00 <ETH_MACAddressConfig+0x68>)
 8002cba:	4413      	add	r3, r2
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3303      	adds	r3, #3
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	061a      	lsls	r2, r3, #24
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	3302      	adds	r3, #2
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	041b      	lsls	r3, r3, #16
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	021b      	lsls	r3, r3, #8
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	7812      	ldrb	r2, [r2, #0]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	4b06      	ldr	r3, [pc, #24]	@ (8002d04 <ETH_MACAddressConfig+0x6c>)
 8002cea:	4413      	add	r3, r2
 8002cec:	461a      	mov	r2, r3
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	6013      	str	r3, [r2, #0]
}
 8002cf2:	bf00      	nop
 8002cf4:	371c      	adds	r7, #28
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40028040 	.word	0x40028040
 8002d04:	40028044 	.word	0x40028044

08002d08 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d10:	2300      	movs	r3, #0
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	e03e      	b.n	8002d94 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68d9      	ldr	r1, [r3, #12]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	440b      	add	r3, r1
 8002d26:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	2200      	movs	r2, #0
 8002d32:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2200      	movs	r2, #0
 8002d38:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	3206      	adds	r2, #6
 8002d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d80c      	bhi.n	8002d78 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68d9      	ldr	r1, [r3, #12]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	4613      	mov	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	440b      	add	r3, r1
 8002d70:	461a      	mov	r2, r3
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	60da      	str	r2, [r3, #12]
 8002d76:	e004      	b.n	8002d82 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	3301      	adds	r3, #1
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2b03      	cmp	r3, #3
 8002d98:	d9bd      	bls.n	8002d16 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68da      	ldr	r2, [r3, #12]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dac:	611a      	str	r2, [r3, #16]
}
 8002dae:	bf00      	nop
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b085      	sub	sp, #20
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	e048      	b.n	8002e5a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6919      	ldr	r1, [r3, #16]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	440b      	add	r3, r1
 8002dd8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2200      	movs	r2, #0
 8002de4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2200      	movs	r2, #0
 8002dea:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2200      	movs	r2, #0
 8002df0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2200      	movs	r2, #0
 8002df6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002e04:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002e1e:	68b9      	ldr	r1, [r7, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	3212      	adds	r2, #18
 8002e26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d80c      	bhi.n	8002e4a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6919      	ldr	r1, [r3, #16]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	4613      	mov	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	440b      	add	r3, r1
 8002e42:	461a      	mov	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	60da      	str	r2, [r3, #12]
 8002e48:	e004      	b.n	8002e54 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	3301      	adds	r3, #1
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2b03      	cmp	r3, #3
 8002e5e:	d9b3      	bls.n	8002dc8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691a      	ldr	r2, [r3, #16]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e8a:	60da      	str	r2, [r3, #12]
}
 8002e8c:	bf00      	nop
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b089      	sub	sp, #36	@ 0x24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
 8002eb6:	e175      	b.n	80031a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002eb8:	2201      	movs	r2, #1
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	f040 8164 	bne.w	800319e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d005      	beq.n	8002eee <HAL_GPIO_Init+0x56>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d130      	bne.n	8002f50 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	2203      	movs	r2, #3
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43db      	mvns	r3, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4013      	ands	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f24:	2201      	movs	r2, #1
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4013      	ands	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	091b      	lsrs	r3, r3, #4
 8002f3a:	f003 0201 	and.w	r2, r3, #1
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 0303 	and.w	r3, r3, #3
 8002f58:	2b03      	cmp	r3, #3
 8002f5a:	d017      	beq.n	8002f8c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	2203      	movs	r2, #3
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4013      	ands	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d123      	bne.n	8002fe0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	08da      	lsrs	r2, r3, #3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3208      	adds	r2, #8
 8002fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	220f      	movs	r2, #15
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	08da      	lsrs	r2, r3, #3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3208      	adds	r2, #8
 8002fda:	69b9      	ldr	r1, [r7, #24]
 8002fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	2203      	movs	r2, #3
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f003 0203 	and.w	r2, r3, #3
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4313      	orrs	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 80be 	beq.w	800319e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003022:	4b66      	ldr	r3, [pc, #408]	@ (80031bc <HAL_GPIO_Init+0x324>)
 8003024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003026:	4a65      	ldr	r2, [pc, #404]	@ (80031bc <HAL_GPIO_Init+0x324>)
 8003028:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800302c:	6453      	str	r3, [r2, #68]	@ 0x44
 800302e:	4b63      	ldr	r3, [pc, #396]	@ (80031bc <HAL_GPIO_Init+0x324>)
 8003030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003032:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800303a:	4a61      	ldr	r2, [pc, #388]	@ (80031c0 <HAL_GPIO_Init+0x328>)
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	089b      	lsrs	r3, r3, #2
 8003040:	3302      	adds	r3, #2
 8003042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003046:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	220f      	movs	r2, #15
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43db      	mvns	r3, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4013      	ands	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a58      	ldr	r2, [pc, #352]	@ (80031c4 <HAL_GPIO_Init+0x32c>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d037      	beq.n	80030d6 <HAL_GPIO_Init+0x23e>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a57      	ldr	r2, [pc, #348]	@ (80031c8 <HAL_GPIO_Init+0x330>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d031      	beq.n	80030d2 <HAL_GPIO_Init+0x23a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a56      	ldr	r2, [pc, #344]	@ (80031cc <HAL_GPIO_Init+0x334>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d02b      	beq.n	80030ce <HAL_GPIO_Init+0x236>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a55      	ldr	r2, [pc, #340]	@ (80031d0 <HAL_GPIO_Init+0x338>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d025      	beq.n	80030ca <HAL_GPIO_Init+0x232>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a54      	ldr	r2, [pc, #336]	@ (80031d4 <HAL_GPIO_Init+0x33c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d01f      	beq.n	80030c6 <HAL_GPIO_Init+0x22e>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a53      	ldr	r2, [pc, #332]	@ (80031d8 <HAL_GPIO_Init+0x340>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d019      	beq.n	80030c2 <HAL_GPIO_Init+0x22a>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a52      	ldr	r2, [pc, #328]	@ (80031dc <HAL_GPIO_Init+0x344>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d013      	beq.n	80030be <HAL_GPIO_Init+0x226>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a51      	ldr	r2, [pc, #324]	@ (80031e0 <HAL_GPIO_Init+0x348>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d00d      	beq.n	80030ba <HAL_GPIO_Init+0x222>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a50      	ldr	r2, [pc, #320]	@ (80031e4 <HAL_GPIO_Init+0x34c>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d007      	beq.n	80030b6 <HAL_GPIO_Init+0x21e>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a4f      	ldr	r2, [pc, #316]	@ (80031e8 <HAL_GPIO_Init+0x350>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d101      	bne.n	80030b2 <HAL_GPIO_Init+0x21a>
 80030ae:	2309      	movs	r3, #9
 80030b0:	e012      	b.n	80030d8 <HAL_GPIO_Init+0x240>
 80030b2:	230a      	movs	r3, #10
 80030b4:	e010      	b.n	80030d8 <HAL_GPIO_Init+0x240>
 80030b6:	2308      	movs	r3, #8
 80030b8:	e00e      	b.n	80030d8 <HAL_GPIO_Init+0x240>
 80030ba:	2307      	movs	r3, #7
 80030bc:	e00c      	b.n	80030d8 <HAL_GPIO_Init+0x240>
 80030be:	2306      	movs	r3, #6
 80030c0:	e00a      	b.n	80030d8 <HAL_GPIO_Init+0x240>
 80030c2:	2305      	movs	r3, #5
 80030c4:	e008      	b.n	80030d8 <HAL_GPIO_Init+0x240>
 80030c6:	2304      	movs	r3, #4
 80030c8:	e006      	b.n	80030d8 <HAL_GPIO_Init+0x240>
 80030ca:	2303      	movs	r3, #3
 80030cc:	e004      	b.n	80030d8 <HAL_GPIO_Init+0x240>
 80030ce:	2302      	movs	r3, #2
 80030d0:	e002      	b.n	80030d8 <HAL_GPIO_Init+0x240>
 80030d2:	2301      	movs	r3, #1
 80030d4:	e000      	b.n	80030d8 <HAL_GPIO_Init+0x240>
 80030d6:	2300      	movs	r3, #0
 80030d8:	69fa      	ldr	r2, [r7, #28]
 80030da:	f002 0203 	and.w	r2, r2, #3
 80030de:	0092      	lsls	r2, r2, #2
 80030e0:	4093      	lsls	r3, r2
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80030e8:	4935      	ldr	r1, [pc, #212]	@ (80031c0 <HAL_GPIO_Init+0x328>)
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	089b      	lsrs	r3, r3, #2
 80030ee:	3302      	adds	r3, #2
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030f6:	4b3d      	ldr	r3, [pc, #244]	@ (80031ec <HAL_GPIO_Init+0x354>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	43db      	mvns	r3, r3
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	4013      	ands	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	4313      	orrs	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800311a:	4a34      	ldr	r2, [pc, #208]	@ (80031ec <HAL_GPIO_Init+0x354>)
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003120:	4b32      	ldr	r3, [pc, #200]	@ (80031ec <HAL_GPIO_Init+0x354>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	43db      	mvns	r3, r3
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	4013      	ands	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d003      	beq.n	8003144 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	4313      	orrs	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003144:	4a29      	ldr	r2, [pc, #164]	@ (80031ec <HAL_GPIO_Init+0x354>)
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800314a:	4b28      	ldr	r3, [pc, #160]	@ (80031ec <HAL_GPIO_Init+0x354>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	43db      	mvns	r3, r3
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	4013      	ands	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	4313      	orrs	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800316e:	4a1f      	ldr	r2, [pc, #124]	@ (80031ec <HAL_GPIO_Init+0x354>)
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003174:	4b1d      	ldr	r3, [pc, #116]	@ (80031ec <HAL_GPIO_Init+0x354>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	43db      	mvns	r3, r3
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4013      	ands	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	4313      	orrs	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003198:	4a14      	ldr	r2, [pc, #80]	@ (80031ec <HAL_GPIO_Init+0x354>)
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	3301      	adds	r3, #1
 80031a2:	61fb      	str	r3, [r7, #28]
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	2b0f      	cmp	r3, #15
 80031a8:	f67f ae86 	bls.w	8002eb8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80031ac:	bf00      	nop
 80031ae:	bf00      	nop
 80031b0:	3724      	adds	r7, #36	@ 0x24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	40023800 	.word	0x40023800
 80031c0:	40013800 	.word	0x40013800
 80031c4:	40020000 	.word	0x40020000
 80031c8:	40020400 	.word	0x40020400
 80031cc:	40020800 	.word	0x40020800
 80031d0:	40020c00 	.word	0x40020c00
 80031d4:	40021000 	.word	0x40021000
 80031d8:	40021400 	.word	0x40021400
 80031dc:	40021800 	.word	0x40021800
 80031e0:	40021c00 	.word	0x40021c00
 80031e4:	40022000 	.word	0x40022000
 80031e8:	40022400 	.word	0x40022400
 80031ec:	40013c00 	.word	0x40013c00

080031f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	460b      	mov	r3, r1
 80031fa:	807b      	strh	r3, [r7, #2]
 80031fc:	4613      	mov	r3, r2
 80031fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003200:	787b      	ldrb	r3, [r7, #1]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003206:	887a      	ldrh	r2, [r7, #2]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800320c:	e003      	b.n	8003216 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800320e:	887b      	ldrh	r3, [r7, #2]
 8003210:	041a      	lsls	r2, r3, #16
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	619a      	str	r2, [r3, #24]
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
	...

08003224 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e08b      	b.n	800334e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d106      	bne.n	8003250 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7fe f912 	bl	8001474 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2224      	movs	r2, #36	@ 0x24
 8003254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0201 	bic.w	r2, r2, #1
 8003266:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003274:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003284:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d107      	bne.n	800329e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800329a:	609a      	str	r2, [r3, #8]
 800329c:	e006      	b.n	80032ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80032aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d108      	bne.n	80032c6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032c2:	605a      	str	r2, [r3, #4]
 80032c4:	e007      	b.n	80032d6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6859      	ldr	r1, [r3, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003358 <HAL_I2C_Init+0x134>)
 80032e2:	430b      	orrs	r3, r1
 80032e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691a      	ldr	r2, [r3, #16]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69d9      	ldr	r1, [r3, #28]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a1a      	ldr	r2, [r3, #32]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f042 0201 	orr.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2220      	movs	r2, #32
 800333a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	02008000 	.word	0x02008000

0800335c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b088      	sub	sp, #32
 8003360:	af02      	add	r7, sp, #8
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	607a      	str	r2, [r7, #4]
 8003366:	461a      	mov	r2, r3
 8003368:	460b      	mov	r3, r1
 800336a:	817b      	strh	r3, [r7, #10]
 800336c:	4613      	mov	r3, r2
 800336e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b20      	cmp	r3, #32
 800337a:	f040 80fd 	bne.w	8003578 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003384:	2b01      	cmp	r3, #1
 8003386:	d101      	bne.n	800338c <HAL_I2C_Master_Transmit+0x30>
 8003388:	2302      	movs	r3, #2
 800338a:	e0f6      	b.n	800357a <HAL_I2C_Master_Transmit+0x21e>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003394:	f7fe ff6c 	bl	8002270 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	2319      	movs	r3, #25
 80033a0:	2201      	movs	r2, #1
 80033a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 fa0a 	bl	80037c0 <I2C_WaitOnFlagUntilTimeout>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e0e1      	b.n	800357a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2221      	movs	r2, #33	@ 0x21
 80033ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2210      	movs	r2, #16
 80033c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	893a      	ldrh	r2, [r7, #8]
 80033d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	2bff      	cmp	r3, #255	@ 0xff
 80033e6:	d906      	bls.n	80033f6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	22ff      	movs	r2, #255	@ 0xff
 80033ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80033ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	e007      	b.n	8003406 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003400:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003404:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800340a:	2b00      	cmp	r3, #0
 800340c:	d024      	beq.n	8003458 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003412:	781a      	ldrb	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003436:	3b01      	subs	r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003442:	b2db      	uxtb	r3, r3
 8003444:	3301      	adds	r3, #1
 8003446:	b2da      	uxtb	r2, r3
 8003448:	8979      	ldrh	r1, [r7, #10]
 800344a:	4b4e      	ldr	r3, [pc, #312]	@ (8003584 <HAL_I2C_Master_Transmit+0x228>)
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 fc05 	bl	8003c60 <I2C_TransferConfig>
 8003456:	e066      	b.n	8003526 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800345c:	b2da      	uxtb	r2, r3
 800345e:	8979      	ldrh	r1, [r7, #10]
 8003460:	4b48      	ldr	r3, [pc, #288]	@ (8003584 <HAL_I2C_Master_Transmit+0x228>)
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 fbfa 	bl	8003c60 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800346c:	e05b      	b.n	8003526 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	6a39      	ldr	r1, [r7, #32]
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 f9fd 	bl	8003872 <I2C_WaitOnTXISFlagUntilTimeout>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e07b      	b.n	800357a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003486:	781a      	ldrb	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003492:	1c5a      	adds	r2, r3, #1
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800349c:	b29b      	uxth	r3, r3
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034aa:	3b01      	subs	r3, #1
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d034      	beq.n	8003526 <HAL_I2C_Master_Transmit+0x1ca>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d130      	bne.n	8003526 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	2200      	movs	r2, #0
 80034cc:	2180      	movs	r1, #128	@ 0x80
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f000 f976 	bl	80037c0 <I2C_WaitOnFlagUntilTimeout>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e04d      	b.n	800357a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	2bff      	cmp	r3, #255	@ 0xff
 80034e6:	d90e      	bls.n	8003506 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	22ff      	movs	r2, #255	@ 0xff
 80034ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	8979      	ldrh	r1, [r7, #10]
 80034f6:	2300      	movs	r3, #0
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 fbae 	bl	8003c60 <I2C_TransferConfig>
 8003504:	e00f      	b.n	8003526 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800350a:	b29a      	uxth	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003514:	b2da      	uxtb	r2, r3
 8003516:	8979      	ldrh	r1, [r7, #10]
 8003518:	2300      	movs	r3, #0
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 fb9d 	bl	8003c60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800352a:	b29b      	uxth	r3, r3
 800352c:	2b00      	cmp	r3, #0
 800352e:	d19e      	bne.n	800346e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	6a39      	ldr	r1, [r7, #32]
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 f9e3 	bl	8003900 <I2C_WaitOnSTOPFlagUntilTimeout>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e01a      	b.n	800357a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2220      	movs	r2, #32
 800354a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6859      	ldr	r1, [r3, #4]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	4b0c      	ldr	r3, [pc, #48]	@ (8003588 <HAL_I2C_Master_Transmit+0x22c>)
 8003558:	400b      	ands	r3, r1
 800355a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003574:	2300      	movs	r3, #0
 8003576:	e000      	b.n	800357a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003578:	2302      	movs	r3, #2
  }
}
 800357a:	4618      	mov	r0, r3
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	80002000 	.word	0x80002000
 8003588:	fe00e800 	.word	0xfe00e800

0800358c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af02      	add	r7, sp, #8
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	607a      	str	r2, [r7, #4]
 8003596:	461a      	mov	r2, r3
 8003598:	460b      	mov	r3, r1
 800359a:	817b      	strh	r3, [r7, #10]
 800359c:	4613      	mov	r3, r2
 800359e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b20      	cmp	r3, #32
 80035aa:	f040 80db 	bne.w	8003764 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <HAL_I2C_Master_Receive+0x30>
 80035b8:	2302      	movs	r3, #2
 80035ba:	e0d4      	b.n	8003766 <HAL_I2C_Master_Receive+0x1da>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035c4:	f7fe fe54 	bl	8002270 <HAL_GetTick>
 80035c8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	2319      	movs	r3, #25
 80035d0:	2201      	movs	r2, #1
 80035d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 f8f2 	bl	80037c0 <I2C_WaitOnFlagUntilTimeout>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e0bf      	b.n	8003766 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2222      	movs	r2, #34	@ 0x22
 80035ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2210      	movs	r2, #16
 80035f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	893a      	ldrh	r2, [r7, #8]
 8003606:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003612:	b29b      	uxth	r3, r3
 8003614:	2bff      	cmp	r3, #255	@ 0xff
 8003616:	d90e      	bls.n	8003636 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2201      	movs	r2, #1
 800361c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003622:	b2da      	uxtb	r2, r3
 8003624:	8979      	ldrh	r1, [r7, #10]
 8003626:	4b52      	ldr	r3, [pc, #328]	@ (8003770 <HAL_I2C_Master_Receive+0x1e4>)
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 fb16 	bl	8003c60 <I2C_TransferConfig>
 8003634:	e06d      	b.n	8003712 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800363a:	b29a      	uxth	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003644:	b2da      	uxtb	r2, r3
 8003646:	8979      	ldrh	r1, [r7, #10]
 8003648:	4b49      	ldr	r3, [pc, #292]	@ (8003770 <HAL_I2C_Master_Receive+0x1e4>)
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 fb05 	bl	8003c60 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003656:	e05c      	b.n	8003712 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	6a39      	ldr	r1, [r7, #32]
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 f993 	bl	8003988 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e07c      	b.n	8003766 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367e:	1c5a      	adds	r2, r3, #1
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003694:	b29b      	uxth	r3, r3
 8003696:	3b01      	subs	r3, #1
 8003698:	b29a      	uxth	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d034      	beq.n	8003712 <HAL_I2C_Master_Receive+0x186>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d130      	bne.n	8003712 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	2200      	movs	r2, #0
 80036b8:	2180      	movs	r1, #128	@ 0x80
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 f880 	bl	80037c0 <I2C_WaitOnFlagUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e04d      	b.n	8003766 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	2bff      	cmp	r3, #255	@ 0xff
 80036d2:	d90e      	bls.n	80036f2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	22ff      	movs	r2, #255	@ 0xff
 80036d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	8979      	ldrh	r1, [r7, #10]
 80036e2:	2300      	movs	r3, #0
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 fab8 	bl	8003c60 <I2C_TransferConfig>
 80036f0:	e00f      	b.n	8003712 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003700:	b2da      	uxtb	r2, r3
 8003702:	8979      	ldrh	r1, [r7, #10]
 8003704:	2300      	movs	r3, #0
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 faa7 	bl	8003c60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003716:	b29b      	uxth	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	d19d      	bne.n	8003658 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	6a39      	ldr	r1, [r7, #32]
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 f8ed 	bl	8003900 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e01a      	b.n	8003766 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2220      	movs	r2, #32
 8003736:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6859      	ldr	r1, [r3, #4]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	4b0c      	ldr	r3, [pc, #48]	@ (8003774 <HAL_I2C_Master_Receive+0x1e8>)
 8003744:	400b      	ands	r3, r1
 8003746:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003760:	2300      	movs	r3, #0
 8003762:	e000      	b.n	8003766 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003764:	2302      	movs	r3, #2
  }
}
 8003766:	4618      	mov	r0, r3
 8003768:	3718      	adds	r7, #24
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	80002400 	.word	0x80002400
 8003774:	fe00e800 	.word	0xfe00e800

08003778 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b02      	cmp	r3, #2
 800378c:	d103      	bne.n	8003796 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2200      	movs	r2, #0
 8003794:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d007      	beq.n	80037b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699a      	ldr	r2, [r3, #24]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0201 	orr.w	r2, r2, #1
 80037b2:	619a      	str	r2, [r3, #24]
  }
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	4613      	mov	r3, r2
 80037ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037d0:	e03b      	b.n	800384a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	6839      	ldr	r1, [r7, #0]
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 f962 	bl	8003aa0 <I2C_IsErrorOccurred>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e041      	b.n	800386a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ec:	d02d      	beq.n	800384a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ee:	f7fe fd3f 	bl	8002270 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d302      	bcc.n	8003804 <I2C_WaitOnFlagUntilTimeout+0x44>
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d122      	bne.n	800384a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699a      	ldr	r2, [r3, #24]
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	4013      	ands	r3, r2
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	429a      	cmp	r2, r3
 8003812:	bf0c      	ite	eq
 8003814:	2301      	moveq	r3, #1
 8003816:	2300      	movne	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	461a      	mov	r2, r3
 800381c:	79fb      	ldrb	r3, [r7, #7]
 800381e:	429a      	cmp	r2, r3
 8003820:	d113      	bne.n	800384a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003826:	f043 0220 	orr.w	r2, r3, #32
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2220      	movs	r2, #32
 8003832:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e00f      	b.n	800386a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	699a      	ldr	r2, [r3, #24]
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	4013      	ands	r3, r2
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	429a      	cmp	r2, r3
 8003858:	bf0c      	ite	eq
 800385a:	2301      	moveq	r3, #1
 800385c:	2300      	movne	r3, #0
 800385e:	b2db      	uxtb	r3, r3
 8003860:	461a      	mov	r2, r3
 8003862:	79fb      	ldrb	r3, [r7, #7]
 8003864:	429a      	cmp	r2, r3
 8003866:	d0b4      	beq.n	80037d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b084      	sub	sp, #16
 8003876:	af00      	add	r7, sp, #0
 8003878:	60f8      	str	r0, [r7, #12]
 800387a:	60b9      	str	r1, [r7, #8]
 800387c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800387e:	e033      	b.n	80038e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	68b9      	ldr	r1, [r7, #8]
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 f90b 	bl	8003aa0 <I2C_IsErrorOccurred>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e031      	b.n	80038f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389a:	d025      	beq.n	80038e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800389c:	f7fe fce8 	bl	8002270 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d302      	bcc.n	80038b2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d11a      	bne.n	80038e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d013      	beq.n	80038e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c4:	f043 0220 	orr.w	r2, r3, #32
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e007      	b.n	80038f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d1c4      	bne.n	8003880 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800390c:	e02f      	b.n	800396e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	68b9      	ldr	r1, [r7, #8]
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 f8c4 	bl	8003aa0 <I2C_IsErrorOccurred>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e02d      	b.n	800397e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003922:	f7fe fca5 	bl	8002270 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	429a      	cmp	r2, r3
 8003930:	d302      	bcc.n	8003938 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d11a      	bne.n	800396e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	f003 0320 	and.w	r3, r3, #32
 8003942:	2b20      	cmp	r3, #32
 8003944:	d013      	beq.n	800396e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800394a:	f043 0220 	orr.w	r2, r3, #32
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2220      	movs	r2, #32
 8003956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e007      	b.n	800397e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	f003 0320 	and.w	r3, r3, #32
 8003978:	2b20      	cmp	r3, #32
 800397a:	d1c8      	bne.n	800390e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003994:	2300      	movs	r3, #0
 8003996:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003998:	e071      	b.n	8003a7e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	68b9      	ldr	r1, [r7, #8]
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 f87e 	bl	8003aa0 <I2C_IsErrorOccurred>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	f003 0320 	and.w	r3, r3, #32
 80039b8:	2b20      	cmp	r3, #32
 80039ba:	d13b      	bne.n	8003a34 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80039bc:	7dfb      	ldrb	r3, [r7, #23]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d138      	bne.n	8003a34 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d105      	bne.n	80039dc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80039d8:	2300      	movs	r3, #0
 80039da:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	f003 0310 	and.w	r3, r3, #16
 80039e6:	2b10      	cmp	r3, #16
 80039e8:	d121      	bne.n	8003a2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2210      	movs	r2, #16
 80039f0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2204      	movs	r2, #4
 80039f6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2220      	movs	r2, #32
 80039fe:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6859      	ldr	r1, [r3, #4]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	4b24      	ldr	r3, [pc, #144]	@ (8003a9c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003a0c:	400b      	ands	r3, r1
 8003a0e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	75fb      	strb	r3, [r7, #23]
 8003a2c:	e002      	b.n	8003a34 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003a34:	f7fe fc1c 	bl	8002270 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d302      	bcc.n	8003a4a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d119      	bne.n	8003a7e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003a4a:	7dfb      	ldrb	r3, [r7, #23]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d116      	bne.n	8003a7e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	f003 0304 	and.w	r3, r3, #4
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d00f      	beq.n	8003a7e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a62:	f043 0220 	orr.w	r2, r3, #32
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b04      	cmp	r3, #4
 8003a8a:	d002      	beq.n	8003a92 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003a8c:	7dfb      	ldrb	r3, [r7, #23]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d083      	beq.n	800399a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	fe00e800 	.word	0xfe00e800

08003aa0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08a      	sub	sp, #40	@ 0x28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aac:	2300      	movs	r3, #0
 8003aae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003aba:	2300      	movs	r3, #0
 8003abc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d068      	beq.n	8003b9e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2210      	movs	r2, #16
 8003ad2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ad4:	e049      	b.n	8003b6a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003adc:	d045      	beq.n	8003b6a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ade:	f7fe fbc7 	bl	8002270 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d302      	bcc.n	8003af4 <I2C_IsErrorOccurred+0x54>
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d13a      	bne.n	8003b6a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003afe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b06:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b16:	d121      	bne.n	8003b5c <I2C_IsErrorOccurred+0xbc>
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b1e:	d01d      	beq.n	8003b5c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003b20:	7cfb      	ldrb	r3, [r7, #19]
 8003b22:	2b20      	cmp	r3, #32
 8003b24:	d01a      	beq.n	8003b5c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b34:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003b36:	f7fe fb9b 	bl	8002270 <HAL_GetTick>
 8003b3a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b3c:	e00e      	b.n	8003b5c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003b3e:	f7fe fb97 	bl	8002270 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b19      	cmp	r3, #25
 8003b4a:	d907      	bls.n	8003b5c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	f043 0320 	orr.w	r3, r3, #32
 8003b52:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003b5a:	e006      	b.n	8003b6a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b20      	cmp	r3, #32
 8003b68:	d1e9      	bne.n	8003b3e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	f003 0320 	and.w	r3, r3, #32
 8003b74:	2b20      	cmp	r3, #32
 8003b76:	d003      	beq.n	8003b80 <I2C_IsErrorOccurred+0xe0>
 8003b78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0aa      	beq.n	8003ad6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003b80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d103      	bne.n	8003b90 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	f043 0304 	orr.w	r3, r3, #4
 8003b96:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00b      	beq.n	8003bc8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	f043 0301 	orr.w	r3, r3, #1
 8003bb6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003bc0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00b      	beq.n	8003bea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	f043 0308 	orr.w	r3, r3, #8
 8003bd8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003be2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00b      	beq.n	8003c0c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	f043 0302 	orr.w	r3, r3, #2
 8003bfa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d01c      	beq.n	8003c4e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f7ff fdaf 	bl	8003778 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6859      	ldr	r1, [r3, #4]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	4b0d      	ldr	r3, [pc, #52]	@ (8003c5c <I2C_IsErrorOccurred+0x1bc>)
 8003c26:	400b      	ands	r3, r1
 8003c28:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	431a      	orrs	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003c4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3728      	adds	r7, #40	@ 0x28
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	fe00e800 	.word	0xfe00e800

08003c60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	607b      	str	r3, [r7, #4]
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	817b      	strh	r3, [r7, #10]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c72:	897b      	ldrh	r3, [r7, #10]
 8003c74:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c78:	7a7b      	ldrb	r3, [r7, #9]
 8003c7a:	041b      	lsls	r3, r3, #16
 8003c7c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c80:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c8e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	0d5b      	lsrs	r3, r3, #21
 8003c9a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003c9e:	4b08      	ldr	r3, [pc, #32]	@ (8003cc0 <I2C_TransferConfig+0x60>)
 8003ca0:	430b      	orrs	r3, r1
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	ea02 0103 	and.w	r1, r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003cb2:	bf00      	nop
 8003cb4:	371c      	adds	r7, #28
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	03ff63ff 	.word	0x03ff63ff

08003cc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b20      	cmp	r3, #32
 8003cd8:	d138      	bne.n	8003d4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e032      	b.n	8003d4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2224      	movs	r2, #36	@ 0x24
 8003cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0201 	bic.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6819      	ldr	r1, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0201 	orr.w	r2, r2, #1
 8003d36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	e000      	b.n	8003d4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d4c:	2302      	movs	r3, #2
  }
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b085      	sub	sp, #20
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
 8003d62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b20      	cmp	r3, #32
 8003d6e:	d139      	bne.n	8003de4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	e033      	b.n	8003de6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2224      	movs	r2, #36	@ 0x24
 8003d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0201 	bic.w	r2, r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003dac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	021b      	lsls	r3, r3, #8
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0201 	orr.w	r2, r2, #1
 8003dce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003de0:	2300      	movs	r3, #0
 8003de2:	e000      	b.n	8003de6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003de4:	2302      	movs	r3, #2
  }
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b086      	sub	sp, #24
 8003df6:	af02      	add	r7, sp, #8
 8003df8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e108      	b.n	8004016 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d106      	bne.n	8003e24 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7fe f932 	bl	8002088 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2203      	movs	r2, #3
 8003e28:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e32:	d102      	bne.n	8003e3a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f003 fa10 	bl	8007264 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6818      	ldr	r0, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	7c1a      	ldrb	r2, [r3, #16]
 8003e4c:	f88d 2000 	strb.w	r2, [sp]
 8003e50:	3304      	adds	r3, #4
 8003e52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e54:	f003 f9ac 	bl	80071b0 <USB_CoreInit>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d005      	beq.n	8003e6a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2202      	movs	r2, #2
 8003e62:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e0d5      	b.n	8004016 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2100      	movs	r1, #0
 8003e70:	4618      	mov	r0, r3
 8003e72:	f003 fa08 	bl	8007286 <USB_SetCurrentMode>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d005      	beq.n	8003e88 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e0c6      	b.n	8004016 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e88:	2300      	movs	r3, #0
 8003e8a:	73fb      	strb	r3, [r7, #15]
 8003e8c:	e04a      	b.n	8003f24 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e8e:	7bfa      	ldrb	r2, [r7, #15]
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	4613      	mov	r3, r2
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	3315      	adds	r3, #21
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ea2:	7bfa      	ldrb	r2, [r7, #15]
 8003ea4:	6879      	ldr	r1, [r7, #4]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	4413      	add	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	440b      	add	r3, r1
 8003eb0:	3314      	adds	r3, #20
 8003eb2:	7bfa      	ldrb	r2, [r7, #15]
 8003eb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003eb6:	7bfa      	ldrb	r2, [r7, #15]
 8003eb8:	7bfb      	ldrb	r3, [r7, #15]
 8003eba:	b298      	uxth	r0, r3
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	332e      	adds	r3, #46	@ 0x2e
 8003eca:	4602      	mov	r2, r0
 8003ecc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ece:	7bfa      	ldrb	r2, [r7, #15]
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	4413      	add	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	440b      	add	r3, r1
 8003edc:	3318      	adds	r3, #24
 8003ede:	2200      	movs	r2, #0
 8003ee0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ee2:	7bfa      	ldrb	r2, [r7, #15]
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	4413      	add	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	440b      	add	r3, r1
 8003ef0:	331c      	adds	r3, #28
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ef6:	7bfa      	ldrb	r2, [r7, #15]
 8003ef8:	6879      	ldr	r1, [r7, #4]
 8003efa:	4613      	mov	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	4413      	add	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	440b      	add	r3, r1
 8003f04:	3320      	adds	r3, #32
 8003f06:	2200      	movs	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f0a:	7bfa      	ldrb	r2, [r7, #15]
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	4413      	add	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	440b      	add	r3, r1
 8003f18:	3324      	adds	r3, #36	@ 0x24
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f1e:	7bfb      	ldrb	r3, [r7, #15]
 8003f20:	3301      	adds	r3, #1
 8003f22:	73fb      	strb	r3, [r7, #15]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	791b      	ldrb	r3, [r3, #4]
 8003f28:	7bfa      	ldrb	r2, [r7, #15]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d3af      	bcc.n	8003e8e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f2e:	2300      	movs	r3, #0
 8003f30:	73fb      	strb	r3, [r7, #15]
 8003f32:	e044      	b.n	8003fbe <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f34:	7bfa      	ldrb	r2, [r7, #15]
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	4413      	add	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	440b      	add	r3, r1
 8003f42:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003f46:	2200      	movs	r2, #0
 8003f48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f4a:	7bfa      	ldrb	r2, [r7, #15]
 8003f4c:	6879      	ldr	r1, [r7, #4]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	4413      	add	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	440b      	add	r3, r1
 8003f58:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003f5c:	7bfa      	ldrb	r2, [r7, #15]
 8003f5e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f60:	7bfa      	ldrb	r2, [r7, #15]
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	4613      	mov	r3, r2
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003f72:	2200      	movs	r2, #0
 8003f74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f76:	7bfa      	ldrb	r2, [r7, #15]
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	4413      	add	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f8c:	7bfa      	ldrb	r2, [r7, #15]
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	4613      	mov	r3, r2
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	4413      	add	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	440b      	add	r3, r1
 8003f9a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003fa2:	7bfa      	ldrb	r2, [r7, #15]
 8003fa4:	6879      	ldr	r1, [r7, #4]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	4413      	add	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	440b      	add	r3, r1
 8003fb0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	73fb      	strb	r3, [r7, #15]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	791b      	ldrb	r3, [r3, #4]
 8003fc2:	7bfa      	ldrb	r2, [r7, #15]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d3b5      	bcc.n	8003f34 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6818      	ldr	r0, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	7c1a      	ldrb	r2, [r3, #16]
 8003fd0:	f88d 2000 	strb.w	r2, [sp]
 8003fd4:	3304      	adds	r3, #4
 8003fd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fd8:	f003 f9a2 	bl	8007320 <USB_DevInit>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d005      	beq.n	8003fee <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e013      	b.n	8004016 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	7b1b      	ldrb	r3, [r3, #12]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d102      	bne.n	800400a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f80b 	bl	8004020 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f003 fb5d 	bl	80076ce <USB_DevDisconnect>

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
	...

08004020 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800404e:	4b05      	ldr	r3, [pc, #20]	@ (8004064 <HAL_PCDEx_ActivateLPM+0x44>)
 8004050:	4313      	orrs	r3, r2
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	10000003 	.word	0x10000003

08004068 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800406c:	4b05      	ldr	r3, [pc, #20]	@ (8004084 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a04      	ldr	r2, [pc, #16]	@ (8004084 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004072:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004076:	6013      	str	r3, [r2, #0]
}
 8004078:	bf00      	nop
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	40007000 	.word	0x40007000

08004088 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800408e:	2300      	movs	r3, #0
 8004090:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004092:	4b23      	ldr	r3, [pc, #140]	@ (8004120 <HAL_PWREx_EnableOverDrive+0x98>)
 8004094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004096:	4a22      	ldr	r2, [pc, #136]	@ (8004120 <HAL_PWREx_EnableOverDrive+0x98>)
 8004098:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800409c:	6413      	str	r3, [r2, #64]	@ 0x40
 800409e:	4b20      	ldr	r3, [pc, #128]	@ (8004120 <HAL_PWREx_EnableOverDrive+0x98>)
 80040a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040a6:	603b      	str	r3, [r7, #0]
 80040a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80040aa:	4b1e      	ldr	r3, [pc, #120]	@ (8004124 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a1d      	ldr	r2, [pc, #116]	@ (8004124 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040b4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040b6:	f7fe f8db 	bl	8002270 <HAL_GetTick>
 80040ba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80040bc:	e009      	b.n	80040d2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80040be:	f7fe f8d7 	bl	8002270 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80040cc:	d901      	bls.n	80040d2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e022      	b.n	8004118 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80040d2:	4b14      	ldr	r3, [pc, #80]	@ (8004124 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040de:	d1ee      	bne.n	80040be <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80040e0:	4b10      	ldr	r3, [pc, #64]	@ (8004124 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a0f      	ldr	r2, [pc, #60]	@ (8004124 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040ec:	f7fe f8c0 	bl	8002270 <HAL_GetTick>
 80040f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80040f2:	e009      	b.n	8004108 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80040f4:	f7fe f8bc 	bl	8002270 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004102:	d901      	bls.n	8004108 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e007      	b.n	8004118 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004108:	4b06      	ldr	r3, [pc, #24]	@ (8004124 <HAL_PWREx_EnableOverDrive+0x9c>)
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004110:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004114:	d1ee      	bne.n	80040f4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40023800 	.word	0x40023800
 8004124:	40007000 	.word	0x40007000

08004128 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004130:	2300      	movs	r3, #0
 8004132:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e29b      	b.n	8004676 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 8087 	beq.w	800425a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800414c:	4b96      	ldr	r3, [pc, #600]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f003 030c 	and.w	r3, r3, #12
 8004154:	2b04      	cmp	r3, #4
 8004156:	d00c      	beq.n	8004172 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004158:	4b93      	ldr	r3, [pc, #588]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f003 030c 	and.w	r3, r3, #12
 8004160:	2b08      	cmp	r3, #8
 8004162:	d112      	bne.n	800418a <HAL_RCC_OscConfig+0x62>
 8004164:	4b90      	ldr	r3, [pc, #576]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800416c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004170:	d10b      	bne.n	800418a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004172:	4b8d      	ldr	r3, [pc, #564]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d06c      	beq.n	8004258 <HAL_RCC_OscConfig+0x130>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d168      	bne.n	8004258 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e275      	b.n	8004676 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004192:	d106      	bne.n	80041a2 <HAL_RCC_OscConfig+0x7a>
 8004194:	4b84      	ldr	r3, [pc, #528]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a83      	ldr	r2, [pc, #524]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 800419a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800419e:	6013      	str	r3, [r2, #0]
 80041a0:	e02e      	b.n	8004200 <HAL_RCC_OscConfig+0xd8>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10c      	bne.n	80041c4 <HAL_RCC_OscConfig+0x9c>
 80041aa:	4b7f      	ldr	r3, [pc, #508]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a7e      	ldr	r2, [pc, #504]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 80041b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041b4:	6013      	str	r3, [r2, #0]
 80041b6:	4b7c      	ldr	r3, [pc, #496]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a7b      	ldr	r2, [pc, #492]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 80041bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041c0:	6013      	str	r3, [r2, #0]
 80041c2:	e01d      	b.n	8004200 <HAL_RCC_OscConfig+0xd8>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041cc:	d10c      	bne.n	80041e8 <HAL_RCC_OscConfig+0xc0>
 80041ce:	4b76      	ldr	r3, [pc, #472]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a75      	ldr	r2, [pc, #468]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 80041d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	4b73      	ldr	r3, [pc, #460]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a72      	ldr	r2, [pc, #456]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 80041e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	e00b      	b.n	8004200 <HAL_RCC_OscConfig+0xd8>
 80041e8:	4b6f      	ldr	r3, [pc, #444]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a6e      	ldr	r2, [pc, #440]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 80041ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041f2:	6013      	str	r3, [r2, #0]
 80041f4:	4b6c      	ldr	r3, [pc, #432]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a6b      	ldr	r2, [pc, #428]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 80041fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d013      	beq.n	8004230 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004208:	f7fe f832 	bl	8002270 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004210:	f7fe f82e 	bl	8002270 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b64      	cmp	r3, #100	@ 0x64
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e229      	b.n	8004676 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004222:	4b61      	ldr	r3, [pc, #388]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d0f0      	beq.n	8004210 <HAL_RCC_OscConfig+0xe8>
 800422e:	e014      	b.n	800425a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004230:	f7fe f81e 	bl	8002270 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004238:	f7fe f81a 	bl	8002270 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b64      	cmp	r3, #100	@ 0x64
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e215      	b.n	8004676 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800424a:	4b57      	ldr	r3, [pc, #348]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1f0      	bne.n	8004238 <HAL_RCC_OscConfig+0x110>
 8004256:	e000      	b.n	800425a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d069      	beq.n	800433a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004266:	4b50      	ldr	r3, [pc, #320]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 030c 	and.w	r3, r3, #12
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00b      	beq.n	800428a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004272:	4b4d      	ldr	r3, [pc, #308]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 030c 	and.w	r3, r3, #12
 800427a:	2b08      	cmp	r3, #8
 800427c:	d11c      	bne.n	80042b8 <HAL_RCC_OscConfig+0x190>
 800427e:	4b4a      	ldr	r3, [pc, #296]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d116      	bne.n	80042b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800428a:	4b47      	ldr	r3, [pc, #284]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d005      	beq.n	80042a2 <HAL_RCC_OscConfig+0x17a>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d001      	beq.n	80042a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e1e9      	b.n	8004676 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042a2:	4b41      	ldr	r3, [pc, #260]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	493d      	ldr	r1, [pc, #244]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042b6:	e040      	b.n	800433a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d023      	beq.n	8004308 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042c0:	4b39      	ldr	r3, [pc, #228]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a38      	ldr	r2, [pc, #224]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 80042c6:	f043 0301 	orr.w	r3, r3, #1
 80042ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042cc:	f7fd ffd0 	bl	8002270 <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042d4:	f7fd ffcc 	bl	8002270 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e1c7      	b.n	8004676 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e6:	4b30      	ldr	r3, [pc, #192]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0f0      	beq.n	80042d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f2:	4b2d      	ldr	r3, [pc, #180]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	4929      	ldr	r1, [pc, #164]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 8004302:	4313      	orrs	r3, r2
 8004304:	600b      	str	r3, [r1, #0]
 8004306:	e018      	b.n	800433a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004308:	4b27      	ldr	r3, [pc, #156]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a26      	ldr	r2, [pc, #152]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 800430e:	f023 0301 	bic.w	r3, r3, #1
 8004312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004314:	f7fd ffac 	bl	8002270 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800431c:	f7fd ffa8 	bl	8002270 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e1a3      	b.n	8004676 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800432e:	4b1e      	ldr	r3, [pc, #120]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1f0      	bne.n	800431c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0308 	and.w	r3, r3, #8
 8004342:	2b00      	cmp	r3, #0
 8004344:	d038      	beq.n	80043b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d019      	beq.n	8004382 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800434e:	4b16      	ldr	r3, [pc, #88]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 8004350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004352:	4a15      	ldr	r2, [pc, #84]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 8004354:	f043 0301 	orr.w	r3, r3, #1
 8004358:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800435a:	f7fd ff89 	bl	8002270 <HAL_GetTick>
 800435e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004360:	e008      	b.n	8004374 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004362:	f7fd ff85 	bl	8002270 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d901      	bls.n	8004374 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e180      	b.n	8004676 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004374:	4b0c      	ldr	r3, [pc, #48]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 8004376:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d0f0      	beq.n	8004362 <HAL_RCC_OscConfig+0x23a>
 8004380:	e01a      	b.n	80043b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004382:	4b09      	ldr	r3, [pc, #36]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 8004384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004386:	4a08      	ldr	r2, [pc, #32]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 8004388:	f023 0301 	bic.w	r3, r3, #1
 800438c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800438e:	f7fd ff6f 	bl	8002270 <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004394:	e00a      	b.n	80043ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004396:	f7fd ff6b 	bl	8002270 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d903      	bls.n	80043ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e166      	b.n	8004676 <HAL_RCC_OscConfig+0x54e>
 80043a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ac:	4b92      	ldr	r3, [pc, #584]	@ (80045f8 <HAL_RCC_OscConfig+0x4d0>)
 80043ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1ee      	bne.n	8004396 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 80a4 	beq.w	800450e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043c6:	4b8c      	ldr	r3, [pc, #560]	@ (80045f8 <HAL_RCC_OscConfig+0x4d0>)
 80043c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10d      	bne.n	80043ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80043d2:	4b89      	ldr	r3, [pc, #548]	@ (80045f8 <HAL_RCC_OscConfig+0x4d0>)
 80043d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d6:	4a88      	ldr	r2, [pc, #544]	@ (80045f8 <HAL_RCC_OscConfig+0x4d0>)
 80043d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80043de:	4b86      	ldr	r3, [pc, #536]	@ (80045f8 <HAL_RCC_OscConfig+0x4d0>)
 80043e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043e6:	60bb      	str	r3, [r7, #8]
 80043e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043ea:	2301      	movs	r3, #1
 80043ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043ee:	4b83      	ldr	r3, [pc, #524]	@ (80045fc <HAL_RCC_OscConfig+0x4d4>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d118      	bne.n	800442c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80043fa:	4b80      	ldr	r3, [pc, #512]	@ (80045fc <HAL_RCC_OscConfig+0x4d4>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a7f      	ldr	r2, [pc, #508]	@ (80045fc <HAL_RCC_OscConfig+0x4d4>)
 8004400:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004406:	f7fd ff33 	bl	8002270 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800440e:	f7fd ff2f 	bl	8002270 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b64      	cmp	r3, #100	@ 0x64
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e12a      	b.n	8004676 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004420:	4b76      	ldr	r3, [pc, #472]	@ (80045fc <HAL_RCC_OscConfig+0x4d4>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0f0      	beq.n	800440e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d106      	bne.n	8004442 <HAL_RCC_OscConfig+0x31a>
 8004434:	4b70      	ldr	r3, [pc, #448]	@ (80045f8 <HAL_RCC_OscConfig+0x4d0>)
 8004436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004438:	4a6f      	ldr	r2, [pc, #444]	@ (80045f8 <HAL_RCC_OscConfig+0x4d0>)
 800443a:	f043 0301 	orr.w	r3, r3, #1
 800443e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004440:	e02d      	b.n	800449e <HAL_RCC_OscConfig+0x376>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10c      	bne.n	8004464 <HAL_RCC_OscConfig+0x33c>
 800444a:	4b6b      	ldr	r3, [pc, #428]	@ (80045f8 <HAL_RCC_OscConfig+0x4d0>)
 800444c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800444e:	4a6a      	ldr	r2, [pc, #424]	@ (80045f8 <HAL_RCC_OscConfig+0x4d0>)
 8004450:	f023 0301 	bic.w	r3, r3, #1
 8004454:	6713      	str	r3, [r2, #112]	@ 0x70
 8004456:	4b68      	ldr	r3, [pc, #416]	@ (80045f8 <HAL_RCC_OscConfig+0x4d0>)
 8004458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800445a:	4a67      	ldr	r2, [pc, #412]	@ (80045f8 <HAL_RCC_OscConfig+0x4d0>)
 800445c:	f023 0304 	bic.w	r3, r3, #4
 8004460:	6713      	str	r3, [r2, #112]	@ 0x70
 8004462:	e01c      	b.n	800449e <HAL_RCC_OscConfig+0x376>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	2b05      	cmp	r3, #5
 800446a:	d10c      	bne.n	8004486 <HAL_RCC_OscConfig+0x35e>
 800446c:	4b62      	ldr	r3, [pc, #392]	@ (80045f8 <HAL_RCC_OscConfig+0x4d0>)
 800446e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004470:	4a61      	ldr	r2, [pc, #388]	@ (80045f8 <HAL_RCC_OscConfig+0x4d0>)
 8004472:	f043 0304 	orr.w	r3, r3, #4
 8004476:	6713      	str	r3, [r2, #112]	@ 0x70
 8004478:	4b5f      	ldr	r3, [pc, #380]	@ (80045f8 <HAL_RCC_OscConfig+0x4d0>)
 800447a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800447c:	4a5e      	ldr	r2, [pc, #376]	@ (80045f8 <HAL_RCC_OscConfig+0x4d0>)
 800447e:	f043 0301 	orr.w	r3, r3, #1
 8004482:	6713      	str	r3, [r2, #112]	@ 0x70
 8004484:	e00b      	b.n	800449e <HAL_RCC_OscConfig+0x376>
 8004486:	4b5c      	ldr	r3, [pc, #368]	@ (80045f8 <HAL_RCC_OscConfig+0x4d0>)
 8004488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800448a:	4a5b      	ldr	r2, [pc, #364]	@ (80045f8 <HAL_RCC_OscConfig+0x4d0>)
 800448c:	f023 0301 	bic.w	r3, r3, #1
 8004490:	6713      	str	r3, [r2, #112]	@ 0x70
 8004492:	4b59      	ldr	r3, [pc, #356]	@ (80045f8 <HAL_RCC_OscConfig+0x4d0>)
 8004494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004496:	4a58      	ldr	r2, [pc, #352]	@ (80045f8 <HAL_RCC_OscConfig+0x4d0>)
 8004498:	f023 0304 	bic.w	r3, r3, #4
 800449c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d015      	beq.n	80044d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a6:	f7fd fee3 	bl	8002270 <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ac:	e00a      	b.n	80044c4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ae:	f7fd fedf 	bl	8002270 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044bc:	4293      	cmp	r3, r2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e0d8      	b.n	8004676 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044c4:	4b4c      	ldr	r3, [pc, #304]	@ (80045f8 <HAL_RCC_OscConfig+0x4d0>)
 80044c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0ee      	beq.n	80044ae <HAL_RCC_OscConfig+0x386>
 80044d0:	e014      	b.n	80044fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d2:	f7fd fecd 	bl	8002270 <HAL_GetTick>
 80044d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044d8:	e00a      	b.n	80044f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044da:	f7fd fec9 	bl	8002270 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e0c2      	b.n	8004676 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044f0:	4b41      	ldr	r3, [pc, #260]	@ (80045f8 <HAL_RCC_OscConfig+0x4d0>)
 80044f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1ee      	bne.n	80044da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044fc:	7dfb      	ldrb	r3, [r7, #23]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d105      	bne.n	800450e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004502:	4b3d      	ldr	r3, [pc, #244]	@ (80045f8 <HAL_RCC_OscConfig+0x4d0>)
 8004504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004506:	4a3c      	ldr	r2, [pc, #240]	@ (80045f8 <HAL_RCC_OscConfig+0x4d0>)
 8004508:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800450c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 80ae 	beq.w	8004674 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004518:	4b37      	ldr	r3, [pc, #220]	@ (80045f8 <HAL_RCC_OscConfig+0x4d0>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f003 030c 	and.w	r3, r3, #12
 8004520:	2b08      	cmp	r3, #8
 8004522:	d06d      	beq.n	8004600 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	2b02      	cmp	r3, #2
 800452a:	d14b      	bne.n	80045c4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800452c:	4b32      	ldr	r3, [pc, #200]	@ (80045f8 <HAL_RCC_OscConfig+0x4d0>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a31      	ldr	r2, [pc, #196]	@ (80045f8 <HAL_RCC_OscConfig+0x4d0>)
 8004532:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004538:	f7fd fe9a 	bl	8002270 <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004540:	f7fd fe96 	bl	8002270 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b02      	cmp	r3, #2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e091      	b.n	8004676 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004552:	4b29      	ldr	r3, [pc, #164]	@ (80045f8 <HAL_RCC_OscConfig+0x4d0>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1f0      	bne.n	8004540 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	69da      	ldr	r2, [r3, #28]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456c:	019b      	lsls	r3, r3, #6
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004574:	085b      	lsrs	r3, r3, #1
 8004576:	3b01      	subs	r3, #1
 8004578:	041b      	lsls	r3, r3, #16
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004580:	061b      	lsls	r3, r3, #24
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004588:	071b      	lsls	r3, r3, #28
 800458a:	491b      	ldr	r1, [pc, #108]	@ (80045f8 <HAL_RCC_OscConfig+0x4d0>)
 800458c:	4313      	orrs	r3, r2
 800458e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004590:	4b19      	ldr	r3, [pc, #100]	@ (80045f8 <HAL_RCC_OscConfig+0x4d0>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a18      	ldr	r2, [pc, #96]	@ (80045f8 <HAL_RCC_OscConfig+0x4d0>)
 8004596:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800459a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459c:	f7fd fe68 	bl	8002270 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a4:	f7fd fe64 	bl	8002270 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e05f      	b.n	8004676 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045b6:	4b10      	ldr	r3, [pc, #64]	@ (80045f8 <HAL_RCC_OscConfig+0x4d0>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0f0      	beq.n	80045a4 <HAL_RCC_OscConfig+0x47c>
 80045c2:	e057      	b.n	8004674 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045c4:	4b0c      	ldr	r3, [pc, #48]	@ (80045f8 <HAL_RCC_OscConfig+0x4d0>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a0b      	ldr	r2, [pc, #44]	@ (80045f8 <HAL_RCC_OscConfig+0x4d0>)
 80045ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d0:	f7fd fe4e 	bl	8002270 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d8:	f7fd fe4a 	bl	8002270 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e045      	b.n	8004676 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ea:	4b03      	ldr	r3, [pc, #12]	@ (80045f8 <HAL_RCC_OscConfig+0x4d0>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1f0      	bne.n	80045d8 <HAL_RCC_OscConfig+0x4b0>
 80045f6:	e03d      	b.n	8004674 <HAL_RCC_OscConfig+0x54c>
 80045f8:	40023800 	.word	0x40023800
 80045fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004600:	4b1f      	ldr	r3, [pc, #124]	@ (8004680 <HAL_RCC_OscConfig+0x558>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d030      	beq.n	8004670 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004618:	429a      	cmp	r2, r3
 800461a:	d129      	bne.n	8004670 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004626:	429a      	cmp	r2, r3
 8004628:	d122      	bne.n	8004670 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004630:	4013      	ands	r3, r2
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004636:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004638:	4293      	cmp	r3, r2
 800463a:	d119      	bne.n	8004670 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004646:	085b      	lsrs	r3, r3, #1
 8004648:	3b01      	subs	r3, #1
 800464a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800464c:	429a      	cmp	r2, r3
 800464e:	d10f      	bne.n	8004670 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800465a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800465c:	429a      	cmp	r2, r3
 800465e:	d107      	bne.n	8004670 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800466a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800466c:	429a      	cmp	r2, r3
 800466e:	d001      	beq.n	8004674 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e000      	b.n	8004676 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3718      	adds	r7, #24
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	40023800 	.word	0x40023800

08004684 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800468e:	2300      	movs	r3, #0
 8004690:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e0d0      	b.n	800483e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800469c:	4b6a      	ldr	r3, [pc, #424]	@ (8004848 <HAL_RCC_ClockConfig+0x1c4>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 030f 	and.w	r3, r3, #15
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d910      	bls.n	80046cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046aa:	4b67      	ldr	r3, [pc, #412]	@ (8004848 <HAL_RCC_ClockConfig+0x1c4>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f023 020f 	bic.w	r2, r3, #15
 80046b2:	4965      	ldr	r1, [pc, #404]	@ (8004848 <HAL_RCC_ClockConfig+0x1c4>)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ba:	4b63      	ldr	r3, [pc, #396]	@ (8004848 <HAL_RCC_ClockConfig+0x1c4>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 030f 	and.w	r3, r3, #15
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d001      	beq.n	80046cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e0b8      	b.n	800483e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d020      	beq.n	800471a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d005      	beq.n	80046f0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046e4:	4b59      	ldr	r3, [pc, #356]	@ (800484c <HAL_RCC_ClockConfig+0x1c8>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	4a58      	ldr	r2, [pc, #352]	@ (800484c <HAL_RCC_ClockConfig+0x1c8>)
 80046ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80046ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0308 	and.w	r3, r3, #8
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046fc:	4b53      	ldr	r3, [pc, #332]	@ (800484c <HAL_RCC_ClockConfig+0x1c8>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	4a52      	ldr	r2, [pc, #328]	@ (800484c <HAL_RCC_ClockConfig+0x1c8>)
 8004702:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004706:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004708:	4b50      	ldr	r3, [pc, #320]	@ (800484c <HAL_RCC_ClockConfig+0x1c8>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	494d      	ldr	r1, [pc, #308]	@ (800484c <HAL_RCC_ClockConfig+0x1c8>)
 8004716:	4313      	orrs	r3, r2
 8004718:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d040      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d107      	bne.n	800473e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800472e:	4b47      	ldr	r3, [pc, #284]	@ (800484c <HAL_RCC_ClockConfig+0x1c8>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d115      	bne.n	8004766 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e07f      	b.n	800483e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b02      	cmp	r3, #2
 8004744:	d107      	bne.n	8004756 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004746:	4b41      	ldr	r3, [pc, #260]	@ (800484c <HAL_RCC_ClockConfig+0x1c8>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d109      	bne.n	8004766 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e073      	b.n	800483e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004756:	4b3d      	ldr	r3, [pc, #244]	@ (800484c <HAL_RCC_ClockConfig+0x1c8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e06b      	b.n	800483e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004766:	4b39      	ldr	r3, [pc, #228]	@ (800484c <HAL_RCC_ClockConfig+0x1c8>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f023 0203 	bic.w	r2, r3, #3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	4936      	ldr	r1, [pc, #216]	@ (800484c <HAL_RCC_ClockConfig+0x1c8>)
 8004774:	4313      	orrs	r3, r2
 8004776:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004778:	f7fd fd7a 	bl	8002270 <HAL_GetTick>
 800477c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800477e:	e00a      	b.n	8004796 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004780:	f7fd fd76 	bl	8002270 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800478e:	4293      	cmp	r3, r2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e053      	b.n	800483e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004796:	4b2d      	ldr	r3, [pc, #180]	@ (800484c <HAL_RCC_ClockConfig+0x1c8>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 020c 	and.w	r2, r3, #12
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d1eb      	bne.n	8004780 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047a8:	4b27      	ldr	r3, [pc, #156]	@ (8004848 <HAL_RCC_ClockConfig+0x1c4>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 030f 	and.w	r3, r3, #15
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d210      	bcs.n	80047d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047b6:	4b24      	ldr	r3, [pc, #144]	@ (8004848 <HAL_RCC_ClockConfig+0x1c4>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f023 020f 	bic.w	r2, r3, #15
 80047be:	4922      	ldr	r1, [pc, #136]	@ (8004848 <HAL_RCC_ClockConfig+0x1c4>)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c6:	4b20      	ldr	r3, [pc, #128]	@ (8004848 <HAL_RCC_ClockConfig+0x1c4>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d001      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e032      	b.n	800483e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d008      	beq.n	80047f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047e4:	4b19      	ldr	r3, [pc, #100]	@ (800484c <HAL_RCC_ClockConfig+0x1c8>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	4916      	ldr	r1, [pc, #88]	@ (800484c <HAL_RCC_ClockConfig+0x1c8>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d009      	beq.n	8004816 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004802:	4b12      	ldr	r3, [pc, #72]	@ (800484c <HAL_RCC_ClockConfig+0x1c8>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	490e      	ldr	r1, [pc, #56]	@ (800484c <HAL_RCC_ClockConfig+0x1c8>)
 8004812:	4313      	orrs	r3, r2
 8004814:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004816:	f000 f821 	bl	800485c <HAL_RCC_GetSysClockFreq>
 800481a:	4602      	mov	r2, r0
 800481c:	4b0b      	ldr	r3, [pc, #44]	@ (800484c <HAL_RCC_ClockConfig+0x1c8>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	091b      	lsrs	r3, r3, #4
 8004822:	f003 030f 	and.w	r3, r3, #15
 8004826:	490a      	ldr	r1, [pc, #40]	@ (8004850 <HAL_RCC_ClockConfig+0x1cc>)
 8004828:	5ccb      	ldrb	r3, [r1, r3]
 800482a:	fa22 f303 	lsr.w	r3, r2, r3
 800482e:	4a09      	ldr	r2, [pc, #36]	@ (8004854 <HAL_RCC_ClockConfig+0x1d0>)
 8004830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004832:	4b09      	ldr	r3, [pc, #36]	@ (8004858 <HAL_RCC_ClockConfig+0x1d4>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4618      	mov	r0, r3
 8004838:	f7fd fcd6 	bl	80021e8 <HAL_InitTick>

  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	40023c00 	.word	0x40023c00
 800484c:	40023800 	.word	0x40023800
 8004850:	0800be40 	.word	0x0800be40
 8004854:	20000008 	.word	0x20000008
 8004858:	2000000c 	.word	0x2000000c

0800485c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800485c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004860:	b094      	sub	sp, #80	@ 0x50
 8004862:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004864:	2300      	movs	r3, #0
 8004866:	647b      	str	r3, [r7, #68]	@ 0x44
 8004868:	2300      	movs	r3, #0
 800486a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800486c:	2300      	movs	r3, #0
 800486e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004870:	2300      	movs	r3, #0
 8004872:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004874:	4b79      	ldr	r3, [pc, #484]	@ (8004a5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 030c 	and.w	r3, r3, #12
 800487c:	2b08      	cmp	r3, #8
 800487e:	d00d      	beq.n	800489c <HAL_RCC_GetSysClockFreq+0x40>
 8004880:	2b08      	cmp	r3, #8
 8004882:	f200 80e1 	bhi.w	8004a48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004886:	2b00      	cmp	r3, #0
 8004888:	d002      	beq.n	8004890 <HAL_RCC_GetSysClockFreq+0x34>
 800488a:	2b04      	cmp	r3, #4
 800488c:	d003      	beq.n	8004896 <HAL_RCC_GetSysClockFreq+0x3a>
 800488e:	e0db      	b.n	8004a48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004890:	4b73      	ldr	r3, [pc, #460]	@ (8004a60 <HAL_RCC_GetSysClockFreq+0x204>)
 8004892:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004894:	e0db      	b.n	8004a4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004896:	4b73      	ldr	r3, [pc, #460]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x208>)
 8004898:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800489a:	e0d8      	b.n	8004a4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800489c:	4b6f      	ldr	r3, [pc, #444]	@ (8004a5c <HAL_RCC_GetSysClockFreq+0x200>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048a4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80048a6:	4b6d      	ldr	r3, [pc, #436]	@ (8004a5c <HAL_RCC_GetSysClockFreq+0x200>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d063      	beq.n	800497a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048b2:	4b6a      	ldr	r3, [pc, #424]	@ (8004a5c <HAL_RCC_GetSysClockFreq+0x200>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	099b      	lsrs	r3, r3, #6
 80048b8:	2200      	movs	r2, #0
 80048ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80048be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80048c6:	2300      	movs	r3, #0
 80048c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80048ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80048ce:	4622      	mov	r2, r4
 80048d0:	462b      	mov	r3, r5
 80048d2:	f04f 0000 	mov.w	r0, #0
 80048d6:	f04f 0100 	mov.w	r1, #0
 80048da:	0159      	lsls	r1, r3, #5
 80048dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048e0:	0150      	lsls	r0, r2, #5
 80048e2:	4602      	mov	r2, r0
 80048e4:	460b      	mov	r3, r1
 80048e6:	4621      	mov	r1, r4
 80048e8:	1a51      	subs	r1, r2, r1
 80048ea:	6139      	str	r1, [r7, #16]
 80048ec:	4629      	mov	r1, r5
 80048ee:	eb63 0301 	sbc.w	r3, r3, r1
 80048f2:	617b      	str	r3, [r7, #20]
 80048f4:	f04f 0200 	mov.w	r2, #0
 80048f8:	f04f 0300 	mov.w	r3, #0
 80048fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004900:	4659      	mov	r1, fp
 8004902:	018b      	lsls	r3, r1, #6
 8004904:	4651      	mov	r1, sl
 8004906:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800490a:	4651      	mov	r1, sl
 800490c:	018a      	lsls	r2, r1, #6
 800490e:	4651      	mov	r1, sl
 8004910:	ebb2 0801 	subs.w	r8, r2, r1
 8004914:	4659      	mov	r1, fp
 8004916:	eb63 0901 	sbc.w	r9, r3, r1
 800491a:	f04f 0200 	mov.w	r2, #0
 800491e:	f04f 0300 	mov.w	r3, #0
 8004922:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004926:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800492a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800492e:	4690      	mov	r8, r2
 8004930:	4699      	mov	r9, r3
 8004932:	4623      	mov	r3, r4
 8004934:	eb18 0303 	adds.w	r3, r8, r3
 8004938:	60bb      	str	r3, [r7, #8]
 800493a:	462b      	mov	r3, r5
 800493c:	eb49 0303 	adc.w	r3, r9, r3
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	f04f 0200 	mov.w	r2, #0
 8004946:	f04f 0300 	mov.w	r3, #0
 800494a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800494e:	4629      	mov	r1, r5
 8004950:	024b      	lsls	r3, r1, #9
 8004952:	4621      	mov	r1, r4
 8004954:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004958:	4621      	mov	r1, r4
 800495a:	024a      	lsls	r2, r1, #9
 800495c:	4610      	mov	r0, r2
 800495e:	4619      	mov	r1, r3
 8004960:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004962:	2200      	movs	r2, #0
 8004964:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004966:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004968:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800496c:	f7fb fe7c 	bl	8000668 <__aeabi_uldivmod>
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	4613      	mov	r3, r2
 8004976:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004978:	e058      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800497a:	4b38      	ldr	r3, [pc, #224]	@ (8004a5c <HAL_RCC_GetSysClockFreq+0x200>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	099b      	lsrs	r3, r3, #6
 8004980:	2200      	movs	r2, #0
 8004982:	4618      	mov	r0, r3
 8004984:	4611      	mov	r1, r2
 8004986:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800498a:	623b      	str	r3, [r7, #32]
 800498c:	2300      	movs	r3, #0
 800498e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004990:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004994:	4642      	mov	r2, r8
 8004996:	464b      	mov	r3, r9
 8004998:	f04f 0000 	mov.w	r0, #0
 800499c:	f04f 0100 	mov.w	r1, #0
 80049a0:	0159      	lsls	r1, r3, #5
 80049a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049a6:	0150      	lsls	r0, r2, #5
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	4641      	mov	r1, r8
 80049ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80049b2:	4649      	mov	r1, r9
 80049b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80049b8:	f04f 0200 	mov.w	r2, #0
 80049bc:	f04f 0300 	mov.w	r3, #0
 80049c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049cc:	ebb2 040a 	subs.w	r4, r2, sl
 80049d0:	eb63 050b 	sbc.w	r5, r3, fp
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	f04f 0300 	mov.w	r3, #0
 80049dc:	00eb      	lsls	r3, r5, #3
 80049de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049e2:	00e2      	lsls	r2, r4, #3
 80049e4:	4614      	mov	r4, r2
 80049e6:	461d      	mov	r5, r3
 80049e8:	4643      	mov	r3, r8
 80049ea:	18e3      	adds	r3, r4, r3
 80049ec:	603b      	str	r3, [r7, #0]
 80049ee:	464b      	mov	r3, r9
 80049f0:	eb45 0303 	adc.w	r3, r5, r3
 80049f4:	607b      	str	r3, [r7, #4]
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	f04f 0300 	mov.w	r3, #0
 80049fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a02:	4629      	mov	r1, r5
 8004a04:	028b      	lsls	r3, r1, #10
 8004a06:	4621      	mov	r1, r4
 8004a08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a0c:	4621      	mov	r1, r4
 8004a0e:	028a      	lsls	r2, r1, #10
 8004a10:	4610      	mov	r0, r2
 8004a12:	4619      	mov	r1, r3
 8004a14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a16:	2200      	movs	r2, #0
 8004a18:	61bb      	str	r3, [r7, #24]
 8004a1a:	61fa      	str	r2, [r7, #28]
 8004a1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a20:	f7fb fe22 	bl	8000668 <__aeabi_uldivmod>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4613      	mov	r3, r2
 8004a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	0c1b      	lsrs	r3, r3, #16
 8004a32:	f003 0303 	and.w	r3, r3, #3
 8004a36:	3301      	adds	r3, #1
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004a3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a44:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a46:	e002      	b.n	8004a4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a48:	4b05      	ldr	r3, [pc, #20]	@ (8004a60 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a4a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3750      	adds	r7, #80	@ 0x50
 8004a54:	46bd      	mov	sp, r7
 8004a56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a5a:	bf00      	nop
 8004a5c:	40023800 	.word	0x40023800
 8004a60:	00f42400 	.word	0x00f42400
 8004a64:	007a1200 	.word	0x007a1200

08004a68 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a6c:	4b03      	ldr	r3, [pc, #12]	@ (8004a7c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	20000008 	.word	0x20000008

08004a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a84:	f7ff fff0 	bl	8004a68 <HAL_RCC_GetHCLKFreq>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	4b05      	ldr	r3, [pc, #20]	@ (8004aa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	0a9b      	lsrs	r3, r3, #10
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	4903      	ldr	r1, [pc, #12]	@ (8004aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a96:	5ccb      	ldrb	r3, [r1, r3]
 8004a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	0800be50 	.word	0x0800be50

08004aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004aac:	f7ff ffdc 	bl	8004a68 <HAL_RCC_GetHCLKFreq>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	4b05      	ldr	r3, [pc, #20]	@ (8004ac8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	0b5b      	lsrs	r3, r3, #13
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	4903      	ldr	r1, [pc, #12]	@ (8004acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004abe:	5ccb      	ldrb	r3, [r1, r3]
 8004ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	0800be50 	.word	0x0800be50

08004ad0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b088      	sub	sp, #32
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004adc:	2300      	movs	r3, #0
 8004ade:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d012      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004af8:	4b69      	ldr	r3, [pc, #420]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	4a68      	ldr	r2, [pc, #416]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004afe:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004b02:	6093      	str	r3, [r2, #8]
 8004b04:	4b66      	ldr	r3, [pc, #408]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b0c:	4964      	ldr	r1, [pc, #400]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d017      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b2a:	4b5d      	ldr	r3, [pc, #372]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b30:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b38:	4959      	ldr	r1, [pc, #356]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b48:	d101      	bne.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004b56:	2301      	movs	r3, #1
 8004b58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d017      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b66:	4b4e      	ldr	r3, [pc, #312]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b6c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b74:	494a      	ldr	r1, [pc, #296]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b84:	d101      	bne.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004b86:	2301      	movs	r3, #1
 8004b88:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004b92:	2301      	movs	r3, #1
 8004b94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0320 	and.w	r3, r3, #32
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 808b 	beq.w	8004cca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bb4:	4b3a      	ldr	r3, [pc, #232]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb8:	4a39      	ldr	r2, [pc, #228]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bc0:	4b37      	ldr	r3, [pc, #220]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bc8:	60bb      	str	r3, [r7, #8]
 8004bca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004bcc:	4b35      	ldr	r3, [pc, #212]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a34      	ldr	r2, [pc, #208]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bd8:	f7fd fb4a 	bl	8002270 <HAL_GetTick>
 8004bdc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004be0:	f7fd fb46 	bl	8002270 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b64      	cmp	r3, #100	@ 0x64
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e38f      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004bf2:	4b2c      	ldr	r3, [pc, #176]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0f0      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bfe:	4b28      	ldr	r3, [pc, #160]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c06:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d035      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d02e      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c1c:	4b20      	ldr	r3, [pc, #128]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c24:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c26:	4b1e      	ldr	r3, [pc, #120]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c2a:	4a1d      	ldr	r2, [pc, #116]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c30:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c32:	4b1b      	ldr	r3, [pc, #108]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c36:	4a1a      	ldr	r2, [pc, #104]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c3c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004c3e:	4a18      	ldr	r2, [pc, #96]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c44:	4b16      	ldr	r3, [pc, #88]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d114      	bne.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c50:	f7fd fb0e 	bl	8002270 <HAL_GetTick>
 8004c54:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c56:	e00a      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c58:	f7fd fb0a 	bl	8002270 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e351      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d0ee      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c86:	d111      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004c88:	4b05      	ldr	r3, [pc, #20]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004c94:	4b04      	ldr	r3, [pc, #16]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c96:	400b      	ands	r3, r1
 8004c98:	4901      	ldr	r1, [pc, #4]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	608b      	str	r3, [r1, #8]
 8004c9e:	e00b      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004ca0:	40023800 	.word	0x40023800
 8004ca4:	40007000 	.word	0x40007000
 8004ca8:	0ffffcff 	.word	0x0ffffcff
 8004cac:	4bac      	ldr	r3, [pc, #688]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	4aab      	ldr	r2, [pc, #684]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cb2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004cb6:	6093      	str	r3, [r2, #8]
 8004cb8:	4ba9      	ldr	r3, [pc, #676]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cc4:	49a6      	ldr	r1, [pc, #664]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0310 	and.w	r3, r3, #16
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d010      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004cd6:	4ba2      	ldr	r3, [pc, #648]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cdc:	4aa0      	ldr	r2, [pc, #640]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ce2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004ce6:	4b9e      	ldr	r3, [pc, #632]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ce8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf0:	499b      	ldr	r1, [pc, #620]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00a      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d04:	4b96      	ldr	r3, [pc, #600]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d0a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d12:	4993      	ldr	r1, [pc, #588]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00a      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d26:	4b8e      	ldr	r3, [pc, #568]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d2c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d34:	498a      	ldr	r1, [pc, #552]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00a      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d48:	4b85      	ldr	r3, [pc, #532]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d4e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d56:	4982      	ldr	r1, [pc, #520]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d6a:	4b7d      	ldr	r3, [pc, #500]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d70:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d78:	4979      	ldr	r1, [pc, #484]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00a      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d8c:	4b74      	ldr	r3, [pc, #464]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d92:	f023 0203 	bic.w	r2, r3, #3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d9a:	4971      	ldr	r1, [pc, #452]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00a      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004dae:	4b6c      	ldr	r3, [pc, #432]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004db4:	f023 020c 	bic.w	r2, r3, #12
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dbc:	4968      	ldr	r1, [pc, #416]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00a      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004dd0:	4b63      	ldr	r3, [pc, #396]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dd6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dde:	4960      	ldr	r1, [pc, #384]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00a      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004df2:	4b5b      	ldr	r3, [pc, #364]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004df8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e00:	4957      	ldr	r1, [pc, #348]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00a      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e14:	4b52      	ldr	r3, [pc, #328]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e1a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e22:	494f      	ldr	r1, [pc, #316]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00a      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004e36:	4b4a      	ldr	r3, [pc, #296]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e3c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e44:	4946      	ldr	r1, [pc, #280]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00a      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004e58:	4b41      	ldr	r3, [pc, #260]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e5e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e66:	493e      	ldr	r1, [pc, #248]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00a      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004e7a:	4b39      	ldr	r3, [pc, #228]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e80:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e88:	4935      	ldr	r1, [pc, #212]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00a      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e9c:	4b30      	ldr	r3, [pc, #192]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ea2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004eaa:	492d      	ldr	r1, [pc, #180]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d011      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004ebe:	4b28      	ldr	r3, [pc, #160]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ec4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ecc:	4924      	ldr	r1, [pc, #144]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ed8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004edc:	d101      	bne.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0308 	and.w	r3, r3, #8
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00a      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004efe:	4b18      	ldr	r3, [pc, #96]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f04:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f0c:	4914      	ldr	r1, [pc, #80]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00b      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f20:	4b0f      	ldr	r3, [pc, #60]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f26:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f30:	490b      	ldr	r1, [pc, #44]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00f      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004f44:	4b06      	ldr	r3, [pc, #24]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f4a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f54:	4902      	ldr	r1, [pc, #8]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f5c:	e002      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004f5e:	bf00      	nop
 8004f60:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00b      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f70:	4b8a      	ldr	r3, [pc, #552]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f76:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f80:	4986      	ldr	r1, [pc, #536]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00b      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004f94:	4b81      	ldr	r3, [pc, #516]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f9a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fa4:	497d      	ldr	r1, [pc, #500]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d006      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f000 80d6 	beq.w	800516c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004fc0:	4b76      	ldr	r3, [pc, #472]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a75      	ldr	r2, [pc, #468]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fc6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004fca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fcc:	f7fd f950 	bl	8002270 <HAL_GetTick>
 8004fd0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004fd4:	f7fd f94c 	bl	8002270 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b64      	cmp	r3, #100	@ 0x64
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e195      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fe6:	4b6d      	ldr	r3, [pc, #436]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1f0      	bne.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d021      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005002:	2b00      	cmp	r3, #0
 8005004:	d11d      	bne.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005006:	4b65      	ldr	r3, [pc, #404]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005008:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800500c:	0c1b      	lsrs	r3, r3, #16
 800500e:	f003 0303 	and.w	r3, r3, #3
 8005012:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005014:	4b61      	ldr	r3, [pc, #388]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005016:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800501a:	0e1b      	lsrs	r3, r3, #24
 800501c:	f003 030f 	and.w	r3, r3, #15
 8005020:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	019a      	lsls	r2, r3, #6
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	041b      	lsls	r3, r3, #16
 800502c:	431a      	orrs	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	061b      	lsls	r3, r3, #24
 8005032:	431a      	orrs	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	071b      	lsls	r3, r3, #28
 800503a:	4958      	ldr	r1, [pc, #352]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800503c:	4313      	orrs	r3, r2
 800503e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d004      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005052:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005056:	d00a      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005060:	2b00      	cmp	r3, #0
 8005062:	d02e      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005068:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800506c:	d129      	bne.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800506e:	4b4b      	ldr	r3, [pc, #300]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005070:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005074:	0c1b      	lsrs	r3, r3, #16
 8005076:	f003 0303 	and.w	r3, r3, #3
 800507a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800507c:	4b47      	ldr	r3, [pc, #284]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800507e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005082:	0f1b      	lsrs	r3, r3, #28
 8005084:	f003 0307 	and.w	r3, r3, #7
 8005088:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	019a      	lsls	r2, r3, #6
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	041b      	lsls	r3, r3, #16
 8005094:	431a      	orrs	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	061b      	lsls	r3, r3, #24
 800509c:	431a      	orrs	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	071b      	lsls	r3, r3, #28
 80050a2:	493e      	ldr	r1, [pc, #248]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80050aa:	4b3c      	ldr	r3, [pc, #240]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050b0:	f023 021f 	bic.w	r2, r3, #31
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b8:	3b01      	subs	r3, #1
 80050ba:	4938      	ldr	r1, [pc, #224]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d01d      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80050ce:	4b33      	ldr	r3, [pc, #204]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050d4:	0e1b      	lsrs	r3, r3, #24
 80050d6:	f003 030f 	and.w	r3, r3, #15
 80050da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80050dc:	4b2f      	ldr	r3, [pc, #188]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050e2:	0f1b      	lsrs	r3, r3, #28
 80050e4:	f003 0307 	and.w	r3, r3, #7
 80050e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	019a      	lsls	r2, r3, #6
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	041b      	lsls	r3, r3, #16
 80050f6:	431a      	orrs	r2, r3
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	061b      	lsls	r3, r3, #24
 80050fc:	431a      	orrs	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	071b      	lsls	r3, r3, #28
 8005102:	4926      	ldr	r1, [pc, #152]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005104:	4313      	orrs	r3, r2
 8005106:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d011      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	019a      	lsls	r2, r3, #6
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	041b      	lsls	r3, r3, #16
 8005122:	431a      	orrs	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	061b      	lsls	r3, r3, #24
 800512a:	431a      	orrs	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	071b      	lsls	r3, r3, #28
 8005132:	491a      	ldr	r1, [pc, #104]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005134:	4313      	orrs	r3, r2
 8005136:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800513a:	4b18      	ldr	r3, [pc, #96]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a17      	ldr	r2, [pc, #92]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005140:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005144:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005146:	f7fd f893 	bl	8002270 <HAL_GetTick>
 800514a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800514c:	e008      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800514e:	f7fd f88f 	bl	8002270 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	2b64      	cmp	r3, #100	@ 0x64
 800515a:	d901      	bls.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e0d8      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005160:	4b0e      	ldr	r3, [pc, #56]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0f0      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	2b01      	cmp	r3, #1
 8005170:	f040 80ce 	bne.w	8005310 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005174:	4b09      	ldr	r3, [pc, #36]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a08      	ldr	r2, [pc, #32]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800517a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800517e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005180:	f7fd f876 	bl	8002270 <HAL_GetTick>
 8005184:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005186:	e00b      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005188:	f7fd f872 	bl	8002270 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b64      	cmp	r3, #100	@ 0x64
 8005194:	d904      	bls.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e0bb      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800519a:	bf00      	nop
 800519c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051a0:	4b5e      	ldr	r3, [pc, #376]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051ac:	d0ec      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d009      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d02e      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d12a      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80051d6:	4b51      	ldr	r3, [pc, #324]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051dc:	0c1b      	lsrs	r3, r3, #16
 80051de:	f003 0303 	and.w	r3, r3, #3
 80051e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80051e4:	4b4d      	ldr	r3, [pc, #308]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ea:	0f1b      	lsrs	r3, r3, #28
 80051ec:	f003 0307 	and.w	r3, r3, #7
 80051f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	019a      	lsls	r2, r3, #6
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	041b      	lsls	r3, r3, #16
 80051fc:	431a      	orrs	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	061b      	lsls	r3, r3, #24
 8005204:	431a      	orrs	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	071b      	lsls	r3, r3, #28
 800520a:	4944      	ldr	r1, [pc, #272]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800520c:	4313      	orrs	r3, r2
 800520e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005212:	4b42      	ldr	r3, [pc, #264]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005214:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005218:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005220:	3b01      	subs	r3, #1
 8005222:	021b      	lsls	r3, r3, #8
 8005224:	493d      	ldr	r1, [pc, #244]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005226:	4313      	orrs	r3, r2
 8005228:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d022      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800523c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005240:	d11d      	bne.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005242:	4b36      	ldr	r3, [pc, #216]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005248:	0e1b      	lsrs	r3, r3, #24
 800524a:	f003 030f 	and.w	r3, r3, #15
 800524e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005250:	4b32      	ldr	r3, [pc, #200]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005256:	0f1b      	lsrs	r3, r3, #28
 8005258:	f003 0307 	and.w	r3, r3, #7
 800525c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	019a      	lsls	r2, r3, #6
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	041b      	lsls	r3, r3, #16
 800526a:	431a      	orrs	r2, r3
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	061b      	lsls	r3, r3, #24
 8005270:	431a      	orrs	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	071b      	lsls	r3, r3, #28
 8005276:	4929      	ldr	r1, [pc, #164]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005278:	4313      	orrs	r3, r2
 800527a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0308 	and.w	r3, r3, #8
 8005286:	2b00      	cmp	r3, #0
 8005288:	d028      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800528a:	4b24      	ldr	r3, [pc, #144]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800528c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005290:	0e1b      	lsrs	r3, r3, #24
 8005292:	f003 030f 	and.w	r3, r3, #15
 8005296:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005298:	4b20      	ldr	r3, [pc, #128]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800529a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800529e:	0c1b      	lsrs	r3, r3, #16
 80052a0:	f003 0303 	and.w	r3, r3, #3
 80052a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	019a      	lsls	r2, r3, #6
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	041b      	lsls	r3, r3, #16
 80052b0:	431a      	orrs	r2, r3
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	061b      	lsls	r3, r3, #24
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	69db      	ldr	r3, [r3, #28]
 80052bc:	071b      	lsls	r3, r3, #28
 80052be:	4917      	ldr	r1, [pc, #92]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80052c6:	4b15      	ldr	r3, [pc, #84]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d4:	4911      	ldr	r1, [pc, #68]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80052dc:	4b0f      	ldr	r3, [pc, #60]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a0e      	ldr	r2, [pc, #56]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052e8:	f7fc ffc2 	bl	8002270 <HAL_GetTick>
 80052ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052ee:	e008      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80052f0:	f7fc ffbe 	bl	8002270 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b64      	cmp	r3, #100	@ 0x64
 80052fc:	d901      	bls.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e007      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005302:	4b06      	ldr	r3, [pc, #24]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800530a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800530e:	d1ef      	bne.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3720      	adds	r7, #32
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	40023800 	.word	0x40023800

08005320 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e08f      	b.n	8005454 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	d106      	bne.n	800534e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f7fc fd8b 	bl	8001e64 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2202      	movs	r2, #2
 8005352:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6899      	ldr	r1, [r3, #8]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	4b3e      	ldr	r3, [pc, #248]	@ (800545c <HAL_TIM_Encoder_Init+0x13c>)
 8005362:	400b      	ands	r3, r1
 8005364:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	3304      	adds	r3, #4
 800536e:	4619      	mov	r1, r3
 8005370:	4610      	mov	r0, r2
 8005372:	f000 fa43 	bl	80057fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	4313      	orrs	r3, r2
 8005396:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	4b31      	ldr	r3, [pc, #196]	@ (8005460 <HAL_TIM_Encoder_Init+0x140>)
 800539c:	4013      	ands	r3, r2
 800539e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	689a      	ldr	r2, [r3, #8]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	021b      	lsls	r3, r3, #8
 80053aa:	4313      	orrs	r3, r2
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	4b2b      	ldr	r3, [pc, #172]	@ (8005464 <HAL_TIM_Encoder_Init+0x144>)
 80053b6:	4013      	ands	r3, r2
 80053b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	4b2a      	ldr	r3, [pc, #168]	@ (8005468 <HAL_TIM_Encoder_Init+0x148>)
 80053be:	4013      	ands	r3, r2
 80053c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	68da      	ldr	r2, [r3, #12]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	021b      	lsls	r3, r3, #8
 80053cc:	4313      	orrs	r3, r2
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	011a      	lsls	r2, r3, #4
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	031b      	lsls	r3, r3, #12
 80053e0:	4313      	orrs	r3, r2
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80053ee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80053f6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	011b      	lsls	r3, r3, #4
 8005402:	4313      	orrs	r3, r2
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	4313      	orrs	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3718      	adds	r7, #24
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	fffebff8 	.word	0xfffebff8
 8005460:	fffffcfc 	.word	0xfffffcfc
 8005464:	fffff3f3 	.word	0xfffff3f3
 8005468:	ffff0f0f 	.word	0xffff0f0f

0800546c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800547c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005484:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800548c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005494:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d110      	bne.n	80054be <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800549c:	7bfb      	ldrb	r3, [r7, #15]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d102      	bne.n	80054a8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80054a2:	7b7b      	ldrb	r3, [r7, #13]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d001      	beq.n	80054ac <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e069      	b.n	8005580 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2202      	movs	r2, #2
 80054b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054bc:	e031      	b.n	8005522 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	2b04      	cmp	r3, #4
 80054c2:	d110      	bne.n	80054e6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80054c4:	7bbb      	ldrb	r3, [r7, #14]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d102      	bne.n	80054d0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80054ca:	7b3b      	ldrb	r3, [r7, #12]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d001      	beq.n	80054d4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e055      	b.n	8005580 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054e4:	e01d      	b.n	8005522 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054e6:	7bfb      	ldrb	r3, [r7, #15]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d108      	bne.n	80054fe <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80054ec:	7bbb      	ldrb	r3, [r7, #14]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d105      	bne.n	80054fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054f2:	7b7b      	ldrb	r3, [r7, #13]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d102      	bne.n	80054fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80054f8:	7b3b      	ldrb	r3, [r7, #12]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d001      	beq.n	8005502 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e03e      	b.n	8005580 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2202      	movs	r2, #2
 8005506:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2202      	movs	r2, #2
 800550e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2202      	movs	r2, #2
 8005516:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2202      	movs	r2, #2
 800551e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d003      	beq.n	8005530 <HAL_TIM_Encoder_Start+0xc4>
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	2b04      	cmp	r3, #4
 800552c:	d008      	beq.n	8005540 <HAL_TIM_Encoder_Start+0xd4>
 800552e:	e00f      	b.n	8005550 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2201      	movs	r2, #1
 8005536:	2100      	movs	r1, #0
 8005538:	4618      	mov	r0, r3
 800553a:	f000 fa0b 	bl	8005954 <TIM_CCxChannelCmd>
      break;
 800553e:	e016      	b.n	800556e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2201      	movs	r2, #1
 8005546:	2104      	movs	r1, #4
 8005548:	4618      	mov	r0, r3
 800554a:	f000 fa03 	bl	8005954 <TIM_CCxChannelCmd>
      break;
 800554e:	e00e      	b.n	800556e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2201      	movs	r2, #1
 8005556:	2100      	movs	r1, #0
 8005558:	4618      	mov	r0, r3
 800555a:	f000 f9fb 	bl	8005954 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2201      	movs	r2, #1
 8005564:	2104      	movs	r1, #4
 8005566:	4618      	mov	r0, r3
 8005568:	f000 f9f4 	bl	8005954 <TIM_CCxChannelCmd>
      break;
 800556c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f042 0201 	orr.w	r2, r2, #1
 800557c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d020      	beq.n	80055ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f003 0302 	and.w	r3, r3, #2
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d01b      	beq.n	80055ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f06f 0202 	mvn.w	r2, #2
 80055bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f8f3 	bl	80057be <HAL_TIM_IC_CaptureCallback>
 80055d8:	e005      	b.n	80055e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f8e5 	bl	80057aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f8f6 	bl	80057d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f003 0304 	and.w	r3, r3, #4
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d020      	beq.n	8005638 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f003 0304 	and.w	r3, r3, #4
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d01b      	beq.n	8005638 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f06f 0204 	mvn.w	r2, #4
 8005608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2202      	movs	r2, #2
 800560e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f8cd 	bl	80057be <HAL_TIM_IC_CaptureCallback>
 8005624:	e005      	b.n	8005632 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f8bf 	bl	80057aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f8d0 	bl	80057d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	f003 0308 	and.w	r3, r3, #8
 800563e:	2b00      	cmp	r3, #0
 8005640:	d020      	beq.n	8005684 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f003 0308 	and.w	r3, r3, #8
 8005648:	2b00      	cmp	r3, #0
 800564a:	d01b      	beq.n	8005684 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f06f 0208 	mvn.w	r2, #8
 8005654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2204      	movs	r2, #4
 800565a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	f003 0303 	and.w	r3, r3, #3
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f8a7 	bl	80057be <HAL_TIM_IC_CaptureCallback>
 8005670:	e005      	b.n	800567e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f899 	bl	80057aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 f8aa 	bl	80057d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f003 0310 	and.w	r3, r3, #16
 800568a:	2b00      	cmp	r3, #0
 800568c:	d020      	beq.n	80056d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f003 0310 	and.w	r3, r3, #16
 8005694:	2b00      	cmp	r3, #0
 8005696:	d01b      	beq.n	80056d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f06f 0210 	mvn.w	r2, #16
 80056a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2208      	movs	r2, #8
 80056a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f881 	bl	80057be <HAL_TIM_IC_CaptureCallback>
 80056bc:	e005      	b.n	80056ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f873 	bl	80057aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 f884 	bl	80057d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00c      	beq.n	80056f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f003 0301 	and.w	r3, r3, #1
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d007      	beq.n	80056f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f06f 0201 	mvn.w	r2, #1
 80056ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f851 	bl	8005796 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d104      	bne.n	8005708 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00c      	beq.n	8005722 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800570e:	2b00      	cmp	r3, #0
 8005710:	d007      	beq.n	8005722 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800571a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 f9d7 	bl	8005ad0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00c      	beq.n	8005746 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005732:	2b00      	cmp	r3, #0
 8005734:	d007      	beq.n	8005746 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800573e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 f9cf 	bl	8005ae4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00c      	beq.n	800576a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005756:	2b00      	cmp	r3, #0
 8005758:	d007      	beq.n	800576a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f83e 	bl	80057e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	f003 0320 	and.w	r3, r3, #32
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00c      	beq.n	800578e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f003 0320 	and.w	r3, r3, #32
 800577a:	2b00      	cmp	r3, #0
 800577c:	d007      	beq.n	800578e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f06f 0220 	mvn.w	r2, #32
 8005786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 f997 	bl	8005abc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800578e:	bf00      	nop
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005796:	b480      	push	{r7}
 8005798:	b083      	sub	sp, #12
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800579e:	bf00      	nop
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b083      	sub	sp, #12
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057b2:	bf00      	nop
 80057b4:	370c      	adds	r7, #12
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057be:	b480      	push	{r7}
 80057c0:	b083      	sub	sp, #12
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057c6:	bf00      	nop
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057da:	bf00      	nop
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b083      	sub	sp, #12
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057ee:	bf00      	nop
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
	...

080057fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a46      	ldr	r2, [pc, #280]	@ (8005928 <TIM_Base_SetConfig+0x12c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d013      	beq.n	800583c <TIM_Base_SetConfig+0x40>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800581a:	d00f      	beq.n	800583c <TIM_Base_SetConfig+0x40>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a43      	ldr	r2, [pc, #268]	@ (800592c <TIM_Base_SetConfig+0x130>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d00b      	beq.n	800583c <TIM_Base_SetConfig+0x40>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a42      	ldr	r2, [pc, #264]	@ (8005930 <TIM_Base_SetConfig+0x134>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d007      	beq.n	800583c <TIM_Base_SetConfig+0x40>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a41      	ldr	r2, [pc, #260]	@ (8005934 <TIM_Base_SetConfig+0x138>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d003      	beq.n	800583c <TIM_Base_SetConfig+0x40>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a40      	ldr	r2, [pc, #256]	@ (8005938 <TIM_Base_SetConfig+0x13c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d108      	bne.n	800584e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005842:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	4313      	orrs	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a35      	ldr	r2, [pc, #212]	@ (8005928 <TIM_Base_SetConfig+0x12c>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d02b      	beq.n	80058ae <TIM_Base_SetConfig+0xb2>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800585c:	d027      	beq.n	80058ae <TIM_Base_SetConfig+0xb2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a32      	ldr	r2, [pc, #200]	@ (800592c <TIM_Base_SetConfig+0x130>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d023      	beq.n	80058ae <TIM_Base_SetConfig+0xb2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a31      	ldr	r2, [pc, #196]	@ (8005930 <TIM_Base_SetConfig+0x134>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d01f      	beq.n	80058ae <TIM_Base_SetConfig+0xb2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a30      	ldr	r2, [pc, #192]	@ (8005934 <TIM_Base_SetConfig+0x138>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d01b      	beq.n	80058ae <TIM_Base_SetConfig+0xb2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a2f      	ldr	r2, [pc, #188]	@ (8005938 <TIM_Base_SetConfig+0x13c>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d017      	beq.n	80058ae <TIM_Base_SetConfig+0xb2>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a2e      	ldr	r2, [pc, #184]	@ (800593c <TIM_Base_SetConfig+0x140>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d013      	beq.n	80058ae <TIM_Base_SetConfig+0xb2>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a2d      	ldr	r2, [pc, #180]	@ (8005940 <TIM_Base_SetConfig+0x144>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d00f      	beq.n	80058ae <TIM_Base_SetConfig+0xb2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a2c      	ldr	r2, [pc, #176]	@ (8005944 <TIM_Base_SetConfig+0x148>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d00b      	beq.n	80058ae <TIM_Base_SetConfig+0xb2>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a2b      	ldr	r2, [pc, #172]	@ (8005948 <TIM_Base_SetConfig+0x14c>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d007      	beq.n	80058ae <TIM_Base_SetConfig+0xb2>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a2a      	ldr	r2, [pc, #168]	@ (800594c <TIM_Base_SetConfig+0x150>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d003      	beq.n	80058ae <TIM_Base_SetConfig+0xb2>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a29      	ldr	r2, [pc, #164]	@ (8005950 <TIM_Base_SetConfig+0x154>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d108      	bne.n	80058c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	4313      	orrs	r3, r2
 80058be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	689a      	ldr	r2, [r3, #8]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a10      	ldr	r2, [pc, #64]	@ (8005928 <TIM_Base_SetConfig+0x12c>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d003      	beq.n	80058f4 <TIM_Base_SetConfig+0xf8>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a12      	ldr	r2, [pc, #72]	@ (8005938 <TIM_Base_SetConfig+0x13c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d103      	bne.n	80058fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	691a      	ldr	r2, [r3, #16]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b01      	cmp	r3, #1
 800590c:	d105      	bne.n	800591a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	f023 0201 	bic.w	r2, r3, #1
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	611a      	str	r2, [r3, #16]
  }
}
 800591a:	bf00      	nop
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	40010000 	.word	0x40010000
 800592c:	40000400 	.word	0x40000400
 8005930:	40000800 	.word	0x40000800
 8005934:	40000c00 	.word	0x40000c00
 8005938:	40010400 	.word	0x40010400
 800593c:	40014000 	.word	0x40014000
 8005940:	40014400 	.word	0x40014400
 8005944:	40014800 	.word	0x40014800
 8005948:	40001800 	.word	0x40001800
 800594c:	40001c00 	.word	0x40001c00
 8005950:	40002000 	.word	0x40002000

08005954 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f003 031f 	and.w	r3, r3, #31
 8005966:	2201      	movs	r2, #1
 8005968:	fa02 f303 	lsl.w	r3, r2, r3
 800596c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6a1a      	ldr	r2, [r3, #32]
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	43db      	mvns	r3, r3
 8005976:	401a      	ands	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6a1a      	ldr	r2, [r3, #32]
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f003 031f 	and.w	r3, r3, #31
 8005986:	6879      	ldr	r1, [r7, #4]
 8005988:	fa01 f303 	lsl.w	r3, r1, r3
 800598c:	431a      	orrs	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	621a      	str	r2, [r3, #32]
}
 8005992:	bf00      	nop
 8005994:	371c      	adds	r7, #28
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
	...

080059a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d101      	bne.n	80059b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059b4:	2302      	movs	r3, #2
 80059b6:	e06d      	b.n	8005a94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a30      	ldr	r2, [pc, #192]	@ (8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d004      	beq.n	80059ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a2f      	ldr	r2, [pc, #188]	@ (8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d108      	bne.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80059f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a20      	ldr	r2, [pc, #128]	@ (8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d022      	beq.n	8005a68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a2a:	d01d      	beq.n	8005a68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a1d      	ldr	r2, [pc, #116]	@ (8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d018      	beq.n	8005a68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a1c      	ldr	r2, [pc, #112]	@ (8005aac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d013      	beq.n	8005a68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a1a      	ldr	r2, [pc, #104]	@ (8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d00e      	beq.n	8005a68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a15      	ldr	r2, [pc, #84]	@ (8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d009      	beq.n	8005a68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a16      	ldr	r2, [pc, #88]	@ (8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d004      	beq.n	8005a68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a15      	ldr	r2, [pc, #84]	@ (8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d10c      	bne.n	8005a82 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3714      	adds	r7, #20
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	40010000 	.word	0x40010000
 8005aa4:	40010400 	.word	0x40010400
 8005aa8:	40000400 	.word	0x40000400
 8005aac:	40000800 	.word	0x40000800
 8005ab0:	40000c00 	.word	0x40000c00
 8005ab4:	40014000 	.word	0x40014000
 8005ab8:	40001800 	.word	0x40001800

08005abc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e040      	b.n	8005b8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d106      	bne.n	8005b20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7fc fa1e 	bl	8001f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2224      	movs	r2, #36	@ 0x24
 8005b24:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 0201 	bic.w	r2, r2, #1
 8005b34:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d002      	beq.n	8005b44 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fe6c 	bl	800681c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 fc05 	bl	8006354 <UART_SetConfig>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d101      	bne.n	8005b54 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e01b      	b.n	8005b8c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689a      	ldr	r2, [r3, #8]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f042 0201 	orr.w	r2, r2, #1
 8005b82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 feeb 	bl	8006960 <UART_CheckIdleState>
 8005b8a:	4603      	mov	r3, r0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b08a      	sub	sp, #40	@ 0x28
 8005b98:	af02      	add	r7, sp, #8
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	603b      	str	r3, [r7, #0]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ba8:	2b20      	cmp	r3, #32
 8005baa:	d177      	bne.n	8005c9c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d002      	beq.n	8005bb8 <HAL_UART_Transmit+0x24>
 8005bb2:	88fb      	ldrh	r3, [r7, #6]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e070      	b.n	8005c9e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2221      	movs	r2, #33	@ 0x21
 8005bc8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bca:	f7fc fb51 	bl	8002270 <HAL_GetTick>
 8005bce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	88fa      	ldrh	r2, [r7, #6]
 8005bd4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	88fa      	ldrh	r2, [r7, #6]
 8005bdc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005be8:	d108      	bne.n	8005bfc <HAL_UART_Transmit+0x68>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d104      	bne.n	8005bfc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	61bb      	str	r3, [r7, #24]
 8005bfa:	e003      	b.n	8005c04 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c00:	2300      	movs	r3, #0
 8005c02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c04:	e02f      	b.n	8005c66 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	2180      	movs	r1, #128	@ 0x80
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f000 ff4d 	bl	8006ab0 <UART_WaitOnFlagUntilTimeout>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d004      	beq.n	8005c26 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e03b      	b.n	8005c9e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10b      	bne.n	8005c44 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	881b      	ldrh	r3, [r3, #0]
 8005c30:	461a      	mov	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c3a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	3302      	adds	r3, #2
 8005c40:	61bb      	str	r3, [r7, #24]
 8005c42:	e007      	b.n	8005c54 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	781a      	ldrb	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	3301      	adds	r3, #1
 8005c52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1c9      	bne.n	8005c06 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	2140      	movs	r1, #64	@ 0x40
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 ff17 	bl	8006ab0 <UART_WaitOnFlagUntilTimeout>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d004      	beq.n	8005c92 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2220      	movs	r2, #32
 8005c8c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e005      	b.n	8005c9e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2220      	movs	r2, #32
 8005c96:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	e000      	b.n	8005c9e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005c9c:	2302      	movs	r3, #2
  }
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3720      	adds	r7, #32
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b08a      	sub	sp, #40	@ 0x28
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	60b9      	str	r1, [r7, #8]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cba:	2b20      	cmp	r3, #32
 8005cbc:	d132      	bne.n	8005d24 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d002      	beq.n	8005cca <HAL_UART_Receive_IT+0x24>
 8005cc4:	88fb      	ldrh	r3, [r7, #6]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e02b      	b.n	8005d26 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d018      	beq.n	8005d14 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	e853 3f00 	ldrex	r3, [r3]
 8005cee:	613b      	str	r3, [r7, #16]
   return(result);
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005cf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d00:	623b      	str	r3, [r7, #32]
 8005d02:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d04:	69f9      	ldr	r1, [r7, #28]
 8005d06:	6a3a      	ldr	r2, [r7, #32]
 8005d08:	e841 2300 	strex	r3, r2, [r1]
 8005d0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1e6      	bne.n	8005ce2 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d14:	88fb      	ldrh	r3, [r7, #6]
 8005d16:	461a      	mov	r2, r3
 8005d18:	68b9      	ldr	r1, [r7, #8]
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f000 ff36 	bl	8006b8c <UART_Start_Receive_IT>
 8005d20:	4603      	mov	r3, r0
 8005d22:	e000      	b.n	8005d26 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005d24:	2302      	movs	r3, #2
  }
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3728      	adds	r7, #40	@ 0x28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
	...

08005d30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b0ba      	sub	sp, #232	@ 0xe8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	69db      	ldr	r3, [r3, #28]
 8005d3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005d5a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005d5e:	4013      	ands	r3, r2
 8005d60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005d64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d115      	bne.n	8005d98 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d70:	f003 0320 	and.w	r3, r3, #32
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00f      	beq.n	8005d98 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d7c:	f003 0320 	and.w	r3, r3, #32
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d009      	beq.n	8005d98 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f000 82ac 	beq.w	80062e6 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	4798      	blx	r3
      }
      return;
 8005d96:	e2a6      	b.n	80062e6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005d98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 8117 	beq.w	8005fd0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005da2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d106      	bne.n	8005dbc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005dae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005db2:	4b85      	ldr	r3, [pc, #532]	@ (8005fc8 <HAL_UART_IRQHandler+0x298>)
 8005db4:	4013      	ands	r3, r2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f000 810a 	beq.w	8005fd0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d011      	beq.n	8005dec <HAL_UART_IRQHandler+0xbc>
 8005dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00b      	beq.n	8005dec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005de2:	f043 0201 	orr.w	r2, r3, #1
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005df0:	f003 0302 	and.w	r3, r3, #2
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d011      	beq.n	8005e1c <HAL_UART_IRQHandler+0xec>
 8005df8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00b      	beq.n	8005e1c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2202      	movs	r2, #2
 8005e0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e12:	f043 0204 	orr.w	r2, r3, #4
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e20:	f003 0304 	and.w	r3, r3, #4
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d011      	beq.n	8005e4c <HAL_UART_IRQHandler+0x11c>
 8005e28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00b      	beq.n	8005e4c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2204      	movs	r2, #4
 8005e3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e42:	f043 0202 	orr.w	r2, r3, #2
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e50:	f003 0308 	and.w	r3, r3, #8
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d017      	beq.n	8005e88 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e5c:	f003 0320 	and.w	r3, r3, #32
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d105      	bne.n	8005e70 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005e64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e68:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00b      	beq.n	8005e88 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2208      	movs	r2, #8
 8005e76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e7e:	f043 0208 	orr.w	r2, r3, #8
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d012      	beq.n	8005eba <HAL_UART_IRQHandler+0x18a>
 8005e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e98:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00c      	beq.n	8005eba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ea8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005eb0:	f043 0220 	orr.w	r2, r3, #32
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 8212 	beq.w	80062ea <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eca:	f003 0320 	and.w	r3, r3, #32
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00d      	beq.n	8005eee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ed6:	f003 0320 	and.w	r3, r3, #32
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d007      	beq.n	8005eee <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ef4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f02:	2b40      	cmp	r3, #64	@ 0x40
 8005f04:	d005      	beq.n	8005f12 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f0a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d04f      	beq.n	8005fb2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 ff00 	bl	8006d18 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f22:	2b40      	cmp	r3, #64	@ 0x40
 8005f24:	d141      	bne.n	8005faa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	3308      	adds	r3, #8
 8005f2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f34:	e853 3f00 	ldrex	r3, [r3]
 8005f38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005f3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	3308      	adds	r3, #8
 8005f4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005f52:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005f56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005f5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005f62:	e841 2300 	strex	r3, r2, [r1]
 8005f66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005f6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1d9      	bne.n	8005f26 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d013      	beq.n	8005fa2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f7e:	4a13      	ldr	r2, [pc, #76]	@ (8005fcc <HAL_UART_IRQHandler+0x29c>)
 8005f80:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7fc fc16 	bl	80027b8 <HAL_DMA_Abort_IT>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d017      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005f9c:	4610      	mov	r0, r2
 8005f9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fa0:	e00f      	b.n	8005fc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f9b6 	bl	8006314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fa8:	e00b      	b.n	8005fc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 f9b2 	bl	8006314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb0:	e007      	b.n	8005fc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f9ae 	bl	8006314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005fc0:	e193      	b.n	80062ea <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc2:	bf00      	nop
    return;
 8005fc4:	e191      	b.n	80062ea <HAL_UART_IRQHandler+0x5ba>
 8005fc6:	bf00      	nop
 8005fc8:	04000120 	.word	0x04000120
 8005fcc:	08006de1 	.word	0x08006de1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	f040 814c 	bne.w	8006272 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fde:	f003 0310 	and.w	r3, r3, #16
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f000 8145 	beq.w	8006272 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fec:	f003 0310 	and.w	r3, r3, #16
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 813e 	beq.w	8006272 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2210      	movs	r2, #16
 8005ffc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006008:	2b40      	cmp	r3, #64	@ 0x40
 800600a:	f040 80b6 	bne.w	800617a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800601a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 8165 	beq.w	80062ee <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800602a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800602e:	429a      	cmp	r2, r3
 8006030:	f080 815d 	bcs.w	80062ee <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800603a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006042:	69db      	ldr	r3, [r3, #28]
 8006044:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006048:	f000 8086 	beq.w	8006158 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006054:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006058:	e853 3f00 	ldrex	r3, [r3]
 800605c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006060:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006064:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006068:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	461a      	mov	r2, r3
 8006072:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006076:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800607a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006082:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006086:	e841 2300 	strex	r3, r2, [r1]
 800608a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800608e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1da      	bne.n	800604c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	3308      	adds	r3, #8
 800609c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060a0:	e853 3f00 	ldrex	r3, [r3]
 80060a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80060a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80060a8:	f023 0301 	bic.w	r3, r3, #1
 80060ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3308      	adds	r3, #8
 80060b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80060ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80060be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80060c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80060c6:	e841 2300 	strex	r3, r2, [r1]
 80060ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80060cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1e1      	bne.n	8006096 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	3308      	adds	r3, #8
 80060d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80060dc:	e853 3f00 	ldrex	r3, [r3]
 80060e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80060e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	3308      	adds	r3, #8
 80060f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80060f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80060f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80060fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80060fe:	e841 2300 	strex	r3, r2, [r1]
 8006102:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006104:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1e3      	bne.n	80060d2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2220      	movs	r2, #32
 800610e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006120:	e853 3f00 	ldrex	r3, [r3]
 8006124:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006126:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006128:	f023 0310 	bic.w	r3, r3, #16
 800612c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	461a      	mov	r2, r3
 8006136:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800613a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800613c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006140:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006142:	e841 2300 	strex	r3, r2, [r1]
 8006146:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006148:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1e4      	bne.n	8006118 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006152:	4618      	mov	r0, r3
 8006154:	f7fc fac0 	bl	80026d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2202      	movs	r2, #2
 800615c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800616a:	b29b      	uxth	r3, r3
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	b29b      	uxth	r3, r3
 8006170:	4619      	mov	r1, r3
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f8d8 	bl	8006328 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006178:	e0b9      	b.n	80062ee <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006186:	b29b      	uxth	r3, r3
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006194:	b29b      	uxth	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 80ab 	beq.w	80062f2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 800619c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 80a6 	beq.w	80062f2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ae:	e853 3f00 	ldrex	r3, [r3]
 80061b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80061c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80061ca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80061ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061d0:	e841 2300 	strex	r3, r2, [r1]
 80061d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80061d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1e4      	bne.n	80061a6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	3308      	adds	r3, #8
 80061e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e6:	e853 3f00 	ldrex	r3, [r3]
 80061ea:	623b      	str	r3, [r7, #32]
   return(result);
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	f023 0301 	bic.w	r3, r3, #1
 80061f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	3308      	adds	r3, #8
 80061fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006200:	633a      	str	r2, [r7, #48]	@ 0x30
 8006202:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006204:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006206:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006208:	e841 2300 	strex	r3, r2, [r1]
 800620c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800620e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1e3      	bne.n	80061dc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2220      	movs	r2, #32
 8006218:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	e853 3f00 	ldrex	r3, [r3]
 8006234:	60fb      	str	r3, [r7, #12]
   return(result);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f023 0310 	bic.w	r3, r3, #16
 800623c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	461a      	mov	r2, r3
 8006246:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800624a:	61fb      	str	r3, [r7, #28]
 800624c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624e:	69b9      	ldr	r1, [r7, #24]
 8006250:	69fa      	ldr	r2, [r7, #28]
 8006252:	e841 2300 	strex	r3, r2, [r1]
 8006256:	617b      	str	r3, [r7, #20]
   return(result);
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1e4      	bne.n	8006228 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2202      	movs	r2, #2
 8006262:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006264:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006268:	4619      	mov	r1, r3
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f85c 	bl	8006328 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006270:	e03f      	b.n	80062f2 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006276:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00e      	beq.n	800629c <HAL_UART_IRQHandler+0x56c>
 800627e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006282:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d008      	beq.n	800629c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006292:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f853 	bl	8006340 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800629a:	e02d      	b.n	80062f8 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800629c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00e      	beq.n	80062c6 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80062a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d008      	beq.n	80062c6 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d01c      	beq.n	80062f6 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	4798      	blx	r3
    }
    return;
 80062c4:	e017      	b.n	80062f6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80062c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d012      	beq.n	80062f8 <HAL_UART_IRQHandler+0x5c8>
 80062d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00c      	beq.n	80062f8 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 fd94 	bl	8006e0c <UART_EndTransmit_IT>
    return;
 80062e4:	e008      	b.n	80062f8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80062e6:	bf00      	nop
 80062e8:	e006      	b.n	80062f8 <HAL_UART_IRQHandler+0x5c8>
    return;
 80062ea:	bf00      	nop
 80062ec:	e004      	b.n	80062f8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80062ee:	bf00      	nop
 80062f0:	e002      	b.n	80062f8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80062f2:	bf00      	nop
 80062f4:	e000      	b.n	80062f8 <HAL_UART_IRQHandler+0x5c8>
    return;
 80062f6:	bf00      	nop
  }

}
 80062f8:	37e8      	adds	r7, #232	@ 0xe8
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop

08006300 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	460b      	mov	r3, r1
 8006332:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b088      	sub	sp, #32
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800635c:	2300      	movs	r3, #0
 800635e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689a      	ldr	r2, [r3, #8]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	431a      	orrs	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	431a      	orrs	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	69db      	ldr	r3, [r3, #28]
 8006374:	4313      	orrs	r3, r2
 8006376:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	4ba6      	ldr	r3, [pc, #664]	@ (8006618 <UART_SetConfig+0x2c4>)
 8006380:	4013      	ands	r3, r2
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	6812      	ldr	r2, [r2, #0]
 8006386:	6979      	ldr	r1, [r7, #20]
 8006388:	430b      	orrs	r3, r1
 800638a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68da      	ldr	r2, [r3, #12]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a1b      	ldr	r3, [r3, #32]
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	430a      	orrs	r2, r1
 80063c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a94      	ldr	r2, [pc, #592]	@ (800661c <UART_SetConfig+0x2c8>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d120      	bne.n	8006412 <UART_SetConfig+0xbe>
 80063d0:	4b93      	ldr	r3, [pc, #588]	@ (8006620 <UART_SetConfig+0x2cc>)
 80063d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063d6:	f003 0303 	and.w	r3, r3, #3
 80063da:	2b03      	cmp	r3, #3
 80063dc:	d816      	bhi.n	800640c <UART_SetConfig+0xb8>
 80063de:	a201      	add	r2, pc, #4	@ (adr r2, 80063e4 <UART_SetConfig+0x90>)
 80063e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e4:	080063f5 	.word	0x080063f5
 80063e8:	08006401 	.word	0x08006401
 80063ec:	080063fb 	.word	0x080063fb
 80063f0:	08006407 	.word	0x08006407
 80063f4:	2301      	movs	r3, #1
 80063f6:	77fb      	strb	r3, [r7, #31]
 80063f8:	e150      	b.n	800669c <UART_SetConfig+0x348>
 80063fa:	2302      	movs	r3, #2
 80063fc:	77fb      	strb	r3, [r7, #31]
 80063fe:	e14d      	b.n	800669c <UART_SetConfig+0x348>
 8006400:	2304      	movs	r3, #4
 8006402:	77fb      	strb	r3, [r7, #31]
 8006404:	e14a      	b.n	800669c <UART_SetConfig+0x348>
 8006406:	2308      	movs	r3, #8
 8006408:	77fb      	strb	r3, [r7, #31]
 800640a:	e147      	b.n	800669c <UART_SetConfig+0x348>
 800640c:	2310      	movs	r3, #16
 800640e:	77fb      	strb	r3, [r7, #31]
 8006410:	e144      	b.n	800669c <UART_SetConfig+0x348>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a83      	ldr	r2, [pc, #524]	@ (8006624 <UART_SetConfig+0x2d0>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d132      	bne.n	8006482 <UART_SetConfig+0x12e>
 800641c:	4b80      	ldr	r3, [pc, #512]	@ (8006620 <UART_SetConfig+0x2cc>)
 800641e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006422:	f003 030c 	and.w	r3, r3, #12
 8006426:	2b0c      	cmp	r3, #12
 8006428:	d828      	bhi.n	800647c <UART_SetConfig+0x128>
 800642a:	a201      	add	r2, pc, #4	@ (adr r2, 8006430 <UART_SetConfig+0xdc>)
 800642c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006430:	08006465 	.word	0x08006465
 8006434:	0800647d 	.word	0x0800647d
 8006438:	0800647d 	.word	0x0800647d
 800643c:	0800647d 	.word	0x0800647d
 8006440:	08006471 	.word	0x08006471
 8006444:	0800647d 	.word	0x0800647d
 8006448:	0800647d 	.word	0x0800647d
 800644c:	0800647d 	.word	0x0800647d
 8006450:	0800646b 	.word	0x0800646b
 8006454:	0800647d 	.word	0x0800647d
 8006458:	0800647d 	.word	0x0800647d
 800645c:	0800647d 	.word	0x0800647d
 8006460:	08006477 	.word	0x08006477
 8006464:	2300      	movs	r3, #0
 8006466:	77fb      	strb	r3, [r7, #31]
 8006468:	e118      	b.n	800669c <UART_SetConfig+0x348>
 800646a:	2302      	movs	r3, #2
 800646c:	77fb      	strb	r3, [r7, #31]
 800646e:	e115      	b.n	800669c <UART_SetConfig+0x348>
 8006470:	2304      	movs	r3, #4
 8006472:	77fb      	strb	r3, [r7, #31]
 8006474:	e112      	b.n	800669c <UART_SetConfig+0x348>
 8006476:	2308      	movs	r3, #8
 8006478:	77fb      	strb	r3, [r7, #31]
 800647a:	e10f      	b.n	800669c <UART_SetConfig+0x348>
 800647c:	2310      	movs	r3, #16
 800647e:	77fb      	strb	r3, [r7, #31]
 8006480:	e10c      	b.n	800669c <UART_SetConfig+0x348>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a68      	ldr	r2, [pc, #416]	@ (8006628 <UART_SetConfig+0x2d4>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d120      	bne.n	80064ce <UART_SetConfig+0x17a>
 800648c:	4b64      	ldr	r3, [pc, #400]	@ (8006620 <UART_SetConfig+0x2cc>)
 800648e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006492:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006496:	2b30      	cmp	r3, #48	@ 0x30
 8006498:	d013      	beq.n	80064c2 <UART_SetConfig+0x16e>
 800649a:	2b30      	cmp	r3, #48	@ 0x30
 800649c:	d814      	bhi.n	80064c8 <UART_SetConfig+0x174>
 800649e:	2b20      	cmp	r3, #32
 80064a0:	d009      	beq.n	80064b6 <UART_SetConfig+0x162>
 80064a2:	2b20      	cmp	r3, #32
 80064a4:	d810      	bhi.n	80064c8 <UART_SetConfig+0x174>
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d002      	beq.n	80064b0 <UART_SetConfig+0x15c>
 80064aa:	2b10      	cmp	r3, #16
 80064ac:	d006      	beq.n	80064bc <UART_SetConfig+0x168>
 80064ae:	e00b      	b.n	80064c8 <UART_SetConfig+0x174>
 80064b0:	2300      	movs	r3, #0
 80064b2:	77fb      	strb	r3, [r7, #31]
 80064b4:	e0f2      	b.n	800669c <UART_SetConfig+0x348>
 80064b6:	2302      	movs	r3, #2
 80064b8:	77fb      	strb	r3, [r7, #31]
 80064ba:	e0ef      	b.n	800669c <UART_SetConfig+0x348>
 80064bc:	2304      	movs	r3, #4
 80064be:	77fb      	strb	r3, [r7, #31]
 80064c0:	e0ec      	b.n	800669c <UART_SetConfig+0x348>
 80064c2:	2308      	movs	r3, #8
 80064c4:	77fb      	strb	r3, [r7, #31]
 80064c6:	e0e9      	b.n	800669c <UART_SetConfig+0x348>
 80064c8:	2310      	movs	r3, #16
 80064ca:	77fb      	strb	r3, [r7, #31]
 80064cc:	e0e6      	b.n	800669c <UART_SetConfig+0x348>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a56      	ldr	r2, [pc, #344]	@ (800662c <UART_SetConfig+0x2d8>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d120      	bne.n	800651a <UART_SetConfig+0x1c6>
 80064d8:	4b51      	ldr	r3, [pc, #324]	@ (8006620 <UART_SetConfig+0x2cc>)
 80064da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064de:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80064e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80064e4:	d013      	beq.n	800650e <UART_SetConfig+0x1ba>
 80064e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80064e8:	d814      	bhi.n	8006514 <UART_SetConfig+0x1c0>
 80064ea:	2b80      	cmp	r3, #128	@ 0x80
 80064ec:	d009      	beq.n	8006502 <UART_SetConfig+0x1ae>
 80064ee:	2b80      	cmp	r3, #128	@ 0x80
 80064f0:	d810      	bhi.n	8006514 <UART_SetConfig+0x1c0>
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d002      	beq.n	80064fc <UART_SetConfig+0x1a8>
 80064f6:	2b40      	cmp	r3, #64	@ 0x40
 80064f8:	d006      	beq.n	8006508 <UART_SetConfig+0x1b4>
 80064fa:	e00b      	b.n	8006514 <UART_SetConfig+0x1c0>
 80064fc:	2300      	movs	r3, #0
 80064fe:	77fb      	strb	r3, [r7, #31]
 8006500:	e0cc      	b.n	800669c <UART_SetConfig+0x348>
 8006502:	2302      	movs	r3, #2
 8006504:	77fb      	strb	r3, [r7, #31]
 8006506:	e0c9      	b.n	800669c <UART_SetConfig+0x348>
 8006508:	2304      	movs	r3, #4
 800650a:	77fb      	strb	r3, [r7, #31]
 800650c:	e0c6      	b.n	800669c <UART_SetConfig+0x348>
 800650e:	2308      	movs	r3, #8
 8006510:	77fb      	strb	r3, [r7, #31]
 8006512:	e0c3      	b.n	800669c <UART_SetConfig+0x348>
 8006514:	2310      	movs	r3, #16
 8006516:	77fb      	strb	r3, [r7, #31]
 8006518:	e0c0      	b.n	800669c <UART_SetConfig+0x348>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a44      	ldr	r2, [pc, #272]	@ (8006630 <UART_SetConfig+0x2dc>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d125      	bne.n	8006570 <UART_SetConfig+0x21c>
 8006524:	4b3e      	ldr	r3, [pc, #248]	@ (8006620 <UART_SetConfig+0x2cc>)
 8006526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800652a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800652e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006532:	d017      	beq.n	8006564 <UART_SetConfig+0x210>
 8006534:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006538:	d817      	bhi.n	800656a <UART_SetConfig+0x216>
 800653a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800653e:	d00b      	beq.n	8006558 <UART_SetConfig+0x204>
 8006540:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006544:	d811      	bhi.n	800656a <UART_SetConfig+0x216>
 8006546:	2b00      	cmp	r3, #0
 8006548:	d003      	beq.n	8006552 <UART_SetConfig+0x1fe>
 800654a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800654e:	d006      	beq.n	800655e <UART_SetConfig+0x20a>
 8006550:	e00b      	b.n	800656a <UART_SetConfig+0x216>
 8006552:	2300      	movs	r3, #0
 8006554:	77fb      	strb	r3, [r7, #31]
 8006556:	e0a1      	b.n	800669c <UART_SetConfig+0x348>
 8006558:	2302      	movs	r3, #2
 800655a:	77fb      	strb	r3, [r7, #31]
 800655c:	e09e      	b.n	800669c <UART_SetConfig+0x348>
 800655e:	2304      	movs	r3, #4
 8006560:	77fb      	strb	r3, [r7, #31]
 8006562:	e09b      	b.n	800669c <UART_SetConfig+0x348>
 8006564:	2308      	movs	r3, #8
 8006566:	77fb      	strb	r3, [r7, #31]
 8006568:	e098      	b.n	800669c <UART_SetConfig+0x348>
 800656a:	2310      	movs	r3, #16
 800656c:	77fb      	strb	r3, [r7, #31]
 800656e:	e095      	b.n	800669c <UART_SetConfig+0x348>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a2f      	ldr	r2, [pc, #188]	@ (8006634 <UART_SetConfig+0x2e0>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d125      	bne.n	80065c6 <UART_SetConfig+0x272>
 800657a:	4b29      	ldr	r3, [pc, #164]	@ (8006620 <UART_SetConfig+0x2cc>)
 800657c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006580:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006584:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006588:	d017      	beq.n	80065ba <UART_SetConfig+0x266>
 800658a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800658e:	d817      	bhi.n	80065c0 <UART_SetConfig+0x26c>
 8006590:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006594:	d00b      	beq.n	80065ae <UART_SetConfig+0x25a>
 8006596:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800659a:	d811      	bhi.n	80065c0 <UART_SetConfig+0x26c>
 800659c:	2b00      	cmp	r3, #0
 800659e:	d003      	beq.n	80065a8 <UART_SetConfig+0x254>
 80065a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065a4:	d006      	beq.n	80065b4 <UART_SetConfig+0x260>
 80065a6:	e00b      	b.n	80065c0 <UART_SetConfig+0x26c>
 80065a8:	2301      	movs	r3, #1
 80065aa:	77fb      	strb	r3, [r7, #31]
 80065ac:	e076      	b.n	800669c <UART_SetConfig+0x348>
 80065ae:	2302      	movs	r3, #2
 80065b0:	77fb      	strb	r3, [r7, #31]
 80065b2:	e073      	b.n	800669c <UART_SetConfig+0x348>
 80065b4:	2304      	movs	r3, #4
 80065b6:	77fb      	strb	r3, [r7, #31]
 80065b8:	e070      	b.n	800669c <UART_SetConfig+0x348>
 80065ba:	2308      	movs	r3, #8
 80065bc:	77fb      	strb	r3, [r7, #31]
 80065be:	e06d      	b.n	800669c <UART_SetConfig+0x348>
 80065c0:	2310      	movs	r3, #16
 80065c2:	77fb      	strb	r3, [r7, #31]
 80065c4:	e06a      	b.n	800669c <UART_SetConfig+0x348>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a1b      	ldr	r2, [pc, #108]	@ (8006638 <UART_SetConfig+0x2e4>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d138      	bne.n	8006642 <UART_SetConfig+0x2ee>
 80065d0:	4b13      	ldr	r3, [pc, #76]	@ (8006620 <UART_SetConfig+0x2cc>)
 80065d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065d6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80065da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80065de:	d017      	beq.n	8006610 <UART_SetConfig+0x2bc>
 80065e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80065e4:	d82a      	bhi.n	800663c <UART_SetConfig+0x2e8>
 80065e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065ea:	d00b      	beq.n	8006604 <UART_SetConfig+0x2b0>
 80065ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065f0:	d824      	bhi.n	800663c <UART_SetConfig+0x2e8>
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <UART_SetConfig+0x2aa>
 80065f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065fa:	d006      	beq.n	800660a <UART_SetConfig+0x2b6>
 80065fc:	e01e      	b.n	800663c <UART_SetConfig+0x2e8>
 80065fe:	2300      	movs	r3, #0
 8006600:	77fb      	strb	r3, [r7, #31]
 8006602:	e04b      	b.n	800669c <UART_SetConfig+0x348>
 8006604:	2302      	movs	r3, #2
 8006606:	77fb      	strb	r3, [r7, #31]
 8006608:	e048      	b.n	800669c <UART_SetConfig+0x348>
 800660a:	2304      	movs	r3, #4
 800660c:	77fb      	strb	r3, [r7, #31]
 800660e:	e045      	b.n	800669c <UART_SetConfig+0x348>
 8006610:	2308      	movs	r3, #8
 8006612:	77fb      	strb	r3, [r7, #31]
 8006614:	e042      	b.n	800669c <UART_SetConfig+0x348>
 8006616:	bf00      	nop
 8006618:	efff69f3 	.word	0xefff69f3
 800661c:	40011000 	.word	0x40011000
 8006620:	40023800 	.word	0x40023800
 8006624:	40004400 	.word	0x40004400
 8006628:	40004800 	.word	0x40004800
 800662c:	40004c00 	.word	0x40004c00
 8006630:	40005000 	.word	0x40005000
 8006634:	40011400 	.word	0x40011400
 8006638:	40007800 	.word	0x40007800
 800663c:	2310      	movs	r3, #16
 800663e:	77fb      	strb	r3, [r7, #31]
 8006640:	e02c      	b.n	800669c <UART_SetConfig+0x348>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a72      	ldr	r2, [pc, #456]	@ (8006810 <UART_SetConfig+0x4bc>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d125      	bne.n	8006698 <UART_SetConfig+0x344>
 800664c:	4b71      	ldr	r3, [pc, #452]	@ (8006814 <UART_SetConfig+0x4c0>)
 800664e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006652:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006656:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800665a:	d017      	beq.n	800668c <UART_SetConfig+0x338>
 800665c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006660:	d817      	bhi.n	8006692 <UART_SetConfig+0x33e>
 8006662:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006666:	d00b      	beq.n	8006680 <UART_SetConfig+0x32c>
 8006668:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800666c:	d811      	bhi.n	8006692 <UART_SetConfig+0x33e>
 800666e:	2b00      	cmp	r3, #0
 8006670:	d003      	beq.n	800667a <UART_SetConfig+0x326>
 8006672:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006676:	d006      	beq.n	8006686 <UART_SetConfig+0x332>
 8006678:	e00b      	b.n	8006692 <UART_SetConfig+0x33e>
 800667a:	2300      	movs	r3, #0
 800667c:	77fb      	strb	r3, [r7, #31]
 800667e:	e00d      	b.n	800669c <UART_SetConfig+0x348>
 8006680:	2302      	movs	r3, #2
 8006682:	77fb      	strb	r3, [r7, #31]
 8006684:	e00a      	b.n	800669c <UART_SetConfig+0x348>
 8006686:	2304      	movs	r3, #4
 8006688:	77fb      	strb	r3, [r7, #31]
 800668a:	e007      	b.n	800669c <UART_SetConfig+0x348>
 800668c:	2308      	movs	r3, #8
 800668e:	77fb      	strb	r3, [r7, #31]
 8006690:	e004      	b.n	800669c <UART_SetConfig+0x348>
 8006692:	2310      	movs	r3, #16
 8006694:	77fb      	strb	r3, [r7, #31]
 8006696:	e001      	b.n	800669c <UART_SetConfig+0x348>
 8006698:	2310      	movs	r3, #16
 800669a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	69db      	ldr	r3, [r3, #28]
 80066a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066a4:	d15b      	bne.n	800675e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80066a6:	7ffb      	ldrb	r3, [r7, #31]
 80066a8:	2b08      	cmp	r3, #8
 80066aa:	d828      	bhi.n	80066fe <UART_SetConfig+0x3aa>
 80066ac:	a201      	add	r2, pc, #4	@ (adr r2, 80066b4 <UART_SetConfig+0x360>)
 80066ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b2:	bf00      	nop
 80066b4:	080066d9 	.word	0x080066d9
 80066b8:	080066e1 	.word	0x080066e1
 80066bc:	080066e9 	.word	0x080066e9
 80066c0:	080066ff 	.word	0x080066ff
 80066c4:	080066ef 	.word	0x080066ef
 80066c8:	080066ff 	.word	0x080066ff
 80066cc:	080066ff 	.word	0x080066ff
 80066d0:	080066ff 	.word	0x080066ff
 80066d4:	080066f7 	.word	0x080066f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066d8:	f7fe f9d2 	bl	8004a80 <HAL_RCC_GetPCLK1Freq>
 80066dc:	61b8      	str	r0, [r7, #24]
        break;
 80066de:	e013      	b.n	8006708 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066e0:	f7fe f9e2 	bl	8004aa8 <HAL_RCC_GetPCLK2Freq>
 80066e4:	61b8      	str	r0, [r7, #24]
        break;
 80066e6:	e00f      	b.n	8006708 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066e8:	4b4b      	ldr	r3, [pc, #300]	@ (8006818 <UART_SetConfig+0x4c4>)
 80066ea:	61bb      	str	r3, [r7, #24]
        break;
 80066ec:	e00c      	b.n	8006708 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066ee:	f7fe f8b5 	bl	800485c <HAL_RCC_GetSysClockFreq>
 80066f2:	61b8      	str	r0, [r7, #24]
        break;
 80066f4:	e008      	b.n	8006708 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066fa:	61bb      	str	r3, [r7, #24]
        break;
 80066fc:	e004      	b.n	8006708 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80066fe:	2300      	movs	r3, #0
 8006700:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	77bb      	strb	r3, [r7, #30]
        break;
 8006706:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d074      	beq.n	80067f8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	005a      	lsls	r2, r3, #1
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	085b      	lsrs	r3, r3, #1
 8006718:	441a      	add	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006722:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	2b0f      	cmp	r3, #15
 8006728:	d916      	bls.n	8006758 <UART_SetConfig+0x404>
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006730:	d212      	bcs.n	8006758 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	b29b      	uxth	r3, r3
 8006736:	f023 030f 	bic.w	r3, r3, #15
 800673a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	085b      	lsrs	r3, r3, #1
 8006740:	b29b      	uxth	r3, r3
 8006742:	f003 0307 	and.w	r3, r3, #7
 8006746:	b29a      	uxth	r2, r3
 8006748:	89fb      	ldrh	r3, [r7, #14]
 800674a:	4313      	orrs	r3, r2
 800674c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	89fa      	ldrh	r2, [r7, #14]
 8006754:	60da      	str	r2, [r3, #12]
 8006756:	e04f      	b.n	80067f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	77bb      	strb	r3, [r7, #30]
 800675c:	e04c      	b.n	80067f8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800675e:	7ffb      	ldrb	r3, [r7, #31]
 8006760:	2b08      	cmp	r3, #8
 8006762:	d828      	bhi.n	80067b6 <UART_SetConfig+0x462>
 8006764:	a201      	add	r2, pc, #4	@ (adr r2, 800676c <UART_SetConfig+0x418>)
 8006766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800676a:	bf00      	nop
 800676c:	08006791 	.word	0x08006791
 8006770:	08006799 	.word	0x08006799
 8006774:	080067a1 	.word	0x080067a1
 8006778:	080067b7 	.word	0x080067b7
 800677c:	080067a7 	.word	0x080067a7
 8006780:	080067b7 	.word	0x080067b7
 8006784:	080067b7 	.word	0x080067b7
 8006788:	080067b7 	.word	0x080067b7
 800678c:	080067af 	.word	0x080067af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006790:	f7fe f976 	bl	8004a80 <HAL_RCC_GetPCLK1Freq>
 8006794:	61b8      	str	r0, [r7, #24]
        break;
 8006796:	e013      	b.n	80067c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006798:	f7fe f986 	bl	8004aa8 <HAL_RCC_GetPCLK2Freq>
 800679c:	61b8      	str	r0, [r7, #24]
        break;
 800679e:	e00f      	b.n	80067c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067a0:	4b1d      	ldr	r3, [pc, #116]	@ (8006818 <UART_SetConfig+0x4c4>)
 80067a2:	61bb      	str	r3, [r7, #24]
        break;
 80067a4:	e00c      	b.n	80067c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067a6:	f7fe f859 	bl	800485c <HAL_RCC_GetSysClockFreq>
 80067aa:	61b8      	str	r0, [r7, #24]
        break;
 80067ac:	e008      	b.n	80067c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067b2:	61bb      	str	r3, [r7, #24]
        break;
 80067b4:	e004      	b.n	80067c0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	77bb      	strb	r3, [r7, #30]
        break;
 80067be:	bf00      	nop
    }

    if (pclk != 0U)
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d018      	beq.n	80067f8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	085a      	lsrs	r2, r3, #1
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	441a      	add	r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	2b0f      	cmp	r3, #15
 80067de:	d909      	bls.n	80067f4 <UART_SetConfig+0x4a0>
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067e6:	d205      	bcs.n	80067f4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	60da      	str	r2, [r3, #12]
 80067f2:	e001      	b.n	80067f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006804:	7fbb      	ldrb	r3, [r7, #30]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3720      	adds	r7, #32
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	40007c00 	.word	0x40007c00
 8006814:	40023800 	.word	0x40023800
 8006818:	00f42400 	.word	0x00f42400

0800681c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006828:	f003 0308 	and.w	r3, r3, #8
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00a      	beq.n	8006846 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684a:	f003 0301 	and.w	r3, r3, #1
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00a      	beq.n	8006868 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	430a      	orrs	r2, r1
 8006866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800686c:	f003 0302 	and.w	r3, r3, #2
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00a      	beq.n	800688a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	430a      	orrs	r2, r1
 8006888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800688e:	f003 0304 	and.w	r3, r3, #4
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00a      	beq.n	80068ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	430a      	orrs	r2, r1
 80068aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b0:	f003 0310 	and.w	r3, r3, #16
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00a      	beq.n	80068ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d2:	f003 0320 	and.w	r3, r3, #32
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00a      	beq.n	80068f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	430a      	orrs	r2, r1
 80068ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d01a      	beq.n	8006932 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	430a      	orrs	r2, r1
 8006910:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006916:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800691a:	d10a      	bne.n	8006932 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	430a      	orrs	r2, r1
 8006930:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00a      	beq.n	8006954 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	430a      	orrs	r2, r1
 8006952:	605a      	str	r2, [r3, #4]
  }
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b098      	sub	sp, #96	@ 0x60
 8006964:	af02      	add	r7, sp, #8
 8006966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006970:	f7fb fc7e 	bl	8002270 <HAL_GetTick>
 8006974:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0308 	and.w	r3, r3, #8
 8006980:	2b08      	cmp	r3, #8
 8006982:	d12e      	bne.n	80069e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006984:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800698c:	2200      	movs	r2, #0
 800698e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f88c 	bl	8006ab0 <UART_WaitOnFlagUntilTimeout>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d021      	beq.n	80069e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069a6:	e853 3f00 	ldrex	r3, [r3]
 80069aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80069ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	461a      	mov	r2, r3
 80069ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80069be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069c4:	e841 2300 	strex	r3, r2, [r1]
 80069c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1e6      	bne.n	800699e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2220      	movs	r2, #32
 80069d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e062      	b.n	8006aa8 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0304 	and.w	r3, r3, #4
 80069ec:	2b04      	cmp	r3, #4
 80069ee:	d149      	bne.n	8006a84 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069f8:	2200      	movs	r2, #0
 80069fa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f856 	bl	8006ab0 <UART_WaitOnFlagUntilTimeout>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d03c      	beq.n	8006a84 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a12:	e853 3f00 	ldrex	r3, [r3]
 8006a16:	623b      	str	r3, [r7, #32]
   return(result);
 8006a18:	6a3b      	ldr	r3, [r7, #32]
 8006a1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	461a      	mov	r2, r3
 8006a26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a28:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a30:	e841 2300 	strex	r3, r2, [r1]
 8006a34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1e6      	bne.n	8006a0a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	3308      	adds	r3, #8
 8006a42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	e853 3f00 	ldrex	r3, [r3]
 8006a4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f023 0301 	bic.w	r3, r3, #1
 8006a52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	3308      	adds	r3, #8
 8006a5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a5c:	61fa      	str	r2, [r7, #28]
 8006a5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a60:	69b9      	ldr	r1, [r7, #24]
 8006a62:	69fa      	ldr	r2, [r7, #28]
 8006a64:	e841 2300 	strex	r3, r2, [r1]
 8006a68:	617b      	str	r3, [r7, #20]
   return(result);
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d1e5      	bne.n	8006a3c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2220      	movs	r2, #32
 8006a74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e011      	b.n	8006aa8 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2220      	movs	r2, #32
 8006a88:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2220      	movs	r2, #32
 8006a8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3758      	adds	r7, #88	@ 0x58
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	603b      	str	r3, [r7, #0]
 8006abc:	4613      	mov	r3, r2
 8006abe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ac0:	e04f      	b.n	8006b62 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac8:	d04b      	beq.n	8006b62 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aca:	f7fb fbd1 	bl	8002270 <HAL_GetTick>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	69ba      	ldr	r2, [r7, #24]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d302      	bcc.n	8006ae0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d101      	bne.n	8006ae4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e04e      	b.n	8006b82 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 0304 	and.w	r3, r3, #4
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d037      	beq.n	8006b62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	2b80      	cmp	r3, #128	@ 0x80
 8006af6:	d034      	beq.n	8006b62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	2b40      	cmp	r3, #64	@ 0x40
 8006afc:	d031      	beq.n	8006b62 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	69db      	ldr	r3, [r3, #28]
 8006b04:	f003 0308 	and.w	r3, r3, #8
 8006b08:	2b08      	cmp	r3, #8
 8006b0a:	d110      	bne.n	8006b2e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2208      	movs	r2, #8
 8006b12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 f8ff 	bl	8006d18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2208      	movs	r2, #8
 8006b1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e029      	b.n	8006b82 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	69db      	ldr	r3, [r3, #28]
 8006b34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b3c:	d111      	bne.n	8006b62 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f000 f8e5 	bl	8006d18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2220      	movs	r2, #32
 8006b52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e00f      	b.n	8006b82 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	69da      	ldr	r2, [r3, #28]
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	bf0c      	ite	eq
 8006b72:	2301      	moveq	r3, #1
 8006b74:	2300      	movne	r3, #0
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	461a      	mov	r2, r3
 8006b7a:	79fb      	ldrb	r3, [r7, #7]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d0a0      	beq.n	8006ac2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
	...

08006b8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b097      	sub	sp, #92	@ 0x5c
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	4613      	mov	r3, r2
 8006b98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	88fa      	ldrh	r2, [r7, #6]
 8006ba4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	88fa      	ldrh	r2, [r7, #6]
 8006bac:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bbe:	d10e      	bne.n	8006bde <UART_Start_Receive_IT+0x52>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d105      	bne.n	8006bd4 <UART_Start_Receive_IT+0x48>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006bce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006bd2:	e02d      	b.n	8006c30 <UART_Start_Receive_IT+0xa4>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	22ff      	movs	r2, #255	@ 0xff
 8006bd8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006bdc:	e028      	b.n	8006c30 <UART_Start_Receive_IT+0xa4>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10d      	bne.n	8006c02 <UART_Start_Receive_IT+0x76>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d104      	bne.n	8006bf8 <UART_Start_Receive_IT+0x6c>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	22ff      	movs	r2, #255	@ 0xff
 8006bf2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006bf6:	e01b      	b.n	8006c30 <UART_Start_Receive_IT+0xa4>
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	227f      	movs	r2, #127	@ 0x7f
 8006bfc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006c00:	e016      	b.n	8006c30 <UART_Start_Receive_IT+0xa4>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c0a:	d10d      	bne.n	8006c28 <UART_Start_Receive_IT+0x9c>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d104      	bne.n	8006c1e <UART_Start_Receive_IT+0x92>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	227f      	movs	r2, #127	@ 0x7f
 8006c18:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006c1c:	e008      	b.n	8006c30 <UART_Start_Receive_IT+0xa4>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	223f      	movs	r2, #63	@ 0x3f
 8006c22:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006c26:	e003      	b.n	8006c30 <UART_Start_Receive_IT+0xa4>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2222      	movs	r2, #34	@ 0x22
 8006c3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	3308      	adds	r3, #8
 8006c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c4a:	e853 3f00 	ldrex	r3, [r3]
 8006c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c52:	f043 0301 	orr.w	r3, r3, #1
 8006c56:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	3308      	adds	r3, #8
 8006c5e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006c60:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006c62:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c64:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006c66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c68:	e841 2300 	strex	r3, r2, [r1]
 8006c6c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006c6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1e5      	bne.n	8006c40 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c7c:	d107      	bne.n	8006c8e <UART_Start_Receive_IT+0x102>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d103      	bne.n	8006c8e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	4a21      	ldr	r2, [pc, #132]	@ (8006d10 <UART_Start_Receive_IT+0x184>)
 8006c8a:	669a      	str	r2, [r3, #104]	@ 0x68
 8006c8c:	e002      	b.n	8006c94 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	4a20      	ldr	r2, [pc, #128]	@ (8006d14 <UART_Start_Receive_IT+0x188>)
 8006c92:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d019      	beq.n	8006cd0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca4:	e853 3f00 	ldrex	r3, [r3]
 8006ca8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cac:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006cb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cba:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cbc:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cbe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006cc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006cc2:	e841 2300 	strex	r3, r2, [r1]
 8006cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1e6      	bne.n	8006c9c <UART_Start_Receive_IT+0x110>
 8006cce:	e018      	b.n	8006d02 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	e853 3f00 	ldrex	r3, [r3]
 8006cdc:	613b      	str	r3, [r7, #16]
   return(result);
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	f043 0320 	orr.w	r3, r3, #32
 8006ce4:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	461a      	mov	r2, r3
 8006cec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cee:	623b      	str	r3, [r7, #32]
 8006cf0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf2:	69f9      	ldr	r1, [r7, #28]
 8006cf4:	6a3a      	ldr	r2, [r7, #32]
 8006cf6:	e841 2300 	strex	r3, r2, [r1]
 8006cfa:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1e6      	bne.n	8006cd0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	375c      	adds	r7, #92	@ 0x5c
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr
 8006d10:	08007009 	.word	0x08007009
 8006d14:	08006e61 	.word	0x08006e61

08006d18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b095      	sub	sp, #84	@ 0x54
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d28:	e853 3f00 	ldrex	r3, [r3]
 8006d2c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d40:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d46:	e841 2300 	strex	r3, r2, [r1]
 8006d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1e6      	bne.n	8006d20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	3308      	adds	r3, #8
 8006d58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5a:	6a3b      	ldr	r3, [r7, #32]
 8006d5c:	e853 3f00 	ldrex	r3, [r3]
 8006d60:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	f023 0301 	bic.w	r3, r3, #1
 8006d68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3308      	adds	r3, #8
 8006d70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d74:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d7a:	e841 2300 	strex	r3, r2, [r1]
 8006d7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1e5      	bne.n	8006d52 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d118      	bne.n	8006dc0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	e853 3f00 	ldrex	r3, [r3]
 8006d9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	f023 0310 	bic.w	r3, r3, #16
 8006da2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	461a      	mov	r2, r3
 8006daa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dac:	61bb      	str	r3, [r7, #24]
 8006dae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db0:	6979      	ldr	r1, [r7, #20]
 8006db2:	69ba      	ldr	r2, [r7, #24]
 8006db4:	e841 2300 	strex	r3, r2, [r1]
 8006db8:	613b      	str	r3, [r7, #16]
   return(result);
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1e6      	bne.n	8006d8e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006dd4:	bf00      	nop
 8006dd6:	3754      	adds	r7, #84	@ 0x54
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	f7ff fa88 	bl	8006314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e04:	bf00      	nop
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b088      	sub	sp, #32
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	e853 3f00 	ldrex	r3, [r3]
 8006e20:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e28:	61fb      	str	r3, [r7, #28]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	61bb      	str	r3, [r7, #24]
 8006e34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e36:	6979      	ldr	r1, [r7, #20]
 8006e38:	69ba      	ldr	r2, [r7, #24]
 8006e3a:	e841 2300 	strex	r3, r2, [r1]
 8006e3e:	613b      	str	r3, [r7, #16]
   return(result);
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1e6      	bne.n	8006e14 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2220      	movs	r2, #32
 8006e4a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7ff fa54 	bl	8006300 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e58:	bf00      	nop
 8006e5a:	3720      	adds	r7, #32
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b09c      	sub	sp, #112	@ 0x70
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e6e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e78:	2b22      	cmp	r3, #34	@ 0x22
 8006e7a:	f040 80b9 	bne.w	8006ff0 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e84:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006e88:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006e8c:	b2d9      	uxtb	r1, r3
 8006e8e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006e92:	b2da      	uxtb	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e98:	400a      	ands	r2, r1
 8006e9a:	b2d2      	uxtb	r2, r2
 8006e9c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ea2:	1c5a      	adds	r2, r3, #1
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f040 809c 	bne.w	8007000 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ece:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ed0:	e853 3f00 	ldrex	r3, [r3]
 8006ed4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ed6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ed8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006edc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ee6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ee8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006eec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006eee:	e841 2300 	strex	r3, r2, [r1]
 8006ef2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006ef4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1e6      	bne.n	8006ec8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	3308      	adds	r3, #8
 8006f00:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f04:	e853 3f00 	ldrex	r3, [r3]
 8006f08:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f0c:	f023 0301 	bic.w	r3, r3, #1
 8006f10:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	3308      	adds	r3, #8
 8006f18:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006f1a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006f1c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f22:	e841 2300 	strex	r3, r2, [r1]
 8006f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1e5      	bne.n	8006efa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2220      	movs	r2, #32
 8006f32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d018      	beq.n	8006f82 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f58:	e853 3f00 	ldrex	r3, [r3]
 8006f5c:	623b      	str	r3, [r7, #32]
   return(result);
 8006f5e:	6a3b      	ldr	r3, [r7, #32]
 8006f60:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006f64:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f70:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f76:	e841 2300 	strex	r3, r2, [r1]
 8006f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1e6      	bne.n	8006f50 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d12e      	bne.n	8006fe8 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	e853 3f00 	ldrex	r3, [r3]
 8006f9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f023 0310 	bic.w	r3, r3, #16
 8006fa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	461a      	mov	r2, r3
 8006fac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fae:	61fb      	str	r3, [r7, #28]
 8006fb0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb2:	69b9      	ldr	r1, [r7, #24]
 8006fb4:	69fa      	ldr	r2, [r7, #28]
 8006fb6:	e841 2300 	strex	r3, r2, [r1]
 8006fba:	617b      	str	r3, [r7, #20]
   return(result);
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1e6      	bne.n	8006f90 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	69db      	ldr	r3, [r3, #28]
 8006fc8:	f003 0310 	and.w	r3, r3, #16
 8006fcc:	2b10      	cmp	r3, #16
 8006fce:	d103      	bne.n	8006fd8 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2210      	movs	r2, #16
 8006fd6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006fde:	4619      	mov	r1, r3
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f7ff f9a1 	bl	8006328 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006fe6:	e00b      	b.n	8007000 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f7fa fd01 	bl	80019f0 <HAL_UART_RxCpltCallback>
}
 8006fee:	e007      	b.n	8007000 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	699a      	ldr	r2, [r3, #24]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f042 0208 	orr.w	r2, r2, #8
 8006ffe:	619a      	str	r2, [r3, #24]
}
 8007000:	bf00      	nop
 8007002:	3770      	adds	r7, #112	@ 0x70
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b09c      	sub	sp, #112	@ 0x70
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007016:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007020:	2b22      	cmp	r3, #34	@ 0x22
 8007022:	f040 80b9 	bne.w	8007198 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800702c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007034:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007036:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800703a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800703e:	4013      	ands	r3, r2
 8007040:	b29a      	uxth	r2, r3
 8007042:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007044:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800704a:	1c9a      	adds	r2, r3, #2
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007056:	b29b      	uxth	r3, r3
 8007058:	3b01      	subs	r3, #1
 800705a:	b29a      	uxth	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007068:	b29b      	uxth	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	f040 809c 	bne.w	80071a8 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007076:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007078:	e853 3f00 	ldrex	r3, [r3]
 800707c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800707e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007080:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007084:	667b      	str	r3, [r7, #100]	@ 0x64
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	461a      	mov	r2, r3
 800708c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800708e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007090:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007092:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007094:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007096:	e841 2300 	strex	r3, r2, [r1]
 800709a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800709c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1e6      	bne.n	8007070 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	3308      	adds	r3, #8
 80070a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ac:	e853 3f00 	ldrex	r3, [r3]
 80070b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b4:	f023 0301 	bic.w	r3, r3, #1
 80070b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	3308      	adds	r3, #8
 80070c0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80070c2:	643a      	str	r2, [r7, #64]	@ 0x40
 80070c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80070c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070ca:	e841 2300 	strex	r3, r2, [r1]
 80070ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1e5      	bne.n	80070a2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2220      	movs	r2, #32
 80070da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d018      	beq.n	800712a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fe:	6a3b      	ldr	r3, [r7, #32]
 8007100:	e853 3f00 	ldrex	r3, [r3]
 8007104:	61fb      	str	r3, [r7, #28]
   return(result);
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800710c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	461a      	mov	r2, r3
 8007114:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007116:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007118:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800711c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800711e:	e841 2300 	strex	r3, r2, [r1]
 8007122:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1e6      	bne.n	80070f8 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800712e:	2b01      	cmp	r3, #1
 8007130:	d12e      	bne.n	8007190 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	e853 3f00 	ldrex	r3, [r3]
 8007144:	60bb      	str	r3, [r7, #8]
   return(result);
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	f023 0310 	bic.w	r3, r3, #16
 800714c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	461a      	mov	r2, r3
 8007154:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007156:	61bb      	str	r3, [r7, #24]
 8007158:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715a:	6979      	ldr	r1, [r7, #20]
 800715c:	69ba      	ldr	r2, [r7, #24]
 800715e:	e841 2300 	strex	r3, r2, [r1]
 8007162:	613b      	str	r3, [r7, #16]
   return(result);
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1e6      	bne.n	8007138 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	69db      	ldr	r3, [r3, #28]
 8007170:	f003 0310 	and.w	r3, r3, #16
 8007174:	2b10      	cmp	r3, #16
 8007176:	d103      	bne.n	8007180 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2210      	movs	r2, #16
 800717e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007186:	4619      	mov	r1, r3
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f7ff f8cd 	bl	8006328 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800718e:	e00b      	b.n	80071a8 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f7fa fc2d 	bl	80019f0 <HAL_UART_RxCpltCallback>
}
 8007196:	e007      	b.n	80071a8 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	699a      	ldr	r2, [r3, #24]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f042 0208 	orr.w	r2, r2, #8
 80071a6:	619a      	str	r2, [r3, #24]
}
 80071a8:	bf00      	nop
 80071aa:	3770      	adds	r7, #112	@ 0x70
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80071b0:	b084      	sub	sp, #16
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b084      	sub	sp, #16
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
 80071ba:	f107 001c 	add.w	r0, r7, #28
 80071be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80071c2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d121      	bne.n	800720e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68da      	ldr	r2, [r3, #12]
 80071da:	4b21      	ldr	r3, [pc, #132]	@ (8007260 <USB_CoreInit+0xb0>)
 80071dc:	4013      	ands	r3, r2
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80071ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d105      	bne.n	8007202 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fa92 	bl	800772c <USB_CoreReset>
 8007208:	4603      	mov	r3, r0
 800720a:	73fb      	strb	r3, [r7, #15]
 800720c:	e010      	b.n	8007230 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 fa86 	bl	800772c <USB_CoreReset>
 8007220:	4603      	mov	r3, r0
 8007222:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007228:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8007230:	7fbb      	ldrb	r3, [r7, #30]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d10b      	bne.n	800724e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f043 0206 	orr.w	r2, r3, #6
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	f043 0220 	orr.w	r2, r3, #32
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800724e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800725a:	b004      	add	sp, #16
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	ffbdffbf 	.word	0xffbdffbf

08007264 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	f023 0201 	bic.w	r2, r3, #1
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	370c      	adds	r7, #12
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr

08007286 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b084      	sub	sp, #16
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
 800728e:	460b      	mov	r3, r1
 8007290:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007292:	2300      	movs	r3, #0
 8007294:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80072a2:	78fb      	ldrb	r3, [r7, #3]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d115      	bne.n	80072d4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80072b4:	200a      	movs	r0, #10
 80072b6:	f7fa ffe7 	bl	8002288 <HAL_Delay>
      ms += 10U;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	330a      	adds	r3, #10
 80072be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 fa25 	bl	8007710 <USB_GetMode>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d01e      	beq.n	800730a <USB_SetCurrentMode+0x84>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2bc7      	cmp	r3, #199	@ 0xc7
 80072d0:	d9f0      	bls.n	80072b4 <USB_SetCurrentMode+0x2e>
 80072d2:	e01a      	b.n	800730a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80072d4:	78fb      	ldrb	r3, [r7, #3]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d115      	bne.n	8007306 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80072e6:	200a      	movs	r0, #10
 80072e8:	f7fa ffce 	bl	8002288 <HAL_Delay>
      ms += 10U;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	330a      	adds	r3, #10
 80072f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 fa0c 	bl	8007710 <USB_GetMode>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d005      	beq.n	800730a <USB_SetCurrentMode+0x84>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2bc7      	cmp	r3, #199	@ 0xc7
 8007302:	d9f0      	bls.n	80072e6 <USB_SetCurrentMode+0x60>
 8007304:	e001      	b.n	800730a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e005      	b.n	8007316 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2bc8      	cmp	r3, #200	@ 0xc8
 800730e:	d101      	bne.n	8007314 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e000      	b.n	8007316 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
	...

08007320 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007320:	b084      	sub	sp, #16
 8007322:	b580      	push	{r7, lr}
 8007324:	b086      	sub	sp, #24
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800732e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007332:	2300      	movs	r3, #0
 8007334:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800733a:	2300      	movs	r3, #0
 800733c:	613b      	str	r3, [r7, #16]
 800733e:	e009      	b.n	8007354 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	3340      	adds	r3, #64	@ 0x40
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4413      	add	r3, r2
 800734a:	2200      	movs	r2, #0
 800734c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	3301      	adds	r3, #1
 8007352:	613b      	str	r3, [r7, #16]
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	2b0e      	cmp	r3, #14
 8007358:	d9f2      	bls.n	8007340 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800735a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800735e:	2b00      	cmp	r3, #0
 8007360:	d11c      	bne.n	800739c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007370:	f043 0302 	orr.w	r3, r3, #2
 8007374:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800737a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	601a      	str	r2, [r3, #0]
 800739a:	e005      	b.n	80073a8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073a0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80073ae:	461a      	mov	r2, r3
 80073b0:	2300      	movs	r3, #0
 80073b2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80073b4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d10d      	bne.n	80073d8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80073bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d104      	bne.n	80073ce <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80073c4:	2100      	movs	r1, #0
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f968 	bl	800769c <USB_SetDevSpeed>
 80073cc:	e008      	b.n	80073e0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80073ce:	2101      	movs	r1, #1
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 f963 	bl	800769c <USB_SetDevSpeed>
 80073d6:	e003      	b.n	80073e0 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80073d8:	2103      	movs	r1, #3
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f95e 	bl	800769c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80073e0:	2110      	movs	r1, #16
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 f8fa 	bl	80075dc <USB_FlushTxFifo>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d001      	beq.n	80073f2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 f924 	bl	8007640 <USB_FlushRxFifo>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d001      	beq.n	8007402 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007408:	461a      	mov	r2, r3
 800740a:	2300      	movs	r3, #0
 800740c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007414:	461a      	mov	r2, r3
 8007416:	2300      	movs	r3, #0
 8007418:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007420:	461a      	mov	r2, r3
 8007422:	2300      	movs	r3, #0
 8007424:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007426:	2300      	movs	r3, #0
 8007428:	613b      	str	r3, [r7, #16]
 800742a:	e043      	b.n	80074b4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	015a      	lsls	r2, r3, #5
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	4413      	add	r3, r2
 8007434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800743e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007442:	d118      	bne.n	8007476 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d10a      	bne.n	8007460 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	015a      	lsls	r2, r3, #5
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	4413      	add	r3, r2
 8007452:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007456:	461a      	mov	r2, r3
 8007458:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800745c:	6013      	str	r3, [r2, #0]
 800745e:	e013      	b.n	8007488 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	015a      	lsls	r2, r3, #5
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	4413      	add	r3, r2
 8007468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800746c:	461a      	mov	r2, r3
 800746e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007472:	6013      	str	r3, [r2, #0]
 8007474:	e008      	b.n	8007488 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	015a      	lsls	r2, r3, #5
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	4413      	add	r3, r2
 800747e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007482:	461a      	mov	r2, r3
 8007484:	2300      	movs	r3, #0
 8007486:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	015a      	lsls	r2, r3, #5
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	4413      	add	r3, r2
 8007490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007494:	461a      	mov	r2, r3
 8007496:	2300      	movs	r3, #0
 8007498:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	015a      	lsls	r2, r3, #5
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	4413      	add	r3, r2
 80074a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074a6:	461a      	mov	r2, r3
 80074a8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80074ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	3301      	adds	r3, #1
 80074b2:	613b      	str	r3, [r7, #16]
 80074b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80074b8:	461a      	mov	r2, r3
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	4293      	cmp	r3, r2
 80074be:	d3b5      	bcc.n	800742c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074c0:	2300      	movs	r3, #0
 80074c2:	613b      	str	r3, [r7, #16]
 80074c4:	e043      	b.n	800754e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	015a      	lsls	r2, r3, #5
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	4413      	add	r3, r2
 80074ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074dc:	d118      	bne.n	8007510 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d10a      	bne.n	80074fa <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	015a      	lsls	r2, r3, #5
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	4413      	add	r3, r2
 80074ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074f0:	461a      	mov	r2, r3
 80074f2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80074f6:	6013      	str	r3, [r2, #0]
 80074f8:	e013      	b.n	8007522 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	015a      	lsls	r2, r3, #5
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	4413      	add	r3, r2
 8007502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007506:	461a      	mov	r2, r3
 8007508:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800750c:	6013      	str	r3, [r2, #0]
 800750e:	e008      	b.n	8007522 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	015a      	lsls	r2, r3, #5
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	4413      	add	r3, r2
 8007518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800751c:	461a      	mov	r2, r3
 800751e:	2300      	movs	r3, #0
 8007520:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	015a      	lsls	r2, r3, #5
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	4413      	add	r3, r2
 800752a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800752e:	461a      	mov	r2, r3
 8007530:	2300      	movs	r3, #0
 8007532:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	015a      	lsls	r2, r3, #5
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	4413      	add	r3, r2
 800753c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007540:	461a      	mov	r2, r3
 8007542:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007546:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	3301      	adds	r3, #1
 800754c:	613b      	str	r3, [r7, #16]
 800754e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007552:	461a      	mov	r2, r3
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	4293      	cmp	r3, r2
 8007558:	d3b5      	bcc.n	80074c6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007568:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800756c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800757a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800757c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007580:	2b00      	cmp	r3, #0
 8007582:	d105      	bne.n	8007590 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	f043 0210 	orr.w	r2, r3, #16
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	699a      	ldr	r2, [r3, #24]
 8007594:	4b0f      	ldr	r3, [pc, #60]	@ (80075d4 <USB_DevInit+0x2b4>)
 8007596:	4313      	orrs	r3, r2
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800759c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d005      	beq.n	80075b0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	699b      	ldr	r3, [r3, #24]
 80075a8:	f043 0208 	orr.w	r2, r3, #8
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80075b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d105      	bne.n	80075c4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	699a      	ldr	r2, [r3, #24]
 80075bc:	4b06      	ldr	r3, [pc, #24]	@ (80075d8 <USB_DevInit+0x2b8>)
 80075be:	4313      	orrs	r3, r2
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80075c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3718      	adds	r7, #24
 80075ca:	46bd      	mov	sp, r7
 80075cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075d0:	b004      	add	sp, #16
 80075d2:	4770      	bx	lr
 80075d4:	803c3800 	.word	0x803c3800
 80075d8:	40000004 	.word	0x40000004

080075dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80075e6:	2300      	movs	r3, #0
 80075e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	3301      	adds	r3, #1
 80075ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075f6:	d901      	bls.n	80075fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e01b      	b.n	8007634 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	2b00      	cmp	r3, #0
 8007602:	daf2      	bge.n	80075ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007604:	2300      	movs	r3, #0
 8007606:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	019b      	lsls	r3, r3, #6
 800760c:	f043 0220 	orr.w	r2, r3, #32
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	3301      	adds	r3, #1
 8007618:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007620:	d901      	bls.n	8007626 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e006      	b.n	8007634 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	f003 0320 	and.w	r3, r3, #32
 800762e:	2b20      	cmp	r3, #32
 8007630:	d0f0      	beq.n	8007614 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3714      	adds	r7, #20
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007648:	2300      	movs	r3, #0
 800764a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	3301      	adds	r3, #1
 8007650:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007658:	d901      	bls.n	800765e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800765a:	2303      	movs	r3, #3
 800765c:	e018      	b.n	8007690 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	2b00      	cmp	r3, #0
 8007664:	daf2      	bge.n	800764c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007666:	2300      	movs	r3, #0
 8007668:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2210      	movs	r2, #16
 800766e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	3301      	adds	r3, #1
 8007674:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800767c:	d901      	bls.n	8007682 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e006      	b.n	8007690 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	f003 0310 	and.w	r3, r3, #16
 800768a:	2b10      	cmp	r3, #16
 800768c:	d0f0      	beq.n	8007670 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3714      	adds	r7, #20
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	460b      	mov	r3, r1
 80076a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	78fb      	ldrb	r3, [r7, #3]
 80076b6:	68f9      	ldr	r1, [r7, #12]
 80076b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80076bc:	4313      	orrs	r3, r2
 80076be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr

080076ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80076ce:	b480      	push	{r7}
 80076d0:	b085      	sub	sp, #20
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80076e8:	f023 0303 	bic.w	r3, r3, #3
 80076ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076fc:	f043 0302 	orr.w	r3, r3, #2
 8007700:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3714      	adds	r7, #20
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	695b      	ldr	r3, [r3, #20]
 800771c:	f003 0301 	and.w	r3, r3, #1
}
 8007720:	4618      	mov	r0, r3
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007734:	2300      	movs	r3, #0
 8007736:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	3301      	adds	r3, #1
 800773c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007744:	d901      	bls.n	800774a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e01b      	b.n	8007782 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	2b00      	cmp	r3, #0
 8007750:	daf2      	bge.n	8007738 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007752:	2300      	movs	r3, #0
 8007754:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	f043 0201 	orr.w	r2, r3, #1
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	3301      	adds	r3, #1
 8007766:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800776e:	d901      	bls.n	8007774 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007770:	2303      	movs	r3, #3
 8007772:	e006      	b.n	8007782 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	f003 0301 	and.w	r3, r3, #1
 800777c:	2b01      	cmp	r3, #1
 800777e:	d0f0      	beq.n	8007762 <USB_CoreReset+0x36>

  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3714      	adds	r7, #20
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <atoi>:
 800778e:	220a      	movs	r2, #10
 8007790:	2100      	movs	r1, #0
 8007792:	f000 be83 	b.w	800849c <strtol>

08007796 <sulp>:
 8007796:	b570      	push	{r4, r5, r6, lr}
 8007798:	4604      	mov	r4, r0
 800779a:	460d      	mov	r5, r1
 800779c:	4616      	mov	r6, r2
 800779e:	ec45 4b10 	vmov	d0, r4, r5
 80077a2:	f003 fc87 	bl	800b0b4 <__ulp>
 80077a6:	b17e      	cbz	r6, 80077c8 <sulp+0x32>
 80077a8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80077ac:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	dd09      	ble.n	80077c8 <sulp+0x32>
 80077b4:	051b      	lsls	r3, r3, #20
 80077b6:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80077ba:	2000      	movs	r0, #0
 80077bc:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80077c0:	ec41 0b17 	vmov	d7, r0, r1
 80077c4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80077c8:	bd70      	pop	{r4, r5, r6, pc}
 80077ca:	0000      	movs	r0, r0
 80077cc:	0000      	movs	r0, r0
	...

080077d0 <_strtod_l>:
 80077d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d4:	ed2d 8b0a 	vpush	{d8-d12}
 80077d8:	b097      	sub	sp, #92	@ 0x5c
 80077da:	4688      	mov	r8, r1
 80077dc:	920e      	str	r2, [sp, #56]	@ 0x38
 80077de:	2200      	movs	r2, #0
 80077e0:	9212      	str	r2, [sp, #72]	@ 0x48
 80077e2:	9005      	str	r0, [sp, #20]
 80077e4:	f04f 0a00 	mov.w	sl, #0
 80077e8:	f04f 0b00 	mov.w	fp, #0
 80077ec:	460a      	mov	r2, r1
 80077ee:	9211      	str	r2, [sp, #68]	@ 0x44
 80077f0:	7811      	ldrb	r1, [r2, #0]
 80077f2:	292b      	cmp	r1, #43	@ 0x2b
 80077f4:	d04c      	beq.n	8007890 <_strtod_l+0xc0>
 80077f6:	d839      	bhi.n	800786c <_strtod_l+0x9c>
 80077f8:	290d      	cmp	r1, #13
 80077fa:	d833      	bhi.n	8007864 <_strtod_l+0x94>
 80077fc:	2908      	cmp	r1, #8
 80077fe:	d833      	bhi.n	8007868 <_strtod_l+0x98>
 8007800:	2900      	cmp	r1, #0
 8007802:	d03c      	beq.n	800787e <_strtod_l+0xae>
 8007804:	2200      	movs	r2, #0
 8007806:	9208      	str	r2, [sp, #32]
 8007808:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800780a:	782a      	ldrb	r2, [r5, #0]
 800780c:	2a30      	cmp	r2, #48	@ 0x30
 800780e:	f040 80b5 	bne.w	800797c <_strtod_l+0x1ac>
 8007812:	786a      	ldrb	r2, [r5, #1]
 8007814:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007818:	2a58      	cmp	r2, #88	@ 0x58
 800781a:	d170      	bne.n	80078fe <_strtod_l+0x12e>
 800781c:	9302      	str	r3, [sp, #8]
 800781e:	9b08      	ldr	r3, [sp, #32]
 8007820:	9301      	str	r3, [sp, #4]
 8007822:	ab12      	add	r3, sp, #72	@ 0x48
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	4a8b      	ldr	r2, [pc, #556]	@ (8007a54 <_strtod_l+0x284>)
 8007828:	9805      	ldr	r0, [sp, #20]
 800782a:	ab13      	add	r3, sp, #76	@ 0x4c
 800782c:	a911      	add	r1, sp, #68	@ 0x44
 800782e:	f002 fd33 	bl	800a298 <__gethex>
 8007832:	f010 060f 	ands.w	r6, r0, #15
 8007836:	4604      	mov	r4, r0
 8007838:	d005      	beq.n	8007846 <_strtod_l+0x76>
 800783a:	2e06      	cmp	r6, #6
 800783c:	d12a      	bne.n	8007894 <_strtod_l+0xc4>
 800783e:	3501      	adds	r5, #1
 8007840:	2300      	movs	r3, #0
 8007842:	9511      	str	r5, [sp, #68]	@ 0x44
 8007844:	9308      	str	r3, [sp, #32]
 8007846:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007848:	2b00      	cmp	r3, #0
 800784a:	f040 852f 	bne.w	80082ac <_strtod_l+0xadc>
 800784e:	9b08      	ldr	r3, [sp, #32]
 8007850:	ec4b ab10 	vmov	d0, sl, fp
 8007854:	b1cb      	cbz	r3, 800788a <_strtod_l+0xba>
 8007856:	eeb1 0b40 	vneg.f64	d0, d0
 800785a:	b017      	add	sp, #92	@ 0x5c
 800785c:	ecbd 8b0a 	vpop	{d8-d12}
 8007860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007864:	2920      	cmp	r1, #32
 8007866:	d1cd      	bne.n	8007804 <_strtod_l+0x34>
 8007868:	3201      	adds	r2, #1
 800786a:	e7c0      	b.n	80077ee <_strtod_l+0x1e>
 800786c:	292d      	cmp	r1, #45	@ 0x2d
 800786e:	d1c9      	bne.n	8007804 <_strtod_l+0x34>
 8007870:	2101      	movs	r1, #1
 8007872:	9108      	str	r1, [sp, #32]
 8007874:	1c51      	adds	r1, r2, #1
 8007876:	9111      	str	r1, [sp, #68]	@ 0x44
 8007878:	7852      	ldrb	r2, [r2, #1]
 800787a:	2a00      	cmp	r2, #0
 800787c:	d1c4      	bne.n	8007808 <_strtod_l+0x38>
 800787e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007880:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8007884:	2b00      	cmp	r3, #0
 8007886:	f040 850f 	bne.w	80082a8 <_strtod_l+0xad8>
 800788a:	ec4b ab10 	vmov	d0, sl, fp
 800788e:	e7e4      	b.n	800785a <_strtod_l+0x8a>
 8007890:	2100      	movs	r1, #0
 8007892:	e7ee      	b.n	8007872 <_strtod_l+0xa2>
 8007894:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007896:	b13a      	cbz	r2, 80078a8 <_strtod_l+0xd8>
 8007898:	2135      	movs	r1, #53	@ 0x35
 800789a:	a814      	add	r0, sp, #80	@ 0x50
 800789c:	f003 fd01 	bl	800b2a2 <__copybits>
 80078a0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80078a2:	9805      	ldr	r0, [sp, #20]
 80078a4:	f003 f8d2 	bl	800aa4c <_Bfree>
 80078a8:	1e73      	subs	r3, r6, #1
 80078aa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80078ac:	2b04      	cmp	r3, #4
 80078ae:	d806      	bhi.n	80078be <_strtod_l+0xee>
 80078b0:	e8df f003 	tbb	[pc, r3]
 80078b4:	201d0314 	.word	0x201d0314
 80078b8:	14          	.byte	0x14
 80078b9:	00          	.byte	0x00
 80078ba:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 80078be:	05e3      	lsls	r3, r4, #23
 80078c0:	bf48      	it	mi
 80078c2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80078c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80078ca:	0d1b      	lsrs	r3, r3, #20
 80078cc:	051b      	lsls	r3, r3, #20
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1b9      	bne.n	8007846 <_strtod_l+0x76>
 80078d2:	f001 fe05 	bl	80094e0 <__errno>
 80078d6:	2322      	movs	r3, #34	@ 0x22
 80078d8:	6003      	str	r3, [r0, #0]
 80078da:	e7b4      	b.n	8007846 <_strtod_l+0x76>
 80078dc:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 80078e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80078e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80078e8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80078ec:	e7e7      	b.n	80078be <_strtod_l+0xee>
 80078ee:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8007a5c <_strtod_l+0x28c>
 80078f2:	e7e4      	b.n	80078be <_strtod_l+0xee>
 80078f4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80078f8:	f04f 3aff 	mov.w	sl, #4294967295
 80078fc:	e7df      	b.n	80078be <_strtod_l+0xee>
 80078fe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007900:	1c5a      	adds	r2, r3, #1
 8007902:	9211      	str	r2, [sp, #68]	@ 0x44
 8007904:	785b      	ldrb	r3, [r3, #1]
 8007906:	2b30      	cmp	r3, #48	@ 0x30
 8007908:	d0f9      	beq.n	80078fe <_strtod_l+0x12e>
 800790a:	2b00      	cmp	r3, #0
 800790c:	d09b      	beq.n	8007846 <_strtod_l+0x76>
 800790e:	2301      	movs	r3, #1
 8007910:	2600      	movs	r6, #0
 8007912:	9307      	str	r3, [sp, #28]
 8007914:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007916:	930a      	str	r3, [sp, #40]	@ 0x28
 8007918:	46b1      	mov	r9, r6
 800791a:	4635      	mov	r5, r6
 800791c:	220a      	movs	r2, #10
 800791e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8007920:	7804      	ldrb	r4, [r0, #0]
 8007922:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8007926:	b2d9      	uxtb	r1, r3
 8007928:	2909      	cmp	r1, #9
 800792a:	d929      	bls.n	8007980 <_strtod_l+0x1b0>
 800792c:	494a      	ldr	r1, [pc, #296]	@ (8007a58 <_strtod_l+0x288>)
 800792e:	2201      	movs	r2, #1
 8007930:	f001 fd63 	bl	80093fa <strncmp>
 8007934:	b378      	cbz	r0, 8007996 <_strtod_l+0x1c6>
 8007936:	2000      	movs	r0, #0
 8007938:	4622      	mov	r2, r4
 800793a:	462b      	mov	r3, r5
 800793c:	4607      	mov	r7, r0
 800793e:	9006      	str	r0, [sp, #24]
 8007940:	2a65      	cmp	r2, #101	@ 0x65
 8007942:	d001      	beq.n	8007948 <_strtod_l+0x178>
 8007944:	2a45      	cmp	r2, #69	@ 0x45
 8007946:	d117      	bne.n	8007978 <_strtod_l+0x1a8>
 8007948:	b91b      	cbnz	r3, 8007952 <_strtod_l+0x182>
 800794a:	9b07      	ldr	r3, [sp, #28]
 800794c:	4303      	orrs	r3, r0
 800794e:	d096      	beq.n	800787e <_strtod_l+0xae>
 8007950:	2300      	movs	r3, #0
 8007952:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8007956:	f108 0201 	add.w	r2, r8, #1
 800795a:	9211      	str	r2, [sp, #68]	@ 0x44
 800795c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007960:	2a2b      	cmp	r2, #43	@ 0x2b
 8007962:	d06b      	beq.n	8007a3c <_strtod_l+0x26c>
 8007964:	2a2d      	cmp	r2, #45	@ 0x2d
 8007966:	d071      	beq.n	8007a4c <_strtod_l+0x27c>
 8007968:	f04f 0e00 	mov.w	lr, #0
 800796c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8007970:	2c09      	cmp	r4, #9
 8007972:	d979      	bls.n	8007a68 <_strtod_l+0x298>
 8007974:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8007978:	2400      	movs	r4, #0
 800797a:	e094      	b.n	8007aa6 <_strtod_l+0x2d6>
 800797c:	2300      	movs	r3, #0
 800797e:	e7c7      	b.n	8007910 <_strtod_l+0x140>
 8007980:	2d08      	cmp	r5, #8
 8007982:	f100 0001 	add.w	r0, r0, #1
 8007986:	bfd4      	ite	le
 8007988:	fb02 3909 	mlale	r9, r2, r9, r3
 800798c:	fb02 3606 	mlagt	r6, r2, r6, r3
 8007990:	3501      	adds	r5, #1
 8007992:	9011      	str	r0, [sp, #68]	@ 0x44
 8007994:	e7c3      	b.n	800791e <_strtod_l+0x14e>
 8007996:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007998:	1c5a      	adds	r2, r3, #1
 800799a:	9211      	str	r2, [sp, #68]	@ 0x44
 800799c:	785a      	ldrb	r2, [r3, #1]
 800799e:	b375      	cbz	r5, 80079fe <_strtod_l+0x22e>
 80079a0:	4607      	mov	r7, r0
 80079a2:	462b      	mov	r3, r5
 80079a4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80079a8:	2909      	cmp	r1, #9
 80079aa:	d913      	bls.n	80079d4 <_strtod_l+0x204>
 80079ac:	2101      	movs	r1, #1
 80079ae:	9106      	str	r1, [sp, #24]
 80079b0:	e7c6      	b.n	8007940 <_strtod_l+0x170>
 80079b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80079b4:	1c5a      	adds	r2, r3, #1
 80079b6:	9211      	str	r2, [sp, #68]	@ 0x44
 80079b8:	785a      	ldrb	r2, [r3, #1]
 80079ba:	3001      	adds	r0, #1
 80079bc:	2a30      	cmp	r2, #48	@ 0x30
 80079be:	d0f8      	beq.n	80079b2 <_strtod_l+0x1e2>
 80079c0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80079c4:	2b08      	cmp	r3, #8
 80079c6:	f200 8476 	bhi.w	80082b6 <_strtod_l+0xae6>
 80079ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80079cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80079ce:	4607      	mov	r7, r0
 80079d0:	2000      	movs	r0, #0
 80079d2:	4603      	mov	r3, r0
 80079d4:	3a30      	subs	r2, #48	@ 0x30
 80079d6:	f100 0101 	add.w	r1, r0, #1
 80079da:	d023      	beq.n	8007a24 <_strtod_l+0x254>
 80079dc:	440f      	add	r7, r1
 80079de:	eb00 0c03 	add.w	ip, r0, r3
 80079e2:	4619      	mov	r1, r3
 80079e4:	240a      	movs	r4, #10
 80079e6:	4561      	cmp	r1, ip
 80079e8:	d10b      	bne.n	8007a02 <_strtod_l+0x232>
 80079ea:	1c5c      	adds	r4, r3, #1
 80079ec:	4403      	add	r3, r0
 80079ee:	2b08      	cmp	r3, #8
 80079f0:	4404      	add	r4, r0
 80079f2:	dc11      	bgt.n	8007a18 <_strtod_l+0x248>
 80079f4:	230a      	movs	r3, #10
 80079f6:	fb03 2909 	mla	r9, r3, r9, r2
 80079fa:	2100      	movs	r1, #0
 80079fc:	e013      	b.n	8007a26 <_strtod_l+0x256>
 80079fe:	4628      	mov	r0, r5
 8007a00:	e7dc      	b.n	80079bc <_strtod_l+0x1ec>
 8007a02:	2908      	cmp	r1, #8
 8007a04:	f101 0101 	add.w	r1, r1, #1
 8007a08:	dc02      	bgt.n	8007a10 <_strtod_l+0x240>
 8007a0a:	fb04 f909 	mul.w	r9, r4, r9
 8007a0e:	e7ea      	b.n	80079e6 <_strtod_l+0x216>
 8007a10:	2910      	cmp	r1, #16
 8007a12:	bfd8      	it	le
 8007a14:	4366      	mulle	r6, r4
 8007a16:	e7e6      	b.n	80079e6 <_strtod_l+0x216>
 8007a18:	2b0f      	cmp	r3, #15
 8007a1a:	dcee      	bgt.n	80079fa <_strtod_l+0x22a>
 8007a1c:	230a      	movs	r3, #10
 8007a1e:	fb03 2606 	mla	r6, r3, r6, r2
 8007a22:	e7ea      	b.n	80079fa <_strtod_l+0x22a>
 8007a24:	461c      	mov	r4, r3
 8007a26:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007a28:	1c5a      	adds	r2, r3, #1
 8007a2a:	9211      	str	r2, [sp, #68]	@ 0x44
 8007a2c:	785a      	ldrb	r2, [r3, #1]
 8007a2e:	4608      	mov	r0, r1
 8007a30:	4623      	mov	r3, r4
 8007a32:	e7b7      	b.n	80079a4 <_strtod_l+0x1d4>
 8007a34:	2301      	movs	r3, #1
 8007a36:	2700      	movs	r7, #0
 8007a38:	9306      	str	r3, [sp, #24]
 8007a3a:	e786      	b.n	800794a <_strtod_l+0x17a>
 8007a3c:	f04f 0e00 	mov.w	lr, #0
 8007a40:	f108 0202 	add.w	r2, r8, #2
 8007a44:	9211      	str	r2, [sp, #68]	@ 0x44
 8007a46:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007a4a:	e78f      	b.n	800796c <_strtod_l+0x19c>
 8007a4c:	f04f 0e01 	mov.w	lr, #1
 8007a50:	e7f6      	b.n	8007a40 <_strtod_l+0x270>
 8007a52:	bf00      	nop
 8007a54:	0800be70 	.word	0x0800be70
 8007a58:	0800be58 	.word	0x0800be58
 8007a5c:	7ff00000 	.word	0x7ff00000
 8007a60:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007a62:	1c54      	adds	r4, r2, #1
 8007a64:	9411      	str	r4, [sp, #68]	@ 0x44
 8007a66:	7852      	ldrb	r2, [r2, #1]
 8007a68:	2a30      	cmp	r2, #48	@ 0x30
 8007a6a:	d0f9      	beq.n	8007a60 <_strtod_l+0x290>
 8007a6c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8007a70:	2c08      	cmp	r4, #8
 8007a72:	d881      	bhi.n	8007978 <_strtod_l+0x1a8>
 8007a74:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8007a78:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007a7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a7c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007a7e:	1c51      	adds	r1, r2, #1
 8007a80:	9111      	str	r1, [sp, #68]	@ 0x44
 8007a82:	7852      	ldrb	r2, [r2, #1]
 8007a84:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8007a88:	2c09      	cmp	r4, #9
 8007a8a:	d938      	bls.n	8007afe <_strtod_l+0x32e>
 8007a8c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8007a8e:	1b0c      	subs	r4, r1, r4
 8007a90:	2c08      	cmp	r4, #8
 8007a92:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8007a96:	dc02      	bgt.n	8007a9e <_strtod_l+0x2ce>
 8007a98:	4564      	cmp	r4, ip
 8007a9a:	bfa8      	it	ge
 8007a9c:	4664      	movge	r4, ip
 8007a9e:	f1be 0f00 	cmp.w	lr, #0
 8007aa2:	d000      	beq.n	8007aa6 <_strtod_l+0x2d6>
 8007aa4:	4264      	negs	r4, r4
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d14e      	bne.n	8007b48 <_strtod_l+0x378>
 8007aaa:	9b07      	ldr	r3, [sp, #28]
 8007aac:	4318      	orrs	r0, r3
 8007aae:	f47f aeca 	bne.w	8007846 <_strtod_l+0x76>
 8007ab2:	9b06      	ldr	r3, [sp, #24]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f47f aee2 	bne.w	800787e <_strtod_l+0xae>
 8007aba:	2a69      	cmp	r2, #105	@ 0x69
 8007abc:	d027      	beq.n	8007b0e <_strtod_l+0x33e>
 8007abe:	dc24      	bgt.n	8007b0a <_strtod_l+0x33a>
 8007ac0:	2a49      	cmp	r2, #73	@ 0x49
 8007ac2:	d024      	beq.n	8007b0e <_strtod_l+0x33e>
 8007ac4:	2a4e      	cmp	r2, #78	@ 0x4e
 8007ac6:	f47f aeda 	bne.w	800787e <_strtod_l+0xae>
 8007aca:	4997      	ldr	r1, [pc, #604]	@ (8007d28 <_strtod_l+0x558>)
 8007acc:	a811      	add	r0, sp, #68	@ 0x44
 8007ace:	f002 fe05 	bl	800a6dc <__match>
 8007ad2:	2800      	cmp	r0, #0
 8007ad4:	f43f aed3 	beq.w	800787e <_strtod_l+0xae>
 8007ad8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	2b28      	cmp	r3, #40	@ 0x28
 8007ade:	d12d      	bne.n	8007b3c <_strtod_l+0x36c>
 8007ae0:	4992      	ldr	r1, [pc, #584]	@ (8007d2c <_strtod_l+0x55c>)
 8007ae2:	aa14      	add	r2, sp, #80	@ 0x50
 8007ae4:	a811      	add	r0, sp, #68	@ 0x44
 8007ae6:	f002 fe0d 	bl	800a704 <__hexnan>
 8007aea:	2805      	cmp	r0, #5
 8007aec:	d126      	bne.n	8007b3c <_strtod_l+0x36c>
 8007aee:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007af0:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8007af4:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007af8:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007afc:	e6a3      	b.n	8007846 <_strtod_l+0x76>
 8007afe:	240a      	movs	r4, #10
 8007b00:	fb04 2c0c 	mla	ip, r4, ip, r2
 8007b04:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8007b08:	e7b8      	b.n	8007a7c <_strtod_l+0x2ac>
 8007b0a:	2a6e      	cmp	r2, #110	@ 0x6e
 8007b0c:	e7db      	b.n	8007ac6 <_strtod_l+0x2f6>
 8007b0e:	4988      	ldr	r1, [pc, #544]	@ (8007d30 <_strtod_l+0x560>)
 8007b10:	a811      	add	r0, sp, #68	@ 0x44
 8007b12:	f002 fde3 	bl	800a6dc <__match>
 8007b16:	2800      	cmp	r0, #0
 8007b18:	f43f aeb1 	beq.w	800787e <_strtod_l+0xae>
 8007b1c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007b1e:	4985      	ldr	r1, [pc, #532]	@ (8007d34 <_strtod_l+0x564>)
 8007b20:	3b01      	subs	r3, #1
 8007b22:	a811      	add	r0, sp, #68	@ 0x44
 8007b24:	9311      	str	r3, [sp, #68]	@ 0x44
 8007b26:	f002 fdd9 	bl	800a6dc <__match>
 8007b2a:	b910      	cbnz	r0, 8007b32 <_strtod_l+0x362>
 8007b2c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007b2e:	3301      	adds	r3, #1
 8007b30:	9311      	str	r3, [sp, #68]	@ 0x44
 8007b32:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8007d48 <_strtod_l+0x578>
 8007b36:	f04f 0a00 	mov.w	sl, #0
 8007b3a:	e684      	b.n	8007846 <_strtod_l+0x76>
 8007b3c:	487e      	ldr	r0, [pc, #504]	@ (8007d38 <_strtod_l+0x568>)
 8007b3e:	f001 fd0b 	bl	8009558 <nan>
 8007b42:	ec5b ab10 	vmov	sl, fp, d0
 8007b46:	e67e      	b.n	8007846 <_strtod_l+0x76>
 8007b48:	ee07 9a90 	vmov	s15, r9
 8007b4c:	1be2      	subs	r2, r4, r7
 8007b4e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007b52:	2d00      	cmp	r5, #0
 8007b54:	bf08      	it	eq
 8007b56:	461d      	moveq	r5, r3
 8007b58:	2b10      	cmp	r3, #16
 8007b5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	bfa8      	it	ge
 8007b60:	2210      	movge	r2, #16
 8007b62:	2b09      	cmp	r3, #9
 8007b64:	ec5b ab17 	vmov	sl, fp, d7
 8007b68:	dc15      	bgt.n	8007b96 <_strtod_l+0x3c6>
 8007b6a:	1be1      	subs	r1, r4, r7
 8007b6c:	2900      	cmp	r1, #0
 8007b6e:	f43f ae6a 	beq.w	8007846 <_strtod_l+0x76>
 8007b72:	eba4 0107 	sub.w	r1, r4, r7
 8007b76:	dd72      	ble.n	8007c5e <_strtod_l+0x48e>
 8007b78:	2916      	cmp	r1, #22
 8007b7a:	dc59      	bgt.n	8007c30 <_strtod_l+0x460>
 8007b7c:	4b6f      	ldr	r3, [pc, #444]	@ (8007d3c <_strtod_l+0x56c>)
 8007b7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b84:	ed93 7b00 	vldr	d7, [r3]
 8007b88:	ec4b ab16 	vmov	d6, sl, fp
 8007b8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007b90:	ec5b ab17 	vmov	sl, fp, d7
 8007b94:	e657      	b.n	8007846 <_strtod_l+0x76>
 8007b96:	4969      	ldr	r1, [pc, #420]	@ (8007d3c <_strtod_l+0x56c>)
 8007b98:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8007b9c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8007ba0:	ee06 6a90 	vmov	s13, r6
 8007ba4:	2b0f      	cmp	r3, #15
 8007ba6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8007baa:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007bae:	ec5b ab16 	vmov	sl, fp, d6
 8007bb2:	ddda      	ble.n	8007b6a <_strtod_l+0x39a>
 8007bb4:	1a9a      	subs	r2, r3, r2
 8007bb6:	1be1      	subs	r1, r4, r7
 8007bb8:	440a      	add	r2, r1
 8007bba:	2a00      	cmp	r2, #0
 8007bbc:	f340 8094 	ble.w	8007ce8 <_strtod_l+0x518>
 8007bc0:	f012 000f 	ands.w	r0, r2, #15
 8007bc4:	d00a      	beq.n	8007bdc <_strtod_l+0x40c>
 8007bc6:	495d      	ldr	r1, [pc, #372]	@ (8007d3c <_strtod_l+0x56c>)
 8007bc8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007bcc:	ed91 7b00 	vldr	d7, [r1]
 8007bd0:	ec4b ab16 	vmov	d6, sl, fp
 8007bd4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007bd8:	ec5b ab17 	vmov	sl, fp, d7
 8007bdc:	f032 020f 	bics.w	r2, r2, #15
 8007be0:	d073      	beq.n	8007cca <_strtod_l+0x4fa>
 8007be2:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8007be6:	dd47      	ble.n	8007c78 <_strtod_l+0x4a8>
 8007be8:	2400      	movs	r4, #0
 8007bea:	4625      	mov	r5, r4
 8007bec:	9407      	str	r4, [sp, #28]
 8007bee:	4626      	mov	r6, r4
 8007bf0:	9a05      	ldr	r2, [sp, #20]
 8007bf2:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007d48 <_strtod_l+0x578>
 8007bf6:	2322      	movs	r3, #34	@ 0x22
 8007bf8:	6013      	str	r3, [r2, #0]
 8007bfa:	f04f 0a00 	mov.w	sl, #0
 8007bfe:	9b07      	ldr	r3, [sp, #28]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f43f ae20 	beq.w	8007846 <_strtod_l+0x76>
 8007c06:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8007c08:	9805      	ldr	r0, [sp, #20]
 8007c0a:	f002 ff1f 	bl	800aa4c <_Bfree>
 8007c0e:	9805      	ldr	r0, [sp, #20]
 8007c10:	4631      	mov	r1, r6
 8007c12:	f002 ff1b 	bl	800aa4c <_Bfree>
 8007c16:	9805      	ldr	r0, [sp, #20]
 8007c18:	4629      	mov	r1, r5
 8007c1a:	f002 ff17 	bl	800aa4c <_Bfree>
 8007c1e:	9907      	ldr	r1, [sp, #28]
 8007c20:	9805      	ldr	r0, [sp, #20]
 8007c22:	f002 ff13 	bl	800aa4c <_Bfree>
 8007c26:	9805      	ldr	r0, [sp, #20]
 8007c28:	4621      	mov	r1, r4
 8007c2a:	f002 ff0f 	bl	800aa4c <_Bfree>
 8007c2e:	e60a      	b.n	8007846 <_strtod_l+0x76>
 8007c30:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8007c34:	1be0      	subs	r0, r4, r7
 8007c36:	4281      	cmp	r1, r0
 8007c38:	dbbc      	blt.n	8007bb4 <_strtod_l+0x3e4>
 8007c3a:	4a40      	ldr	r2, [pc, #256]	@ (8007d3c <_strtod_l+0x56c>)
 8007c3c:	f1c3 030f 	rsb	r3, r3, #15
 8007c40:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8007c44:	ed91 7b00 	vldr	d7, [r1]
 8007c48:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c4a:	ec4b ab16 	vmov	d6, sl, fp
 8007c4e:	1acb      	subs	r3, r1, r3
 8007c50:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8007c54:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007c58:	ed92 6b00 	vldr	d6, [r2]
 8007c5c:	e796      	b.n	8007b8c <_strtod_l+0x3bc>
 8007c5e:	3116      	adds	r1, #22
 8007c60:	dba8      	blt.n	8007bb4 <_strtod_l+0x3e4>
 8007c62:	4b36      	ldr	r3, [pc, #216]	@ (8007d3c <_strtod_l+0x56c>)
 8007c64:	1b3c      	subs	r4, r7, r4
 8007c66:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8007c6a:	ed94 7b00 	vldr	d7, [r4]
 8007c6e:	ec4b ab16 	vmov	d6, sl, fp
 8007c72:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007c76:	e78b      	b.n	8007b90 <_strtod_l+0x3c0>
 8007c78:	2000      	movs	r0, #0
 8007c7a:	ec4b ab17 	vmov	d7, sl, fp
 8007c7e:	4e30      	ldr	r6, [pc, #192]	@ (8007d40 <_strtod_l+0x570>)
 8007c80:	1112      	asrs	r2, r2, #4
 8007c82:	4601      	mov	r1, r0
 8007c84:	2a01      	cmp	r2, #1
 8007c86:	dc23      	bgt.n	8007cd0 <_strtod_l+0x500>
 8007c88:	b108      	cbz	r0, 8007c8e <_strtod_l+0x4be>
 8007c8a:	ec5b ab17 	vmov	sl, fp, d7
 8007c8e:	4a2c      	ldr	r2, [pc, #176]	@ (8007d40 <_strtod_l+0x570>)
 8007c90:	482c      	ldr	r0, [pc, #176]	@ (8007d44 <_strtod_l+0x574>)
 8007c92:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007c96:	ed92 7b00 	vldr	d7, [r2]
 8007c9a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007c9e:	ec4b ab16 	vmov	d6, sl, fp
 8007ca2:	4a29      	ldr	r2, [pc, #164]	@ (8007d48 <_strtod_l+0x578>)
 8007ca4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007ca8:	ee17 1a90 	vmov	r1, s15
 8007cac:	400a      	ands	r2, r1
 8007cae:	4282      	cmp	r2, r0
 8007cb0:	ec5b ab17 	vmov	sl, fp, d7
 8007cb4:	d898      	bhi.n	8007be8 <_strtod_l+0x418>
 8007cb6:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8007cba:	4282      	cmp	r2, r0
 8007cbc:	bf86      	itte	hi
 8007cbe:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8007d4c <_strtod_l+0x57c>
 8007cc2:	f04f 3aff 	movhi.w	sl, #4294967295
 8007cc6:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8007cca:	2200      	movs	r2, #0
 8007ccc:	9206      	str	r2, [sp, #24]
 8007cce:	e076      	b.n	8007dbe <_strtod_l+0x5ee>
 8007cd0:	f012 0f01 	tst.w	r2, #1
 8007cd4:	d004      	beq.n	8007ce0 <_strtod_l+0x510>
 8007cd6:	ed96 6b00 	vldr	d6, [r6]
 8007cda:	2001      	movs	r0, #1
 8007cdc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007ce0:	3101      	adds	r1, #1
 8007ce2:	1052      	asrs	r2, r2, #1
 8007ce4:	3608      	adds	r6, #8
 8007ce6:	e7cd      	b.n	8007c84 <_strtod_l+0x4b4>
 8007ce8:	d0ef      	beq.n	8007cca <_strtod_l+0x4fa>
 8007cea:	4252      	negs	r2, r2
 8007cec:	f012 000f 	ands.w	r0, r2, #15
 8007cf0:	d00a      	beq.n	8007d08 <_strtod_l+0x538>
 8007cf2:	4912      	ldr	r1, [pc, #72]	@ (8007d3c <_strtod_l+0x56c>)
 8007cf4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007cf8:	ed91 7b00 	vldr	d7, [r1]
 8007cfc:	ec4b ab16 	vmov	d6, sl, fp
 8007d00:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007d04:	ec5b ab17 	vmov	sl, fp, d7
 8007d08:	1112      	asrs	r2, r2, #4
 8007d0a:	d0de      	beq.n	8007cca <_strtod_l+0x4fa>
 8007d0c:	2a1f      	cmp	r2, #31
 8007d0e:	dd1f      	ble.n	8007d50 <_strtod_l+0x580>
 8007d10:	2400      	movs	r4, #0
 8007d12:	4625      	mov	r5, r4
 8007d14:	9407      	str	r4, [sp, #28]
 8007d16:	4626      	mov	r6, r4
 8007d18:	9a05      	ldr	r2, [sp, #20]
 8007d1a:	2322      	movs	r3, #34	@ 0x22
 8007d1c:	f04f 0a00 	mov.w	sl, #0
 8007d20:	f04f 0b00 	mov.w	fp, #0
 8007d24:	6013      	str	r3, [r2, #0]
 8007d26:	e76a      	b.n	8007bfe <_strtod_l+0x42e>
 8007d28:	0800bfbe 	.word	0x0800bfbe
 8007d2c:	0800be5c 	.word	0x0800be5c
 8007d30:	0800bfb6 	.word	0x0800bfb6
 8007d34:	0800bff5 	.word	0x0800bff5
 8007d38:	0800c284 	.word	0x0800c284
 8007d3c:	0800c170 	.word	0x0800c170
 8007d40:	0800c148 	.word	0x0800c148
 8007d44:	7ca00000 	.word	0x7ca00000
 8007d48:	7ff00000 	.word	0x7ff00000
 8007d4c:	7fefffff 	.word	0x7fefffff
 8007d50:	f012 0110 	ands.w	r1, r2, #16
 8007d54:	bf18      	it	ne
 8007d56:	216a      	movne	r1, #106	@ 0x6a
 8007d58:	9106      	str	r1, [sp, #24]
 8007d5a:	ec4b ab17 	vmov	d7, sl, fp
 8007d5e:	49b0      	ldr	r1, [pc, #704]	@ (8008020 <_strtod_l+0x850>)
 8007d60:	2000      	movs	r0, #0
 8007d62:	07d6      	lsls	r6, r2, #31
 8007d64:	d504      	bpl.n	8007d70 <_strtod_l+0x5a0>
 8007d66:	ed91 6b00 	vldr	d6, [r1]
 8007d6a:	2001      	movs	r0, #1
 8007d6c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007d70:	1052      	asrs	r2, r2, #1
 8007d72:	f101 0108 	add.w	r1, r1, #8
 8007d76:	d1f4      	bne.n	8007d62 <_strtod_l+0x592>
 8007d78:	b108      	cbz	r0, 8007d7e <_strtod_l+0x5ae>
 8007d7a:	ec5b ab17 	vmov	sl, fp, d7
 8007d7e:	9a06      	ldr	r2, [sp, #24]
 8007d80:	b1b2      	cbz	r2, 8007db0 <_strtod_l+0x5e0>
 8007d82:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8007d86:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8007d8a:	2a00      	cmp	r2, #0
 8007d8c:	4658      	mov	r0, fp
 8007d8e:	dd0f      	ble.n	8007db0 <_strtod_l+0x5e0>
 8007d90:	2a1f      	cmp	r2, #31
 8007d92:	dd55      	ble.n	8007e40 <_strtod_l+0x670>
 8007d94:	2a34      	cmp	r2, #52	@ 0x34
 8007d96:	bfde      	ittt	le
 8007d98:	f04f 32ff 	movle.w	r2, #4294967295
 8007d9c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8007da0:	408a      	lslle	r2, r1
 8007da2:	f04f 0a00 	mov.w	sl, #0
 8007da6:	bfcc      	ite	gt
 8007da8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007dac:	ea02 0b00 	andle.w	fp, r2, r0
 8007db0:	ec4b ab17 	vmov	d7, sl, fp
 8007db4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dbc:	d0a8      	beq.n	8007d10 <_strtod_l+0x540>
 8007dbe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007dc0:	9805      	ldr	r0, [sp, #20]
 8007dc2:	f8cd 9000 	str.w	r9, [sp]
 8007dc6:	462a      	mov	r2, r5
 8007dc8:	f002 fea8 	bl	800ab1c <__s2b>
 8007dcc:	9007      	str	r0, [sp, #28]
 8007dce:	2800      	cmp	r0, #0
 8007dd0:	f43f af0a 	beq.w	8007be8 <_strtod_l+0x418>
 8007dd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dd6:	1b3f      	subs	r7, r7, r4
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	bfb4      	ite	lt
 8007ddc:	463b      	movlt	r3, r7
 8007dde:	2300      	movge	r3, #0
 8007de0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007de2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007de4:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8008010 <_strtod_l+0x840>
 8007de8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007dec:	2400      	movs	r4, #0
 8007dee:	930d      	str	r3, [sp, #52]	@ 0x34
 8007df0:	4625      	mov	r5, r4
 8007df2:	9b07      	ldr	r3, [sp, #28]
 8007df4:	9805      	ldr	r0, [sp, #20]
 8007df6:	6859      	ldr	r1, [r3, #4]
 8007df8:	f002 fde8 	bl	800a9cc <_Balloc>
 8007dfc:	4606      	mov	r6, r0
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	f43f aef6 	beq.w	8007bf0 <_strtod_l+0x420>
 8007e04:	9b07      	ldr	r3, [sp, #28]
 8007e06:	691a      	ldr	r2, [r3, #16]
 8007e08:	ec4b ab19 	vmov	d9, sl, fp
 8007e0c:	3202      	adds	r2, #2
 8007e0e:	f103 010c 	add.w	r1, r3, #12
 8007e12:	0092      	lsls	r2, r2, #2
 8007e14:	300c      	adds	r0, #12
 8007e16:	f001 fb90 	bl	800953a <memcpy>
 8007e1a:	eeb0 0b49 	vmov.f64	d0, d9
 8007e1e:	9805      	ldr	r0, [sp, #20]
 8007e20:	aa14      	add	r2, sp, #80	@ 0x50
 8007e22:	a913      	add	r1, sp, #76	@ 0x4c
 8007e24:	f003 f9b6 	bl	800b194 <__d2b>
 8007e28:	9012      	str	r0, [sp, #72]	@ 0x48
 8007e2a:	2800      	cmp	r0, #0
 8007e2c:	f43f aee0 	beq.w	8007bf0 <_strtod_l+0x420>
 8007e30:	9805      	ldr	r0, [sp, #20]
 8007e32:	2101      	movs	r1, #1
 8007e34:	f002 ff08 	bl	800ac48 <__i2b>
 8007e38:	4605      	mov	r5, r0
 8007e3a:	b940      	cbnz	r0, 8007e4e <_strtod_l+0x67e>
 8007e3c:	2500      	movs	r5, #0
 8007e3e:	e6d7      	b.n	8007bf0 <_strtod_l+0x420>
 8007e40:	f04f 31ff 	mov.w	r1, #4294967295
 8007e44:	fa01 f202 	lsl.w	r2, r1, r2
 8007e48:	ea02 0a0a 	and.w	sl, r2, sl
 8007e4c:	e7b0      	b.n	8007db0 <_strtod_l+0x5e0>
 8007e4e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8007e50:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007e52:	2f00      	cmp	r7, #0
 8007e54:	bfab      	itete	ge
 8007e56:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8007e58:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8007e5a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8007e5e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8007e62:	bfac      	ite	ge
 8007e64:	eb07 0903 	addge.w	r9, r7, r3
 8007e68:	eba3 0807 	sublt.w	r8, r3, r7
 8007e6c:	9b06      	ldr	r3, [sp, #24]
 8007e6e:	1aff      	subs	r7, r7, r3
 8007e70:	4417      	add	r7, r2
 8007e72:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8007e76:	4a6b      	ldr	r2, [pc, #428]	@ (8008024 <_strtod_l+0x854>)
 8007e78:	3f01      	subs	r7, #1
 8007e7a:	4297      	cmp	r7, r2
 8007e7c:	da51      	bge.n	8007f22 <_strtod_l+0x752>
 8007e7e:	1bd1      	subs	r1, r2, r7
 8007e80:	291f      	cmp	r1, #31
 8007e82:	eba3 0301 	sub.w	r3, r3, r1
 8007e86:	f04f 0201 	mov.w	r2, #1
 8007e8a:	dc3e      	bgt.n	8007f0a <_strtod_l+0x73a>
 8007e8c:	408a      	lsls	r2, r1
 8007e8e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007e90:	2200      	movs	r2, #0
 8007e92:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007e94:	eb09 0703 	add.w	r7, r9, r3
 8007e98:	4498      	add	r8, r3
 8007e9a:	9b06      	ldr	r3, [sp, #24]
 8007e9c:	45b9      	cmp	r9, r7
 8007e9e:	4498      	add	r8, r3
 8007ea0:	464b      	mov	r3, r9
 8007ea2:	bfa8      	it	ge
 8007ea4:	463b      	movge	r3, r7
 8007ea6:	4543      	cmp	r3, r8
 8007ea8:	bfa8      	it	ge
 8007eaa:	4643      	movge	r3, r8
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	bfc2      	ittt	gt
 8007eb0:	1aff      	subgt	r7, r7, r3
 8007eb2:	eba8 0803 	subgt.w	r8, r8, r3
 8007eb6:	eba9 0903 	subgt.w	r9, r9, r3
 8007eba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	dd16      	ble.n	8007eee <_strtod_l+0x71e>
 8007ec0:	4629      	mov	r1, r5
 8007ec2:	9805      	ldr	r0, [sp, #20]
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	f002 ff7f 	bl	800adc8 <__pow5mult>
 8007eca:	4605      	mov	r5, r0
 8007ecc:	2800      	cmp	r0, #0
 8007ece:	d0b5      	beq.n	8007e3c <_strtod_l+0x66c>
 8007ed0:	4601      	mov	r1, r0
 8007ed2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007ed4:	9805      	ldr	r0, [sp, #20]
 8007ed6:	f002 fecd 	bl	800ac74 <__multiply>
 8007eda:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007edc:	2800      	cmp	r0, #0
 8007ede:	f43f ae87 	beq.w	8007bf0 <_strtod_l+0x420>
 8007ee2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8007ee4:	9805      	ldr	r0, [sp, #20]
 8007ee6:	f002 fdb1 	bl	800aa4c <_Bfree>
 8007eea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007eec:	9312      	str	r3, [sp, #72]	@ 0x48
 8007eee:	2f00      	cmp	r7, #0
 8007ef0:	dc1b      	bgt.n	8007f2a <_strtod_l+0x75a>
 8007ef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	dd21      	ble.n	8007f3c <_strtod_l+0x76c>
 8007ef8:	4631      	mov	r1, r6
 8007efa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007efc:	9805      	ldr	r0, [sp, #20]
 8007efe:	f002 ff63 	bl	800adc8 <__pow5mult>
 8007f02:	4606      	mov	r6, r0
 8007f04:	b9d0      	cbnz	r0, 8007f3c <_strtod_l+0x76c>
 8007f06:	2600      	movs	r6, #0
 8007f08:	e672      	b.n	8007bf0 <_strtod_l+0x420>
 8007f0a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8007f0e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8007f12:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8007f16:	37e2      	adds	r7, #226	@ 0xe2
 8007f18:	fa02 f107 	lsl.w	r1, r2, r7
 8007f1c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007f1e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007f20:	e7b8      	b.n	8007e94 <_strtod_l+0x6c4>
 8007f22:	2200      	movs	r2, #0
 8007f24:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007f26:	2201      	movs	r2, #1
 8007f28:	e7f9      	b.n	8007f1e <_strtod_l+0x74e>
 8007f2a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8007f2c:	9805      	ldr	r0, [sp, #20]
 8007f2e:	463a      	mov	r2, r7
 8007f30:	f002 ffa4 	bl	800ae7c <__lshift>
 8007f34:	9012      	str	r0, [sp, #72]	@ 0x48
 8007f36:	2800      	cmp	r0, #0
 8007f38:	d1db      	bne.n	8007ef2 <_strtod_l+0x722>
 8007f3a:	e659      	b.n	8007bf0 <_strtod_l+0x420>
 8007f3c:	f1b8 0f00 	cmp.w	r8, #0
 8007f40:	dd07      	ble.n	8007f52 <_strtod_l+0x782>
 8007f42:	4631      	mov	r1, r6
 8007f44:	9805      	ldr	r0, [sp, #20]
 8007f46:	4642      	mov	r2, r8
 8007f48:	f002 ff98 	bl	800ae7c <__lshift>
 8007f4c:	4606      	mov	r6, r0
 8007f4e:	2800      	cmp	r0, #0
 8007f50:	d0d9      	beq.n	8007f06 <_strtod_l+0x736>
 8007f52:	f1b9 0f00 	cmp.w	r9, #0
 8007f56:	dd08      	ble.n	8007f6a <_strtod_l+0x79a>
 8007f58:	4629      	mov	r1, r5
 8007f5a:	9805      	ldr	r0, [sp, #20]
 8007f5c:	464a      	mov	r2, r9
 8007f5e:	f002 ff8d 	bl	800ae7c <__lshift>
 8007f62:	4605      	mov	r5, r0
 8007f64:	2800      	cmp	r0, #0
 8007f66:	f43f ae43 	beq.w	8007bf0 <_strtod_l+0x420>
 8007f6a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8007f6c:	9805      	ldr	r0, [sp, #20]
 8007f6e:	4632      	mov	r2, r6
 8007f70:	f003 f80c 	bl	800af8c <__mdiff>
 8007f74:	4604      	mov	r4, r0
 8007f76:	2800      	cmp	r0, #0
 8007f78:	f43f ae3a 	beq.w	8007bf0 <_strtod_l+0x420>
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8007f82:	60c3      	str	r3, [r0, #12]
 8007f84:	4629      	mov	r1, r5
 8007f86:	f002 ffe5 	bl	800af54 <__mcmp>
 8007f8a:	2800      	cmp	r0, #0
 8007f8c:	da4e      	bge.n	800802c <_strtod_l+0x85c>
 8007f8e:	ea58 080a 	orrs.w	r8, r8, sl
 8007f92:	d174      	bne.n	800807e <_strtod_l+0x8ae>
 8007f94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d170      	bne.n	800807e <_strtod_l+0x8ae>
 8007f9c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007fa0:	0d1b      	lsrs	r3, r3, #20
 8007fa2:	051b      	lsls	r3, r3, #20
 8007fa4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007fa8:	d969      	bls.n	800807e <_strtod_l+0x8ae>
 8007faa:	6963      	ldr	r3, [r4, #20]
 8007fac:	b913      	cbnz	r3, 8007fb4 <_strtod_l+0x7e4>
 8007fae:	6923      	ldr	r3, [r4, #16]
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	dd64      	ble.n	800807e <_strtod_l+0x8ae>
 8007fb4:	4621      	mov	r1, r4
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	9805      	ldr	r0, [sp, #20]
 8007fba:	f002 ff5f 	bl	800ae7c <__lshift>
 8007fbe:	4629      	mov	r1, r5
 8007fc0:	4604      	mov	r4, r0
 8007fc2:	f002 ffc7 	bl	800af54 <__mcmp>
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	dd59      	ble.n	800807e <_strtod_l+0x8ae>
 8007fca:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007fce:	9a06      	ldr	r2, [sp, #24]
 8007fd0:	0d1b      	lsrs	r3, r3, #20
 8007fd2:	051b      	lsls	r3, r3, #20
 8007fd4:	2a00      	cmp	r2, #0
 8007fd6:	d070      	beq.n	80080ba <_strtod_l+0x8ea>
 8007fd8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007fdc:	d86d      	bhi.n	80080ba <_strtod_l+0x8ea>
 8007fde:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007fe2:	f67f ae99 	bls.w	8007d18 <_strtod_l+0x548>
 8007fe6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8008018 <_strtod_l+0x848>
 8007fea:	ec4b ab16 	vmov	d6, sl, fp
 8007fee:	4b0e      	ldr	r3, [pc, #56]	@ (8008028 <_strtod_l+0x858>)
 8007ff0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007ff4:	ee17 2a90 	vmov	r2, s15
 8007ff8:	4013      	ands	r3, r2
 8007ffa:	ec5b ab17 	vmov	sl, fp, d7
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	f47f ae01 	bne.w	8007c06 <_strtod_l+0x436>
 8008004:	9a05      	ldr	r2, [sp, #20]
 8008006:	2322      	movs	r3, #34	@ 0x22
 8008008:	6013      	str	r3, [r2, #0]
 800800a:	e5fc      	b.n	8007c06 <_strtod_l+0x436>
 800800c:	f3af 8000 	nop.w
 8008010:	ffc00000 	.word	0xffc00000
 8008014:	41dfffff 	.word	0x41dfffff
 8008018:	00000000 	.word	0x00000000
 800801c:	39500000 	.word	0x39500000
 8008020:	0800be88 	.word	0x0800be88
 8008024:	fffffc02 	.word	0xfffffc02
 8008028:	7ff00000 	.word	0x7ff00000
 800802c:	46d9      	mov	r9, fp
 800802e:	d15d      	bne.n	80080ec <_strtod_l+0x91c>
 8008030:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008034:	f1b8 0f00 	cmp.w	r8, #0
 8008038:	d02a      	beq.n	8008090 <_strtod_l+0x8c0>
 800803a:	4aab      	ldr	r2, [pc, #684]	@ (80082e8 <_strtod_l+0xb18>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d12a      	bne.n	8008096 <_strtod_l+0x8c6>
 8008040:	9b06      	ldr	r3, [sp, #24]
 8008042:	4652      	mov	r2, sl
 8008044:	b1fb      	cbz	r3, 8008086 <_strtod_l+0x8b6>
 8008046:	4ba9      	ldr	r3, [pc, #676]	@ (80082ec <_strtod_l+0xb1c>)
 8008048:	ea0b 0303 	and.w	r3, fp, r3
 800804c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008050:	f04f 31ff 	mov.w	r1, #4294967295
 8008054:	d81a      	bhi.n	800808c <_strtod_l+0x8bc>
 8008056:	0d1b      	lsrs	r3, r3, #20
 8008058:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800805c:	fa01 f303 	lsl.w	r3, r1, r3
 8008060:	429a      	cmp	r2, r3
 8008062:	d118      	bne.n	8008096 <_strtod_l+0x8c6>
 8008064:	4ba2      	ldr	r3, [pc, #648]	@ (80082f0 <_strtod_l+0xb20>)
 8008066:	4599      	cmp	r9, r3
 8008068:	d102      	bne.n	8008070 <_strtod_l+0x8a0>
 800806a:	3201      	adds	r2, #1
 800806c:	f43f adc0 	beq.w	8007bf0 <_strtod_l+0x420>
 8008070:	4b9e      	ldr	r3, [pc, #632]	@ (80082ec <_strtod_l+0xb1c>)
 8008072:	ea09 0303 	and.w	r3, r9, r3
 8008076:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800807a:	f04f 0a00 	mov.w	sl, #0
 800807e:	9b06      	ldr	r3, [sp, #24]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1b0      	bne.n	8007fe6 <_strtod_l+0x816>
 8008084:	e5bf      	b.n	8007c06 <_strtod_l+0x436>
 8008086:	f04f 33ff 	mov.w	r3, #4294967295
 800808a:	e7e9      	b.n	8008060 <_strtod_l+0x890>
 800808c:	460b      	mov	r3, r1
 800808e:	e7e7      	b.n	8008060 <_strtod_l+0x890>
 8008090:	ea53 030a 	orrs.w	r3, r3, sl
 8008094:	d099      	beq.n	8007fca <_strtod_l+0x7fa>
 8008096:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008098:	b1c3      	cbz	r3, 80080cc <_strtod_l+0x8fc>
 800809a:	ea13 0f09 	tst.w	r3, r9
 800809e:	d0ee      	beq.n	800807e <_strtod_l+0x8ae>
 80080a0:	9a06      	ldr	r2, [sp, #24]
 80080a2:	4650      	mov	r0, sl
 80080a4:	4659      	mov	r1, fp
 80080a6:	f1b8 0f00 	cmp.w	r8, #0
 80080aa:	d013      	beq.n	80080d4 <_strtod_l+0x904>
 80080ac:	f7ff fb73 	bl	8007796 <sulp>
 80080b0:	ee39 7b00 	vadd.f64	d7, d9, d0
 80080b4:	ec5b ab17 	vmov	sl, fp, d7
 80080b8:	e7e1      	b.n	800807e <_strtod_l+0x8ae>
 80080ba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80080be:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80080c2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80080c6:	f04f 3aff 	mov.w	sl, #4294967295
 80080ca:	e7d8      	b.n	800807e <_strtod_l+0x8ae>
 80080cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80080ce:	ea13 0f0a 	tst.w	r3, sl
 80080d2:	e7e4      	b.n	800809e <_strtod_l+0x8ce>
 80080d4:	f7ff fb5f 	bl	8007796 <sulp>
 80080d8:	ee39 0b40 	vsub.f64	d0, d9, d0
 80080dc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80080e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080e4:	ec5b ab10 	vmov	sl, fp, d0
 80080e8:	d1c9      	bne.n	800807e <_strtod_l+0x8ae>
 80080ea:	e615      	b.n	8007d18 <_strtod_l+0x548>
 80080ec:	4629      	mov	r1, r5
 80080ee:	4620      	mov	r0, r4
 80080f0:	f003 f8a8 	bl	800b244 <__ratio>
 80080f4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 80080f8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80080fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008100:	d85d      	bhi.n	80081be <_strtod_l+0x9ee>
 8008102:	f1b8 0f00 	cmp.w	r8, #0
 8008106:	d164      	bne.n	80081d2 <_strtod_l+0xa02>
 8008108:	f1ba 0f00 	cmp.w	sl, #0
 800810c:	d14b      	bne.n	80081a6 <_strtod_l+0x9d6>
 800810e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008112:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d160      	bne.n	80081dc <_strtod_l+0xa0c>
 800811a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800811e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8008122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008126:	d401      	bmi.n	800812c <_strtod_l+0x95c>
 8008128:	ee20 8b08 	vmul.f64	d8, d0, d8
 800812c:	eeb1 ab48 	vneg.f64	d10, d8
 8008130:	486e      	ldr	r0, [pc, #440]	@ (80082ec <_strtod_l+0xb1c>)
 8008132:	4970      	ldr	r1, [pc, #448]	@ (80082f4 <_strtod_l+0xb24>)
 8008134:	ea09 0700 	and.w	r7, r9, r0
 8008138:	428f      	cmp	r7, r1
 800813a:	ec53 2b1a 	vmov	r2, r3, d10
 800813e:	d17d      	bne.n	800823c <_strtod_l+0xa6c>
 8008140:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8008144:	ec4b ab1c 	vmov	d12, sl, fp
 8008148:	eeb0 0b4c 	vmov.f64	d0, d12
 800814c:	f002 ffb2 	bl	800b0b4 <__ulp>
 8008150:	4866      	ldr	r0, [pc, #408]	@ (80082ec <_strtod_l+0xb1c>)
 8008152:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8008156:	ee1c 3a90 	vmov	r3, s25
 800815a:	4a67      	ldr	r2, [pc, #412]	@ (80082f8 <_strtod_l+0xb28>)
 800815c:	ea03 0100 	and.w	r1, r3, r0
 8008160:	4291      	cmp	r1, r2
 8008162:	ec5b ab1c 	vmov	sl, fp, d12
 8008166:	d93c      	bls.n	80081e2 <_strtod_l+0xa12>
 8008168:	ee19 2a90 	vmov	r2, s19
 800816c:	4b60      	ldr	r3, [pc, #384]	@ (80082f0 <_strtod_l+0xb20>)
 800816e:	429a      	cmp	r2, r3
 8008170:	d104      	bne.n	800817c <_strtod_l+0x9ac>
 8008172:	ee19 3a10 	vmov	r3, s18
 8008176:	3301      	adds	r3, #1
 8008178:	f43f ad3a 	beq.w	8007bf0 <_strtod_l+0x420>
 800817c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 80082f0 <_strtod_l+0xb20>
 8008180:	f04f 3aff 	mov.w	sl, #4294967295
 8008184:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8008186:	9805      	ldr	r0, [sp, #20]
 8008188:	f002 fc60 	bl	800aa4c <_Bfree>
 800818c:	9805      	ldr	r0, [sp, #20]
 800818e:	4631      	mov	r1, r6
 8008190:	f002 fc5c 	bl	800aa4c <_Bfree>
 8008194:	9805      	ldr	r0, [sp, #20]
 8008196:	4629      	mov	r1, r5
 8008198:	f002 fc58 	bl	800aa4c <_Bfree>
 800819c:	9805      	ldr	r0, [sp, #20]
 800819e:	4621      	mov	r1, r4
 80081a0:	f002 fc54 	bl	800aa4c <_Bfree>
 80081a4:	e625      	b.n	8007df2 <_strtod_l+0x622>
 80081a6:	f1ba 0f01 	cmp.w	sl, #1
 80081aa:	d103      	bne.n	80081b4 <_strtod_l+0x9e4>
 80081ac:	f1bb 0f00 	cmp.w	fp, #0
 80081b0:	f43f adb2 	beq.w	8007d18 <_strtod_l+0x548>
 80081b4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80081b8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80081bc:	e7b8      	b.n	8008130 <_strtod_l+0x960>
 80081be:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80081c2:	ee20 8b08 	vmul.f64	d8, d0, d8
 80081c6:	f1b8 0f00 	cmp.w	r8, #0
 80081ca:	d0af      	beq.n	800812c <_strtod_l+0x95c>
 80081cc:	eeb0 ab48 	vmov.f64	d10, d8
 80081d0:	e7ae      	b.n	8008130 <_strtod_l+0x960>
 80081d2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 80081d6:	eeb0 8b4a 	vmov.f64	d8, d10
 80081da:	e7a9      	b.n	8008130 <_strtod_l+0x960>
 80081dc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80081e0:	e7a6      	b.n	8008130 <_strtod_l+0x960>
 80081e2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80081e6:	9b06      	ldr	r3, [sp, #24]
 80081e8:	46d9      	mov	r9, fp
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1ca      	bne.n	8008184 <_strtod_l+0x9b4>
 80081ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80081f2:	0d1b      	lsrs	r3, r3, #20
 80081f4:	051b      	lsls	r3, r3, #20
 80081f6:	429f      	cmp	r7, r3
 80081f8:	d1c4      	bne.n	8008184 <_strtod_l+0x9b4>
 80081fa:	ec51 0b18 	vmov	r0, r1, d8
 80081fe:	f7f8 fa4b 	bl	8000698 <__aeabi_d2lz>
 8008202:	f7f8 fa03 	bl	800060c <__aeabi_l2d>
 8008206:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800820a:	ec41 0b17 	vmov	d7, r0, r1
 800820e:	ea49 090a 	orr.w	r9, r9, sl
 8008212:	ea59 0908 	orrs.w	r9, r9, r8
 8008216:	ee38 8b47 	vsub.f64	d8, d8, d7
 800821a:	d03c      	beq.n	8008296 <_strtod_l+0xac6>
 800821c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80082d0 <_strtod_l+0xb00>
 8008220:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008228:	f53f aced 	bmi.w	8007c06 <_strtod_l+0x436>
 800822c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80082d8 <_strtod_l+0xb08>
 8008230:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008238:	dda4      	ble.n	8008184 <_strtod_l+0x9b4>
 800823a:	e4e4      	b.n	8007c06 <_strtod_l+0x436>
 800823c:	9906      	ldr	r1, [sp, #24]
 800823e:	b1e1      	cbz	r1, 800827a <_strtod_l+0xaaa>
 8008240:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8008244:	d819      	bhi.n	800827a <_strtod_l+0xaaa>
 8008246:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800824a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800824e:	d811      	bhi.n	8008274 <_strtod_l+0xaa4>
 8008250:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8008254:	ee18 3a10 	vmov	r3, s16
 8008258:	2b01      	cmp	r3, #1
 800825a:	bf38      	it	cc
 800825c:	2301      	movcc	r3, #1
 800825e:	ee08 3a10 	vmov	s16, r3
 8008262:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8008266:	f1b8 0f00 	cmp.w	r8, #0
 800826a:	d111      	bne.n	8008290 <_strtod_l+0xac0>
 800826c:	eeb1 7b48 	vneg.f64	d7, d8
 8008270:	ec53 2b17 	vmov	r2, r3, d7
 8008274:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8008278:	1bcb      	subs	r3, r1, r7
 800827a:	eeb0 0b49 	vmov.f64	d0, d9
 800827e:	ec43 2b1a 	vmov	d10, r2, r3
 8008282:	f002 ff17 	bl	800b0b4 <__ulp>
 8008286:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800828a:	ec5b ab19 	vmov	sl, fp, d9
 800828e:	e7aa      	b.n	80081e6 <_strtod_l+0xa16>
 8008290:	eeb0 7b48 	vmov.f64	d7, d8
 8008294:	e7ec      	b.n	8008270 <_strtod_l+0xaa0>
 8008296:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 80082e0 <_strtod_l+0xb10>
 800829a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800829e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082a2:	f57f af6f 	bpl.w	8008184 <_strtod_l+0x9b4>
 80082a6:	e4ae      	b.n	8007c06 <_strtod_l+0x436>
 80082a8:	2300      	movs	r3, #0
 80082aa:	9308      	str	r3, [sp, #32]
 80082ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80082ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80082b0:	6013      	str	r3, [r2, #0]
 80082b2:	f7ff bacc 	b.w	800784e <_strtod_l+0x7e>
 80082b6:	2a65      	cmp	r2, #101	@ 0x65
 80082b8:	f43f abbc 	beq.w	8007a34 <_strtod_l+0x264>
 80082bc:	2a45      	cmp	r2, #69	@ 0x45
 80082be:	f43f abb9 	beq.w	8007a34 <_strtod_l+0x264>
 80082c2:	2301      	movs	r3, #1
 80082c4:	9306      	str	r3, [sp, #24]
 80082c6:	f7ff bbf0 	b.w	8007aaa <_strtod_l+0x2da>
 80082ca:	bf00      	nop
 80082cc:	f3af 8000 	nop.w
 80082d0:	94a03595 	.word	0x94a03595
 80082d4:	3fdfffff 	.word	0x3fdfffff
 80082d8:	35afe535 	.word	0x35afe535
 80082dc:	3fe00000 	.word	0x3fe00000
 80082e0:	94a03595 	.word	0x94a03595
 80082e4:	3fcfffff 	.word	0x3fcfffff
 80082e8:	000fffff 	.word	0x000fffff
 80082ec:	7ff00000 	.word	0x7ff00000
 80082f0:	7fefffff 	.word	0x7fefffff
 80082f4:	7fe00000 	.word	0x7fe00000
 80082f8:	7c9fffff 	.word	0x7c9fffff

080082fc <_strtod_r>:
 80082fc:	4b01      	ldr	r3, [pc, #4]	@ (8008304 <_strtod_r+0x8>)
 80082fe:	f7ff ba67 	b.w	80077d0 <_strtod_l>
 8008302:	bf00      	nop
 8008304:	20000020 	.word	0x20000020

08008308 <strtof>:
 8008308:	b510      	push	{r4, lr}
 800830a:	4c21      	ldr	r4, [pc, #132]	@ (8008390 <strtof+0x88>)
 800830c:	4b21      	ldr	r3, [pc, #132]	@ (8008394 <strtof+0x8c>)
 800830e:	460a      	mov	r2, r1
 8008310:	4601      	mov	r1, r0
 8008312:	6820      	ldr	r0, [r4, #0]
 8008314:	f7ff fa5c 	bl	80077d0 <_strtod_l>
 8008318:	eeb4 0b40 	vcmp.f64	d0, d0
 800831c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008320:	eeb0 7b40 	vmov.f64	d7, d0
 8008324:	d70d      	bvc.n	8008342 <strtof+0x3a>
 8008326:	ee17 3a90 	vmov	r3, s15
 800832a:	2b00      	cmp	r3, #0
 800832c:	481a      	ldr	r0, [pc, #104]	@ (8008398 <strtof+0x90>)
 800832e:	da04      	bge.n	800833a <strtof+0x32>
 8008330:	f001 f91a 	bl	8009568 <nanf>
 8008334:	eeb1 0a40 	vneg.f32	s0, s0
 8008338:	bd10      	pop	{r4, pc}
 800833a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800833e:	f001 b913 	b.w	8009568 <nanf>
 8008342:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008346:	eddf 6a15 	vldr	s13, [pc, #84]	@ 800839c <strtof+0x94>
 800834a:	eeb0 6ac0 	vabs.f32	s12, s0
 800834e:	eeb4 6a66 	vcmp.f32	s12, s13
 8008352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008356:	dd08      	ble.n	800836a <strtof+0x62>
 8008358:	eeb0 6bc7 	vabs.f64	d6, d7
 800835c:	ed9f 5b0a 	vldr	d5, [pc, #40]	@ 8008388 <strtof+0x80>
 8008360:	eeb4 6b45 	vcmp.f64	d6, d5
 8008364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008368:	dd0a      	ble.n	8008380 <strtof+0x78>
 800836a:	ee10 3a10 	vmov	r3, s0
 800836e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8008372:	d1e1      	bne.n	8008338 <strtof+0x30>
 8008374:	ee17 2a90 	vmov	r2, s15
 8008378:	4b09      	ldr	r3, [pc, #36]	@ (80083a0 <strtof+0x98>)
 800837a:	4013      	ands	r3, r2
 800837c:	2b00      	cmp	r3, #0
 800837e:	d0db      	beq.n	8008338 <strtof+0x30>
 8008380:	6823      	ldr	r3, [r4, #0]
 8008382:	2222      	movs	r2, #34	@ 0x22
 8008384:	601a      	str	r2, [r3, #0]
 8008386:	e7d7      	b.n	8008338 <strtof+0x30>
 8008388:	ffffffff 	.word	0xffffffff
 800838c:	7fefffff 	.word	0x7fefffff
 8008390:	2000018c 	.word	0x2000018c
 8008394:	20000020 	.word	0x20000020
 8008398:	0800c284 	.word	0x0800c284
 800839c:	7f7fffff 	.word	0x7f7fffff
 80083a0:	7ff00000 	.word	0x7ff00000

080083a4 <_strtol_l.constprop.0>:
 80083a4:	2b24      	cmp	r3, #36	@ 0x24
 80083a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083aa:	4686      	mov	lr, r0
 80083ac:	4690      	mov	r8, r2
 80083ae:	d801      	bhi.n	80083b4 <_strtol_l.constprop.0+0x10>
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d106      	bne.n	80083c2 <_strtol_l.constprop.0+0x1e>
 80083b4:	f001 f894 	bl	80094e0 <__errno>
 80083b8:	2316      	movs	r3, #22
 80083ba:	6003      	str	r3, [r0, #0]
 80083bc:	2000      	movs	r0, #0
 80083be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083c2:	4834      	ldr	r0, [pc, #208]	@ (8008494 <_strtol_l.constprop.0+0xf0>)
 80083c4:	460d      	mov	r5, r1
 80083c6:	462a      	mov	r2, r5
 80083c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083cc:	5d06      	ldrb	r6, [r0, r4]
 80083ce:	f016 0608 	ands.w	r6, r6, #8
 80083d2:	d1f8      	bne.n	80083c6 <_strtol_l.constprop.0+0x22>
 80083d4:	2c2d      	cmp	r4, #45	@ 0x2d
 80083d6:	d12d      	bne.n	8008434 <_strtol_l.constprop.0+0x90>
 80083d8:	782c      	ldrb	r4, [r5, #0]
 80083da:	2601      	movs	r6, #1
 80083dc:	1c95      	adds	r5, r2, #2
 80083de:	f033 0210 	bics.w	r2, r3, #16
 80083e2:	d109      	bne.n	80083f8 <_strtol_l.constprop.0+0x54>
 80083e4:	2c30      	cmp	r4, #48	@ 0x30
 80083e6:	d12a      	bne.n	800843e <_strtol_l.constprop.0+0x9a>
 80083e8:	782a      	ldrb	r2, [r5, #0]
 80083ea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80083ee:	2a58      	cmp	r2, #88	@ 0x58
 80083f0:	d125      	bne.n	800843e <_strtol_l.constprop.0+0x9a>
 80083f2:	786c      	ldrb	r4, [r5, #1]
 80083f4:	2310      	movs	r3, #16
 80083f6:	3502      	adds	r5, #2
 80083f8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80083fc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008400:	2200      	movs	r2, #0
 8008402:	fbbc f9f3 	udiv	r9, ip, r3
 8008406:	4610      	mov	r0, r2
 8008408:	fb03 ca19 	mls	sl, r3, r9, ip
 800840c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008410:	2f09      	cmp	r7, #9
 8008412:	d81b      	bhi.n	800844c <_strtol_l.constprop.0+0xa8>
 8008414:	463c      	mov	r4, r7
 8008416:	42a3      	cmp	r3, r4
 8008418:	dd27      	ble.n	800846a <_strtol_l.constprop.0+0xc6>
 800841a:	1c57      	adds	r7, r2, #1
 800841c:	d007      	beq.n	800842e <_strtol_l.constprop.0+0x8a>
 800841e:	4581      	cmp	r9, r0
 8008420:	d320      	bcc.n	8008464 <_strtol_l.constprop.0+0xc0>
 8008422:	d101      	bne.n	8008428 <_strtol_l.constprop.0+0x84>
 8008424:	45a2      	cmp	sl, r4
 8008426:	db1d      	blt.n	8008464 <_strtol_l.constprop.0+0xc0>
 8008428:	fb00 4003 	mla	r0, r0, r3, r4
 800842c:	2201      	movs	r2, #1
 800842e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008432:	e7eb      	b.n	800840c <_strtol_l.constprop.0+0x68>
 8008434:	2c2b      	cmp	r4, #43	@ 0x2b
 8008436:	bf04      	itt	eq
 8008438:	782c      	ldrbeq	r4, [r5, #0]
 800843a:	1c95      	addeq	r5, r2, #2
 800843c:	e7cf      	b.n	80083de <_strtol_l.constprop.0+0x3a>
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1da      	bne.n	80083f8 <_strtol_l.constprop.0+0x54>
 8008442:	2c30      	cmp	r4, #48	@ 0x30
 8008444:	bf0c      	ite	eq
 8008446:	2308      	moveq	r3, #8
 8008448:	230a      	movne	r3, #10
 800844a:	e7d5      	b.n	80083f8 <_strtol_l.constprop.0+0x54>
 800844c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008450:	2f19      	cmp	r7, #25
 8008452:	d801      	bhi.n	8008458 <_strtol_l.constprop.0+0xb4>
 8008454:	3c37      	subs	r4, #55	@ 0x37
 8008456:	e7de      	b.n	8008416 <_strtol_l.constprop.0+0x72>
 8008458:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800845c:	2f19      	cmp	r7, #25
 800845e:	d804      	bhi.n	800846a <_strtol_l.constprop.0+0xc6>
 8008460:	3c57      	subs	r4, #87	@ 0x57
 8008462:	e7d8      	b.n	8008416 <_strtol_l.constprop.0+0x72>
 8008464:	f04f 32ff 	mov.w	r2, #4294967295
 8008468:	e7e1      	b.n	800842e <_strtol_l.constprop.0+0x8a>
 800846a:	1c53      	adds	r3, r2, #1
 800846c:	d108      	bne.n	8008480 <_strtol_l.constprop.0+0xdc>
 800846e:	2322      	movs	r3, #34	@ 0x22
 8008470:	f8ce 3000 	str.w	r3, [lr]
 8008474:	4660      	mov	r0, ip
 8008476:	f1b8 0f00 	cmp.w	r8, #0
 800847a:	d0a0      	beq.n	80083be <_strtol_l.constprop.0+0x1a>
 800847c:	1e69      	subs	r1, r5, #1
 800847e:	e006      	b.n	800848e <_strtol_l.constprop.0+0xea>
 8008480:	b106      	cbz	r6, 8008484 <_strtol_l.constprop.0+0xe0>
 8008482:	4240      	negs	r0, r0
 8008484:	f1b8 0f00 	cmp.w	r8, #0
 8008488:	d099      	beq.n	80083be <_strtol_l.constprop.0+0x1a>
 800848a:	2a00      	cmp	r2, #0
 800848c:	d1f6      	bne.n	800847c <_strtol_l.constprop.0+0xd8>
 800848e:	f8c8 1000 	str.w	r1, [r8]
 8008492:	e794      	b.n	80083be <_strtol_l.constprop.0+0x1a>
 8008494:	0800beb1 	.word	0x0800beb1

08008498 <_strtol_r>:
 8008498:	f7ff bf84 	b.w	80083a4 <_strtol_l.constprop.0>

0800849c <strtol>:
 800849c:	4613      	mov	r3, r2
 800849e:	460a      	mov	r2, r1
 80084a0:	4601      	mov	r1, r0
 80084a2:	4802      	ldr	r0, [pc, #8]	@ (80084ac <strtol+0x10>)
 80084a4:	6800      	ldr	r0, [r0, #0]
 80084a6:	f7ff bf7d 	b.w	80083a4 <_strtol_l.constprop.0>
 80084aa:	bf00      	nop
 80084ac:	2000018c 	.word	0x2000018c

080084b0 <__cvt>:
 80084b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084b2:	ed2d 8b02 	vpush	{d8}
 80084b6:	eeb0 8b40 	vmov.f64	d8, d0
 80084ba:	b085      	sub	sp, #20
 80084bc:	4617      	mov	r7, r2
 80084be:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80084c0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80084c2:	ee18 2a90 	vmov	r2, s17
 80084c6:	f025 0520 	bic.w	r5, r5, #32
 80084ca:	2a00      	cmp	r2, #0
 80084cc:	bfb6      	itet	lt
 80084ce:	222d      	movlt	r2, #45	@ 0x2d
 80084d0:	2200      	movge	r2, #0
 80084d2:	eeb1 8b40 	vneglt.f64	d8, d0
 80084d6:	2d46      	cmp	r5, #70	@ 0x46
 80084d8:	460c      	mov	r4, r1
 80084da:	701a      	strb	r2, [r3, #0]
 80084dc:	d004      	beq.n	80084e8 <__cvt+0x38>
 80084de:	2d45      	cmp	r5, #69	@ 0x45
 80084e0:	d100      	bne.n	80084e4 <__cvt+0x34>
 80084e2:	3401      	adds	r4, #1
 80084e4:	2102      	movs	r1, #2
 80084e6:	e000      	b.n	80084ea <__cvt+0x3a>
 80084e8:	2103      	movs	r1, #3
 80084ea:	ab03      	add	r3, sp, #12
 80084ec:	9301      	str	r3, [sp, #4]
 80084ee:	ab02      	add	r3, sp, #8
 80084f0:	9300      	str	r3, [sp, #0]
 80084f2:	4622      	mov	r2, r4
 80084f4:	4633      	mov	r3, r6
 80084f6:	eeb0 0b48 	vmov.f64	d0, d8
 80084fa:	f001 f8c5 	bl	8009688 <_dtoa_r>
 80084fe:	2d47      	cmp	r5, #71	@ 0x47
 8008500:	d114      	bne.n	800852c <__cvt+0x7c>
 8008502:	07fb      	lsls	r3, r7, #31
 8008504:	d50a      	bpl.n	800851c <__cvt+0x6c>
 8008506:	1902      	adds	r2, r0, r4
 8008508:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800850c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008510:	bf08      	it	eq
 8008512:	9203      	streq	r2, [sp, #12]
 8008514:	2130      	movs	r1, #48	@ 0x30
 8008516:	9b03      	ldr	r3, [sp, #12]
 8008518:	4293      	cmp	r3, r2
 800851a:	d319      	bcc.n	8008550 <__cvt+0xa0>
 800851c:	9b03      	ldr	r3, [sp, #12]
 800851e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008520:	1a1b      	subs	r3, r3, r0
 8008522:	6013      	str	r3, [r2, #0]
 8008524:	b005      	add	sp, #20
 8008526:	ecbd 8b02 	vpop	{d8}
 800852a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800852c:	2d46      	cmp	r5, #70	@ 0x46
 800852e:	eb00 0204 	add.w	r2, r0, r4
 8008532:	d1e9      	bne.n	8008508 <__cvt+0x58>
 8008534:	7803      	ldrb	r3, [r0, #0]
 8008536:	2b30      	cmp	r3, #48	@ 0x30
 8008538:	d107      	bne.n	800854a <__cvt+0x9a>
 800853a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800853e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008542:	bf1c      	itt	ne
 8008544:	f1c4 0401 	rsbne	r4, r4, #1
 8008548:	6034      	strne	r4, [r6, #0]
 800854a:	6833      	ldr	r3, [r6, #0]
 800854c:	441a      	add	r2, r3
 800854e:	e7db      	b.n	8008508 <__cvt+0x58>
 8008550:	1c5c      	adds	r4, r3, #1
 8008552:	9403      	str	r4, [sp, #12]
 8008554:	7019      	strb	r1, [r3, #0]
 8008556:	e7de      	b.n	8008516 <__cvt+0x66>

08008558 <__exponent>:
 8008558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800855a:	2900      	cmp	r1, #0
 800855c:	bfba      	itte	lt
 800855e:	4249      	neglt	r1, r1
 8008560:	232d      	movlt	r3, #45	@ 0x2d
 8008562:	232b      	movge	r3, #43	@ 0x2b
 8008564:	2909      	cmp	r1, #9
 8008566:	7002      	strb	r2, [r0, #0]
 8008568:	7043      	strb	r3, [r0, #1]
 800856a:	dd29      	ble.n	80085c0 <__exponent+0x68>
 800856c:	f10d 0307 	add.w	r3, sp, #7
 8008570:	461d      	mov	r5, r3
 8008572:	270a      	movs	r7, #10
 8008574:	461a      	mov	r2, r3
 8008576:	fbb1 f6f7 	udiv	r6, r1, r7
 800857a:	fb07 1416 	mls	r4, r7, r6, r1
 800857e:	3430      	adds	r4, #48	@ 0x30
 8008580:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008584:	460c      	mov	r4, r1
 8008586:	2c63      	cmp	r4, #99	@ 0x63
 8008588:	f103 33ff 	add.w	r3, r3, #4294967295
 800858c:	4631      	mov	r1, r6
 800858e:	dcf1      	bgt.n	8008574 <__exponent+0x1c>
 8008590:	3130      	adds	r1, #48	@ 0x30
 8008592:	1e94      	subs	r4, r2, #2
 8008594:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008598:	1c41      	adds	r1, r0, #1
 800859a:	4623      	mov	r3, r4
 800859c:	42ab      	cmp	r3, r5
 800859e:	d30a      	bcc.n	80085b6 <__exponent+0x5e>
 80085a0:	f10d 0309 	add.w	r3, sp, #9
 80085a4:	1a9b      	subs	r3, r3, r2
 80085a6:	42ac      	cmp	r4, r5
 80085a8:	bf88      	it	hi
 80085aa:	2300      	movhi	r3, #0
 80085ac:	3302      	adds	r3, #2
 80085ae:	4403      	add	r3, r0
 80085b0:	1a18      	subs	r0, r3, r0
 80085b2:	b003      	add	sp, #12
 80085b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085b6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80085ba:	f801 6f01 	strb.w	r6, [r1, #1]!
 80085be:	e7ed      	b.n	800859c <__exponent+0x44>
 80085c0:	2330      	movs	r3, #48	@ 0x30
 80085c2:	3130      	adds	r1, #48	@ 0x30
 80085c4:	7083      	strb	r3, [r0, #2]
 80085c6:	70c1      	strb	r1, [r0, #3]
 80085c8:	1d03      	adds	r3, r0, #4
 80085ca:	e7f1      	b.n	80085b0 <__exponent+0x58>
 80085cc:	0000      	movs	r0, r0
	...

080085d0 <_printf_float>:
 80085d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d4:	b08d      	sub	sp, #52	@ 0x34
 80085d6:	460c      	mov	r4, r1
 80085d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80085dc:	4616      	mov	r6, r2
 80085de:	461f      	mov	r7, r3
 80085e0:	4605      	mov	r5, r0
 80085e2:	f000 ff33 	bl	800944c <_localeconv_r>
 80085e6:	f8d0 b000 	ldr.w	fp, [r0]
 80085ea:	4658      	mov	r0, fp
 80085ec:	f7f7 fe78 	bl	80002e0 <strlen>
 80085f0:	2300      	movs	r3, #0
 80085f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80085f4:	f8d8 3000 	ldr.w	r3, [r8]
 80085f8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80085fc:	6822      	ldr	r2, [r4, #0]
 80085fe:	9005      	str	r0, [sp, #20]
 8008600:	3307      	adds	r3, #7
 8008602:	f023 0307 	bic.w	r3, r3, #7
 8008606:	f103 0108 	add.w	r1, r3, #8
 800860a:	f8c8 1000 	str.w	r1, [r8]
 800860e:	ed93 0b00 	vldr	d0, [r3]
 8008612:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8008870 <_printf_float+0x2a0>
 8008616:	eeb0 7bc0 	vabs.f64	d7, d0
 800861a:	eeb4 7b46 	vcmp.f64	d7, d6
 800861e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008622:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8008626:	dd24      	ble.n	8008672 <_printf_float+0xa2>
 8008628:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800862c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008630:	d502      	bpl.n	8008638 <_printf_float+0x68>
 8008632:	232d      	movs	r3, #45	@ 0x2d
 8008634:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008638:	498f      	ldr	r1, [pc, #572]	@ (8008878 <_printf_float+0x2a8>)
 800863a:	4b90      	ldr	r3, [pc, #576]	@ (800887c <_printf_float+0x2ac>)
 800863c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8008640:	bf94      	ite	ls
 8008642:	4688      	movls	r8, r1
 8008644:	4698      	movhi	r8, r3
 8008646:	f022 0204 	bic.w	r2, r2, #4
 800864a:	2303      	movs	r3, #3
 800864c:	6123      	str	r3, [r4, #16]
 800864e:	6022      	str	r2, [r4, #0]
 8008650:	f04f 0a00 	mov.w	sl, #0
 8008654:	9700      	str	r7, [sp, #0]
 8008656:	4633      	mov	r3, r6
 8008658:	aa0b      	add	r2, sp, #44	@ 0x2c
 800865a:	4621      	mov	r1, r4
 800865c:	4628      	mov	r0, r5
 800865e:	f000 f9d1 	bl	8008a04 <_printf_common>
 8008662:	3001      	adds	r0, #1
 8008664:	f040 8089 	bne.w	800877a <_printf_float+0x1aa>
 8008668:	f04f 30ff 	mov.w	r0, #4294967295
 800866c:	b00d      	add	sp, #52	@ 0x34
 800866e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008672:	eeb4 0b40 	vcmp.f64	d0, d0
 8008676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800867a:	d709      	bvc.n	8008690 <_printf_float+0xc0>
 800867c:	ee10 3a90 	vmov	r3, s1
 8008680:	2b00      	cmp	r3, #0
 8008682:	bfbc      	itt	lt
 8008684:	232d      	movlt	r3, #45	@ 0x2d
 8008686:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800868a:	497d      	ldr	r1, [pc, #500]	@ (8008880 <_printf_float+0x2b0>)
 800868c:	4b7d      	ldr	r3, [pc, #500]	@ (8008884 <_printf_float+0x2b4>)
 800868e:	e7d5      	b.n	800863c <_printf_float+0x6c>
 8008690:	6863      	ldr	r3, [r4, #4]
 8008692:	1c59      	adds	r1, r3, #1
 8008694:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8008698:	d139      	bne.n	800870e <_printf_float+0x13e>
 800869a:	2306      	movs	r3, #6
 800869c:	6063      	str	r3, [r4, #4]
 800869e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80086a2:	2300      	movs	r3, #0
 80086a4:	6022      	str	r2, [r4, #0]
 80086a6:	9303      	str	r3, [sp, #12]
 80086a8:	ab0a      	add	r3, sp, #40	@ 0x28
 80086aa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80086ae:	ab09      	add	r3, sp, #36	@ 0x24
 80086b0:	9300      	str	r3, [sp, #0]
 80086b2:	6861      	ldr	r1, [r4, #4]
 80086b4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80086b8:	4628      	mov	r0, r5
 80086ba:	f7ff fef9 	bl	80084b0 <__cvt>
 80086be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80086c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80086c4:	4680      	mov	r8, r0
 80086c6:	d129      	bne.n	800871c <_printf_float+0x14c>
 80086c8:	1cc8      	adds	r0, r1, #3
 80086ca:	db02      	blt.n	80086d2 <_printf_float+0x102>
 80086cc:	6863      	ldr	r3, [r4, #4]
 80086ce:	4299      	cmp	r1, r3
 80086d0:	dd41      	ble.n	8008756 <_printf_float+0x186>
 80086d2:	f1a9 0902 	sub.w	r9, r9, #2
 80086d6:	fa5f f989 	uxtb.w	r9, r9
 80086da:	3901      	subs	r1, #1
 80086dc:	464a      	mov	r2, r9
 80086de:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80086e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80086e4:	f7ff ff38 	bl	8008558 <__exponent>
 80086e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80086ea:	1813      	adds	r3, r2, r0
 80086ec:	2a01      	cmp	r2, #1
 80086ee:	4682      	mov	sl, r0
 80086f0:	6123      	str	r3, [r4, #16]
 80086f2:	dc02      	bgt.n	80086fa <_printf_float+0x12a>
 80086f4:	6822      	ldr	r2, [r4, #0]
 80086f6:	07d2      	lsls	r2, r2, #31
 80086f8:	d501      	bpl.n	80086fe <_printf_float+0x12e>
 80086fa:	3301      	adds	r3, #1
 80086fc:	6123      	str	r3, [r4, #16]
 80086fe:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008702:	2b00      	cmp	r3, #0
 8008704:	d0a6      	beq.n	8008654 <_printf_float+0x84>
 8008706:	232d      	movs	r3, #45	@ 0x2d
 8008708:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800870c:	e7a2      	b.n	8008654 <_printf_float+0x84>
 800870e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008712:	d1c4      	bne.n	800869e <_printf_float+0xce>
 8008714:	2b00      	cmp	r3, #0
 8008716:	d1c2      	bne.n	800869e <_printf_float+0xce>
 8008718:	2301      	movs	r3, #1
 800871a:	e7bf      	b.n	800869c <_printf_float+0xcc>
 800871c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008720:	d9db      	bls.n	80086da <_printf_float+0x10a>
 8008722:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8008726:	d118      	bne.n	800875a <_printf_float+0x18a>
 8008728:	2900      	cmp	r1, #0
 800872a:	6863      	ldr	r3, [r4, #4]
 800872c:	dd0b      	ble.n	8008746 <_printf_float+0x176>
 800872e:	6121      	str	r1, [r4, #16]
 8008730:	b913      	cbnz	r3, 8008738 <_printf_float+0x168>
 8008732:	6822      	ldr	r2, [r4, #0]
 8008734:	07d0      	lsls	r0, r2, #31
 8008736:	d502      	bpl.n	800873e <_printf_float+0x16e>
 8008738:	3301      	adds	r3, #1
 800873a:	440b      	add	r3, r1
 800873c:	6123      	str	r3, [r4, #16]
 800873e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008740:	f04f 0a00 	mov.w	sl, #0
 8008744:	e7db      	b.n	80086fe <_printf_float+0x12e>
 8008746:	b913      	cbnz	r3, 800874e <_printf_float+0x17e>
 8008748:	6822      	ldr	r2, [r4, #0]
 800874a:	07d2      	lsls	r2, r2, #31
 800874c:	d501      	bpl.n	8008752 <_printf_float+0x182>
 800874e:	3302      	adds	r3, #2
 8008750:	e7f4      	b.n	800873c <_printf_float+0x16c>
 8008752:	2301      	movs	r3, #1
 8008754:	e7f2      	b.n	800873c <_printf_float+0x16c>
 8008756:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800875a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800875c:	4299      	cmp	r1, r3
 800875e:	db05      	blt.n	800876c <_printf_float+0x19c>
 8008760:	6823      	ldr	r3, [r4, #0]
 8008762:	6121      	str	r1, [r4, #16]
 8008764:	07d8      	lsls	r0, r3, #31
 8008766:	d5ea      	bpl.n	800873e <_printf_float+0x16e>
 8008768:	1c4b      	adds	r3, r1, #1
 800876a:	e7e7      	b.n	800873c <_printf_float+0x16c>
 800876c:	2900      	cmp	r1, #0
 800876e:	bfd4      	ite	le
 8008770:	f1c1 0202 	rsble	r2, r1, #2
 8008774:	2201      	movgt	r2, #1
 8008776:	4413      	add	r3, r2
 8008778:	e7e0      	b.n	800873c <_printf_float+0x16c>
 800877a:	6823      	ldr	r3, [r4, #0]
 800877c:	055a      	lsls	r2, r3, #21
 800877e:	d407      	bmi.n	8008790 <_printf_float+0x1c0>
 8008780:	6923      	ldr	r3, [r4, #16]
 8008782:	4642      	mov	r2, r8
 8008784:	4631      	mov	r1, r6
 8008786:	4628      	mov	r0, r5
 8008788:	47b8      	blx	r7
 800878a:	3001      	adds	r0, #1
 800878c:	d12a      	bne.n	80087e4 <_printf_float+0x214>
 800878e:	e76b      	b.n	8008668 <_printf_float+0x98>
 8008790:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008794:	f240 80e0 	bls.w	8008958 <_printf_float+0x388>
 8008798:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800879c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80087a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087a4:	d133      	bne.n	800880e <_printf_float+0x23e>
 80087a6:	4a38      	ldr	r2, [pc, #224]	@ (8008888 <_printf_float+0x2b8>)
 80087a8:	2301      	movs	r3, #1
 80087aa:	4631      	mov	r1, r6
 80087ac:	4628      	mov	r0, r5
 80087ae:	47b8      	blx	r7
 80087b0:	3001      	adds	r0, #1
 80087b2:	f43f af59 	beq.w	8008668 <_printf_float+0x98>
 80087b6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80087ba:	4543      	cmp	r3, r8
 80087bc:	db02      	blt.n	80087c4 <_printf_float+0x1f4>
 80087be:	6823      	ldr	r3, [r4, #0]
 80087c0:	07d8      	lsls	r0, r3, #31
 80087c2:	d50f      	bpl.n	80087e4 <_printf_float+0x214>
 80087c4:	9b05      	ldr	r3, [sp, #20]
 80087c6:	465a      	mov	r2, fp
 80087c8:	4631      	mov	r1, r6
 80087ca:	4628      	mov	r0, r5
 80087cc:	47b8      	blx	r7
 80087ce:	3001      	adds	r0, #1
 80087d0:	f43f af4a 	beq.w	8008668 <_printf_float+0x98>
 80087d4:	f04f 0900 	mov.w	r9, #0
 80087d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80087dc:	f104 0a1a 	add.w	sl, r4, #26
 80087e0:	45c8      	cmp	r8, r9
 80087e2:	dc09      	bgt.n	80087f8 <_printf_float+0x228>
 80087e4:	6823      	ldr	r3, [r4, #0]
 80087e6:	079b      	lsls	r3, r3, #30
 80087e8:	f100 8107 	bmi.w	80089fa <_printf_float+0x42a>
 80087ec:	68e0      	ldr	r0, [r4, #12]
 80087ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087f0:	4298      	cmp	r0, r3
 80087f2:	bfb8      	it	lt
 80087f4:	4618      	movlt	r0, r3
 80087f6:	e739      	b.n	800866c <_printf_float+0x9c>
 80087f8:	2301      	movs	r3, #1
 80087fa:	4652      	mov	r2, sl
 80087fc:	4631      	mov	r1, r6
 80087fe:	4628      	mov	r0, r5
 8008800:	47b8      	blx	r7
 8008802:	3001      	adds	r0, #1
 8008804:	f43f af30 	beq.w	8008668 <_printf_float+0x98>
 8008808:	f109 0901 	add.w	r9, r9, #1
 800880c:	e7e8      	b.n	80087e0 <_printf_float+0x210>
 800880e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008810:	2b00      	cmp	r3, #0
 8008812:	dc3b      	bgt.n	800888c <_printf_float+0x2bc>
 8008814:	4a1c      	ldr	r2, [pc, #112]	@ (8008888 <_printf_float+0x2b8>)
 8008816:	2301      	movs	r3, #1
 8008818:	4631      	mov	r1, r6
 800881a:	4628      	mov	r0, r5
 800881c:	47b8      	blx	r7
 800881e:	3001      	adds	r0, #1
 8008820:	f43f af22 	beq.w	8008668 <_printf_float+0x98>
 8008824:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008828:	ea59 0303 	orrs.w	r3, r9, r3
 800882c:	d102      	bne.n	8008834 <_printf_float+0x264>
 800882e:	6823      	ldr	r3, [r4, #0]
 8008830:	07d9      	lsls	r1, r3, #31
 8008832:	d5d7      	bpl.n	80087e4 <_printf_float+0x214>
 8008834:	9b05      	ldr	r3, [sp, #20]
 8008836:	465a      	mov	r2, fp
 8008838:	4631      	mov	r1, r6
 800883a:	4628      	mov	r0, r5
 800883c:	47b8      	blx	r7
 800883e:	3001      	adds	r0, #1
 8008840:	f43f af12 	beq.w	8008668 <_printf_float+0x98>
 8008844:	f04f 0a00 	mov.w	sl, #0
 8008848:	f104 0b1a 	add.w	fp, r4, #26
 800884c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800884e:	425b      	negs	r3, r3
 8008850:	4553      	cmp	r3, sl
 8008852:	dc01      	bgt.n	8008858 <_printf_float+0x288>
 8008854:	464b      	mov	r3, r9
 8008856:	e794      	b.n	8008782 <_printf_float+0x1b2>
 8008858:	2301      	movs	r3, #1
 800885a:	465a      	mov	r2, fp
 800885c:	4631      	mov	r1, r6
 800885e:	4628      	mov	r0, r5
 8008860:	47b8      	blx	r7
 8008862:	3001      	adds	r0, #1
 8008864:	f43f af00 	beq.w	8008668 <_printf_float+0x98>
 8008868:	f10a 0a01 	add.w	sl, sl, #1
 800886c:	e7ee      	b.n	800884c <_printf_float+0x27c>
 800886e:	bf00      	nop
 8008870:	ffffffff 	.word	0xffffffff
 8008874:	7fefffff 	.word	0x7fefffff
 8008878:	0800bfb1 	.word	0x0800bfb1
 800887c:	0800bfb5 	.word	0x0800bfb5
 8008880:	0800bfb9 	.word	0x0800bfb9
 8008884:	0800bfbd 	.word	0x0800bfbd
 8008888:	0800bfc1 	.word	0x0800bfc1
 800888c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800888e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008892:	4553      	cmp	r3, sl
 8008894:	bfa8      	it	ge
 8008896:	4653      	movge	r3, sl
 8008898:	2b00      	cmp	r3, #0
 800889a:	4699      	mov	r9, r3
 800889c:	dc37      	bgt.n	800890e <_printf_float+0x33e>
 800889e:	2300      	movs	r3, #0
 80088a0:	9307      	str	r3, [sp, #28]
 80088a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088a6:	f104 021a 	add.w	r2, r4, #26
 80088aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80088ac:	9907      	ldr	r1, [sp, #28]
 80088ae:	9306      	str	r3, [sp, #24]
 80088b0:	eba3 0309 	sub.w	r3, r3, r9
 80088b4:	428b      	cmp	r3, r1
 80088b6:	dc31      	bgt.n	800891c <_printf_float+0x34c>
 80088b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088ba:	459a      	cmp	sl, r3
 80088bc:	dc3b      	bgt.n	8008936 <_printf_float+0x366>
 80088be:	6823      	ldr	r3, [r4, #0]
 80088c0:	07da      	lsls	r2, r3, #31
 80088c2:	d438      	bmi.n	8008936 <_printf_float+0x366>
 80088c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088c6:	ebaa 0903 	sub.w	r9, sl, r3
 80088ca:	9b06      	ldr	r3, [sp, #24]
 80088cc:	ebaa 0303 	sub.w	r3, sl, r3
 80088d0:	4599      	cmp	r9, r3
 80088d2:	bfa8      	it	ge
 80088d4:	4699      	movge	r9, r3
 80088d6:	f1b9 0f00 	cmp.w	r9, #0
 80088da:	dc34      	bgt.n	8008946 <_printf_float+0x376>
 80088dc:	f04f 0800 	mov.w	r8, #0
 80088e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088e4:	f104 0b1a 	add.w	fp, r4, #26
 80088e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088ea:	ebaa 0303 	sub.w	r3, sl, r3
 80088ee:	eba3 0309 	sub.w	r3, r3, r9
 80088f2:	4543      	cmp	r3, r8
 80088f4:	f77f af76 	ble.w	80087e4 <_printf_float+0x214>
 80088f8:	2301      	movs	r3, #1
 80088fa:	465a      	mov	r2, fp
 80088fc:	4631      	mov	r1, r6
 80088fe:	4628      	mov	r0, r5
 8008900:	47b8      	blx	r7
 8008902:	3001      	adds	r0, #1
 8008904:	f43f aeb0 	beq.w	8008668 <_printf_float+0x98>
 8008908:	f108 0801 	add.w	r8, r8, #1
 800890c:	e7ec      	b.n	80088e8 <_printf_float+0x318>
 800890e:	4642      	mov	r2, r8
 8008910:	4631      	mov	r1, r6
 8008912:	4628      	mov	r0, r5
 8008914:	47b8      	blx	r7
 8008916:	3001      	adds	r0, #1
 8008918:	d1c1      	bne.n	800889e <_printf_float+0x2ce>
 800891a:	e6a5      	b.n	8008668 <_printf_float+0x98>
 800891c:	2301      	movs	r3, #1
 800891e:	4631      	mov	r1, r6
 8008920:	4628      	mov	r0, r5
 8008922:	9206      	str	r2, [sp, #24]
 8008924:	47b8      	blx	r7
 8008926:	3001      	adds	r0, #1
 8008928:	f43f ae9e 	beq.w	8008668 <_printf_float+0x98>
 800892c:	9b07      	ldr	r3, [sp, #28]
 800892e:	9a06      	ldr	r2, [sp, #24]
 8008930:	3301      	adds	r3, #1
 8008932:	9307      	str	r3, [sp, #28]
 8008934:	e7b9      	b.n	80088aa <_printf_float+0x2da>
 8008936:	9b05      	ldr	r3, [sp, #20]
 8008938:	465a      	mov	r2, fp
 800893a:	4631      	mov	r1, r6
 800893c:	4628      	mov	r0, r5
 800893e:	47b8      	blx	r7
 8008940:	3001      	adds	r0, #1
 8008942:	d1bf      	bne.n	80088c4 <_printf_float+0x2f4>
 8008944:	e690      	b.n	8008668 <_printf_float+0x98>
 8008946:	9a06      	ldr	r2, [sp, #24]
 8008948:	464b      	mov	r3, r9
 800894a:	4442      	add	r2, r8
 800894c:	4631      	mov	r1, r6
 800894e:	4628      	mov	r0, r5
 8008950:	47b8      	blx	r7
 8008952:	3001      	adds	r0, #1
 8008954:	d1c2      	bne.n	80088dc <_printf_float+0x30c>
 8008956:	e687      	b.n	8008668 <_printf_float+0x98>
 8008958:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800895c:	f1b9 0f01 	cmp.w	r9, #1
 8008960:	dc01      	bgt.n	8008966 <_printf_float+0x396>
 8008962:	07db      	lsls	r3, r3, #31
 8008964:	d536      	bpl.n	80089d4 <_printf_float+0x404>
 8008966:	2301      	movs	r3, #1
 8008968:	4642      	mov	r2, r8
 800896a:	4631      	mov	r1, r6
 800896c:	4628      	mov	r0, r5
 800896e:	47b8      	blx	r7
 8008970:	3001      	adds	r0, #1
 8008972:	f43f ae79 	beq.w	8008668 <_printf_float+0x98>
 8008976:	9b05      	ldr	r3, [sp, #20]
 8008978:	465a      	mov	r2, fp
 800897a:	4631      	mov	r1, r6
 800897c:	4628      	mov	r0, r5
 800897e:	47b8      	blx	r7
 8008980:	3001      	adds	r0, #1
 8008982:	f43f ae71 	beq.w	8008668 <_printf_float+0x98>
 8008986:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800898a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800898e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008992:	f109 39ff 	add.w	r9, r9, #4294967295
 8008996:	d018      	beq.n	80089ca <_printf_float+0x3fa>
 8008998:	464b      	mov	r3, r9
 800899a:	f108 0201 	add.w	r2, r8, #1
 800899e:	4631      	mov	r1, r6
 80089a0:	4628      	mov	r0, r5
 80089a2:	47b8      	blx	r7
 80089a4:	3001      	adds	r0, #1
 80089a6:	d10c      	bne.n	80089c2 <_printf_float+0x3f2>
 80089a8:	e65e      	b.n	8008668 <_printf_float+0x98>
 80089aa:	2301      	movs	r3, #1
 80089ac:	465a      	mov	r2, fp
 80089ae:	4631      	mov	r1, r6
 80089b0:	4628      	mov	r0, r5
 80089b2:	47b8      	blx	r7
 80089b4:	3001      	adds	r0, #1
 80089b6:	f43f ae57 	beq.w	8008668 <_printf_float+0x98>
 80089ba:	f108 0801 	add.w	r8, r8, #1
 80089be:	45c8      	cmp	r8, r9
 80089c0:	dbf3      	blt.n	80089aa <_printf_float+0x3da>
 80089c2:	4653      	mov	r3, sl
 80089c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80089c8:	e6dc      	b.n	8008784 <_printf_float+0x1b4>
 80089ca:	f04f 0800 	mov.w	r8, #0
 80089ce:	f104 0b1a 	add.w	fp, r4, #26
 80089d2:	e7f4      	b.n	80089be <_printf_float+0x3ee>
 80089d4:	2301      	movs	r3, #1
 80089d6:	4642      	mov	r2, r8
 80089d8:	e7e1      	b.n	800899e <_printf_float+0x3ce>
 80089da:	2301      	movs	r3, #1
 80089dc:	464a      	mov	r2, r9
 80089de:	4631      	mov	r1, r6
 80089e0:	4628      	mov	r0, r5
 80089e2:	47b8      	blx	r7
 80089e4:	3001      	adds	r0, #1
 80089e6:	f43f ae3f 	beq.w	8008668 <_printf_float+0x98>
 80089ea:	f108 0801 	add.w	r8, r8, #1
 80089ee:	68e3      	ldr	r3, [r4, #12]
 80089f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80089f2:	1a5b      	subs	r3, r3, r1
 80089f4:	4543      	cmp	r3, r8
 80089f6:	dcf0      	bgt.n	80089da <_printf_float+0x40a>
 80089f8:	e6f8      	b.n	80087ec <_printf_float+0x21c>
 80089fa:	f04f 0800 	mov.w	r8, #0
 80089fe:	f104 0919 	add.w	r9, r4, #25
 8008a02:	e7f4      	b.n	80089ee <_printf_float+0x41e>

08008a04 <_printf_common>:
 8008a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a08:	4616      	mov	r6, r2
 8008a0a:	4698      	mov	r8, r3
 8008a0c:	688a      	ldr	r2, [r1, #8]
 8008a0e:	690b      	ldr	r3, [r1, #16]
 8008a10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a14:	4293      	cmp	r3, r2
 8008a16:	bfb8      	it	lt
 8008a18:	4613      	movlt	r3, r2
 8008a1a:	6033      	str	r3, [r6, #0]
 8008a1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008a20:	4607      	mov	r7, r0
 8008a22:	460c      	mov	r4, r1
 8008a24:	b10a      	cbz	r2, 8008a2a <_printf_common+0x26>
 8008a26:	3301      	adds	r3, #1
 8008a28:	6033      	str	r3, [r6, #0]
 8008a2a:	6823      	ldr	r3, [r4, #0]
 8008a2c:	0699      	lsls	r1, r3, #26
 8008a2e:	bf42      	ittt	mi
 8008a30:	6833      	ldrmi	r3, [r6, #0]
 8008a32:	3302      	addmi	r3, #2
 8008a34:	6033      	strmi	r3, [r6, #0]
 8008a36:	6825      	ldr	r5, [r4, #0]
 8008a38:	f015 0506 	ands.w	r5, r5, #6
 8008a3c:	d106      	bne.n	8008a4c <_printf_common+0x48>
 8008a3e:	f104 0a19 	add.w	sl, r4, #25
 8008a42:	68e3      	ldr	r3, [r4, #12]
 8008a44:	6832      	ldr	r2, [r6, #0]
 8008a46:	1a9b      	subs	r3, r3, r2
 8008a48:	42ab      	cmp	r3, r5
 8008a4a:	dc26      	bgt.n	8008a9a <_printf_common+0x96>
 8008a4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008a50:	6822      	ldr	r2, [r4, #0]
 8008a52:	3b00      	subs	r3, #0
 8008a54:	bf18      	it	ne
 8008a56:	2301      	movne	r3, #1
 8008a58:	0692      	lsls	r2, r2, #26
 8008a5a:	d42b      	bmi.n	8008ab4 <_printf_common+0xb0>
 8008a5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008a60:	4641      	mov	r1, r8
 8008a62:	4638      	mov	r0, r7
 8008a64:	47c8      	blx	r9
 8008a66:	3001      	adds	r0, #1
 8008a68:	d01e      	beq.n	8008aa8 <_printf_common+0xa4>
 8008a6a:	6823      	ldr	r3, [r4, #0]
 8008a6c:	6922      	ldr	r2, [r4, #16]
 8008a6e:	f003 0306 	and.w	r3, r3, #6
 8008a72:	2b04      	cmp	r3, #4
 8008a74:	bf02      	ittt	eq
 8008a76:	68e5      	ldreq	r5, [r4, #12]
 8008a78:	6833      	ldreq	r3, [r6, #0]
 8008a7a:	1aed      	subeq	r5, r5, r3
 8008a7c:	68a3      	ldr	r3, [r4, #8]
 8008a7e:	bf0c      	ite	eq
 8008a80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a84:	2500      	movne	r5, #0
 8008a86:	4293      	cmp	r3, r2
 8008a88:	bfc4      	itt	gt
 8008a8a:	1a9b      	subgt	r3, r3, r2
 8008a8c:	18ed      	addgt	r5, r5, r3
 8008a8e:	2600      	movs	r6, #0
 8008a90:	341a      	adds	r4, #26
 8008a92:	42b5      	cmp	r5, r6
 8008a94:	d11a      	bne.n	8008acc <_printf_common+0xc8>
 8008a96:	2000      	movs	r0, #0
 8008a98:	e008      	b.n	8008aac <_printf_common+0xa8>
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	4652      	mov	r2, sl
 8008a9e:	4641      	mov	r1, r8
 8008aa0:	4638      	mov	r0, r7
 8008aa2:	47c8      	blx	r9
 8008aa4:	3001      	adds	r0, #1
 8008aa6:	d103      	bne.n	8008ab0 <_printf_common+0xac>
 8008aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8008aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ab0:	3501      	adds	r5, #1
 8008ab2:	e7c6      	b.n	8008a42 <_printf_common+0x3e>
 8008ab4:	18e1      	adds	r1, r4, r3
 8008ab6:	1c5a      	adds	r2, r3, #1
 8008ab8:	2030      	movs	r0, #48	@ 0x30
 8008aba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008abe:	4422      	add	r2, r4
 8008ac0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ac4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008ac8:	3302      	adds	r3, #2
 8008aca:	e7c7      	b.n	8008a5c <_printf_common+0x58>
 8008acc:	2301      	movs	r3, #1
 8008ace:	4622      	mov	r2, r4
 8008ad0:	4641      	mov	r1, r8
 8008ad2:	4638      	mov	r0, r7
 8008ad4:	47c8      	blx	r9
 8008ad6:	3001      	adds	r0, #1
 8008ad8:	d0e6      	beq.n	8008aa8 <_printf_common+0xa4>
 8008ada:	3601      	adds	r6, #1
 8008adc:	e7d9      	b.n	8008a92 <_printf_common+0x8e>
	...

08008ae0 <_printf_i>:
 8008ae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae4:	7e0f      	ldrb	r7, [r1, #24]
 8008ae6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008ae8:	2f78      	cmp	r7, #120	@ 0x78
 8008aea:	4691      	mov	r9, r2
 8008aec:	4680      	mov	r8, r0
 8008aee:	460c      	mov	r4, r1
 8008af0:	469a      	mov	sl, r3
 8008af2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008af6:	d807      	bhi.n	8008b08 <_printf_i+0x28>
 8008af8:	2f62      	cmp	r7, #98	@ 0x62
 8008afa:	d80a      	bhi.n	8008b12 <_printf_i+0x32>
 8008afc:	2f00      	cmp	r7, #0
 8008afe:	f000 80d2 	beq.w	8008ca6 <_printf_i+0x1c6>
 8008b02:	2f58      	cmp	r7, #88	@ 0x58
 8008b04:	f000 80b9 	beq.w	8008c7a <_printf_i+0x19a>
 8008b08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b10:	e03a      	b.n	8008b88 <_printf_i+0xa8>
 8008b12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008b16:	2b15      	cmp	r3, #21
 8008b18:	d8f6      	bhi.n	8008b08 <_printf_i+0x28>
 8008b1a:	a101      	add	r1, pc, #4	@ (adr r1, 8008b20 <_printf_i+0x40>)
 8008b1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b20:	08008b79 	.word	0x08008b79
 8008b24:	08008b8d 	.word	0x08008b8d
 8008b28:	08008b09 	.word	0x08008b09
 8008b2c:	08008b09 	.word	0x08008b09
 8008b30:	08008b09 	.word	0x08008b09
 8008b34:	08008b09 	.word	0x08008b09
 8008b38:	08008b8d 	.word	0x08008b8d
 8008b3c:	08008b09 	.word	0x08008b09
 8008b40:	08008b09 	.word	0x08008b09
 8008b44:	08008b09 	.word	0x08008b09
 8008b48:	08008b09 	.word	0x08008b09
 8008b4c:	08008c8d 	.word	0x08008c8d
 8008b50:	08008bb7 	.word	0x08008bb7
 8008b54:	08008c47 	.word	0x08008c47
 8008b58:	08008b09 	.word	0x08008b09
 8008b5c:	08008b09 	.word	0x08008b09
 8008b60:	08008caf 	.word	0x08008caf
 8008b64:	08008b09 	.word	0x08008b09
 8008b68:	08008bb7 	.word	0x08008bb7
 8008b6c:	08008b09 	.word	0x08008b09
 8008b70:	08008b09 	.word	0x08008b09
 8008b74:	08008c4f 	.word	0x08008c4f
 8008b78:	6833      	ldr	r3, [r6, #0]
 8008b7a:	1d1a      	adds	r2, r3, #4
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	6032      	str	r2, [r6, #0]
 8008b80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e09d      	b.n	8008cc8 <_printf_i+0x1e8>
 8008b8c:	6833      	ldr	r3, [r6, #0]
 8008b8e:	6820      	ldr	r0, [r4, #0]
 8008b90:	1d19      	adds	r1, r3, #4
 8008b92:	6031      	str	r1, [r6, #0]
 8008b94:	0606      	lsls	r6, r0, #24
 8008b96:	d501      	bpl.n	8008b9c <_printf_i+0xbc>
 8008b98:	681d      	ldr	r5, [r3, #0]
 8008b9a:	e003      	b.n	8008ba4 <_printf_i+0xc4>
 8008b9c:	0645      	lsls	r5, r0, #25
 8008b9e:	d5fb      	bpl.n	8008b98 <_printf_i+0xb8>
 8008ba0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ba4:	2d00      	cmp	r5, #0
 8008ba6:	da03      	bge.n	8008bb0 <_printf_i+0xd0>
 8008ba8:	232d      	movs	r3, #45	@ 0x2d
 8008baa:	426d      	negs	r5, r5
 8008bac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bb0:	4859      	ldr	r0, [pc, #356]	@ (8008d18 <_printf_i+0x238>)
 8008bb2:	230a      	movs	r3, #10
 8008bb4:	e011      	b.n	8008bda <_printf_i+0xfa>
 8008bb6:	6821      	ldr	r1, [r4, #0]
 8008bb8:	6833      	ldr	r3, [r6, #0]
 8008bba:	0608      	lsls	r0, r1, #24
 8008bbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8008bc0:	d402      	bmi.n	8008bc8 <_printf_i+0xe8>
 8008bc2:	0649      	lsls	r1, r1, #25
 8008bc4:	bf48      	it	mi
 8008bc6:	b2ad      	uxthmi	r5, r5
 8008bc8:	2f6f      	cmp	r7, #111	@ 0x6f
 8008bca:	4853      	ldr	r0, [pc, #332]	@ (8008d18 <_printf_i+0x238>)
 8008bcc:	6033      	str	r3, [r6, #0]
 8008bce:	bf14      	ite	ne
 8008bd0:	230a      	movne	r3, #10
 8008bd2:	2308      	moveq	r3, #8
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008bda:	6866      	ldr	r6, [r4, #4]
 8008bdc:	60a6      	str	r6, [r4, #8]
 8008bde:	2e00      	cmp	r6, #0
 8008be0:	bfa2      	ittt	ge
 8008be2:	6821      	ldrge	r1, [r4, #0]
 8008be4:	f021 0104 	bicge.w	r1, r1, #4
 8008be8:	6021      	strge	r1, [r4, #0]
 8008bea:	b90d      	cbnz	r5, 8008bf0 <_printf_i+0x110>
 8008bec:	2e00      	cmp	r6, #0
 8008bee:	d04b      	beq.n	8008c88 <_printf_i+0x1a8>
 8008bf0:	4616      	mov	r6, r2
 8008bf2:	fbb5 f1f3 	udiv	r1, r5, r3
 8008bf6:	fb03 5711 	mls	r7, r3, r1, r5
 8008bfa:	5dc7      	ldrb	r7, [r0, r7]
 8008bfc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c00:	462f      	mov	r7, r5
 8008c02:	42bb      	cmp	r3, r7
 8008c04:	460d      	mov	r5, r1
 8008c06:	d9f4      	bls.n	8008bf2 <_printf_i+0x112>
 8008c08:	2b08      	cmp	r3, #8
 8008c0a:	d10b      	bne.n	8008c24 <_printf_i+0x144>
 8008c0c:	6823      	ldr	r3, [r4, #0]
 8008c0e:	07df      	lsls	r7, r3, #31
 8008c10:	d508      	bpl.n	8008c24 <_printf_i+0x144>
 8008c12:	6923      	ldr	r3, [r4, #16]
 8008c14:	6861      	ldr	r1, [r4, #4]
 8008c16:	4299      	cmp	r1, r3
 8008c18:	bfde      	ittt	le
 8008c1a:	2330      	movle	r3, #48	@ 0x30
 8008c1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c20:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008c24:	1b92      	subs	r2, r2, r6
 8008c26:	6122      	str	r2, [r4, #16]
 8008c28:	f8cd a000 	str.w	sl, [sp]
 8008c2c:	464b      	mov	r3, r9
 8008c2e:	aa03      	add	r2, sp, #12
 8008c30:	4621      	mov	r1, r4
 8008c32:	4640      	mov	r0, r8
 8008c34:	f7ff fee6 	bl	8008a04 <_printf_common>
 8008c38:	3001      	adds	r0, #1
 8008c3a:	d14a      	bne.n	8008cd2 <_printf_i+0x1f2>
 8008c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c40:	b004      	add	sp, #16
 8008c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c46:	6823      	ldr	r3, [r4, #0]
 8008c48:	f043 0320 	orr.w	r3, r3, #32
 8008c4c:	6023      	str	r3, [r4, #0]
 8008c4e:	4833      	ldr	r0, [pc, #204]	@ (8008d1c <_printf_i+0x23c>)
 8008c50:	2778      	movs	r7, #120	@ 0x78
 8008c52:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008c56:	6823      	ldr	r3, [r4, #0]
 8008c58:	6831      	ldr	r1, [r6, #0]
 8008c5a:	061f      	lsls	r7, r3, #24
 8008c5c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008c60:	d402      	bmi.n	8008c68 <_printf_i+0x188>
 8008c62:	065f      	lsls	r7, r3, #25
 8008c64:	bf48      	it	mi
 8008c66:	b2ad      	uxthmi	r5, r5
 8008c68:	6031      	str	r1, [r6, #0]
 8008c6a:	07d9      	lsls	r1, r3, #31
 8008c6c:	bf44      	itt	mi
 8008c6e:	f043 0320 	orrmi.w	r3, r3, #32
 8008c72:	6023      	strmi	r3, [r4, #0]
 8008c74:	b11d      	cbz	r5, 8008c7e <_printf_i+0x19e>
 8008c76:	2310      	movs	r3, #16
 8008c78:	e7ac      	b.n	8008bd4 <_printf_i+0xf4>
 8008c7a:	4827      	ldr	r0, [pc, #156]	@ (8008d18 <_printf_i+0x238>)
 8008c7c:	e7e9      	b.n	8008c52 <_printf_i+0x172>
 8008c7e:	6823      	ldr	r3, [r4, #0]
 8008c80:	f023 0320 	bic.w	r3, r3, #32
 8008c84:	6023      	str	r3, [r4, #0]
 8008c86:	e7f6      	b.n	8008c76 <_printf_i+0x196>
 8008c88:	4616      	mov	r6, r2
 8008c8a:	e7bd      	b.n	8008c08 <_printf_i+0x128>
 8008c8c:	6833      	ldr	r3, [r6, #0]
 8008c8e:	6825      	ldr	r5, [r4, #0]
 8008c90:	6961      	ldr	r1, [r4, #20]
 8008c92:	1d18      	adds	r0, r3, #4
 8008c94:	6030      	str	r0, [r6, #0]
 8008c96:	062e      	lsls	r6, r5, #24
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	d501      	bpl.n	8008ca0 <_printf_i+0x1c0>
 8008c9c:	6019      	str	r1, [r3, #0]
 8008c9e:	e002      	b.n	8008ca6 <_printf_i+0x1c6>
 8008ca0:	0668      	lsls	r0, r5, #25
 8008ca2:	d5fb      	bpl.n	8008c9c <_printf_i+0x1bc>
 8008ca4:	8019      	strh	r1, [r3, #0]
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	6123      	str	r3, [r4, #16]
 8008caa:	4616      	mov	r6, r2
 8008cac:	e7bc      	b.n	8008c28 <_printf_i+0x148>
 8008cae:	6833      	ldr	r3, [r6, #0]
 8008cb0:	1d1a      	adds	r2, r3, #4
 8008cb2:	6032      	str	r2, [r6, #0]
 8008cb4:	681e      	ldr	r6, [r3, #0]
 8008cb6:	6862      	ldr	r2, [r4, #4]
 8008cb8:	2100      	movs	r1, #0
 8008cba:	4630      	mov	r0, r6
 8008cbc:	f7f7 fac0 	bl	8000240 <memchr>
 8008cc0:	b108      	cbz	r0, 8008cc6 <_printf_i+0x1e6>
 8008cc2:	1b80      	subs	r0, r0, r6
 8008cc4:	6060      	str	r0, [r4, #4]
 8008cc6:	6863      	ldr	r3, [r4, #4]
 8008cc8:	6123      	str	r3, [r4, #16]
 8008cca:	2300      	movs	r3, #0
 8008ccc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cd0:	e7aa      	b.n	8008c28 <_printf_i+0x148>
 8008cd2:	6923      	ldr	r3, [r4, #16]
 8008cd4:	4632      	mov	r2, r6
 8008cd6:	4649      	mov	r1, r9
 8008cd8:	4640      	mov	r0, r8
 8008cda:	47d0      	blx	sl
 8008cdc:	3001      	adds	r0, #1
 8008cde:	d0ad      	beq.n	8008c3c <_printf_i+0x15c>
 8008ce0:	6823      	ldr	r3, [r4, #0]
 8008ce2:	079b      	lsls	r3, r3, #30
 8008ce4:	d413      	bmi.n	8008d0e <_printf_i+0x22e>
 8008ce6:	68e0      	ldr	r0, [r4, #12]
 8008ce8:	9b03      	ldr	r3, [sp, #12]
 8008cea:	4298      	cmp	r0, r3
 8008cec:	bfb8      	it	lt
 8008cee:	4618      	movlt	r0, r3
 8008cf0:	e7a6      	b.n	8008c40 <_printf_i+0x160>
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	4632      	mov	r2, r6
 8008cf6:	4649      	mov	r1, r9
 8008cf8:	4640      	mov	r0, r8
 8008cfa:	47d0      	blx	sl
 8008cfc:	3001      	adds	r0, #1
 8008cfe:	d09d      	beq.n	8008c3c <_printf_i+0x15c>
 8008d00:	3501      	adds	r5, #1
 8008d02:	68e3      	ldr	r3, [r4, #12]
 8008d04:	9903      	ldr	r1, [sp, #12]
 8008d06:	1a5b      	subs	r3, r3, r1
 8008d08:	42ab      	cmp	r3, r5
 8008d0a:	dcf2      	bgt.n	8008cf2 <_printf_i+0x212>
 8008d0c:	e7eb      	b.n	8008ce6 <_printf_i+0x206>
 8008d0e:	2500      	movs	r5, #0
 8008d10:	f104 0619 	add.w	r6, r4, #25
 8008d14:	e7f5      	b.n	8008d02 <_printf_i+0x222>
 8008d16:	bf00      	nop
 8008d18:	0800bfc3 	.word	0x0800bfc3
 8008d1c:	0800bfd4 	.word	0x0800bfd4

08008d20 <_scanf_float>:
 8008d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d24:	b087      	sub	sp, #28
 8008d26:	4617      	mov	r7, r2
 8008d28:	9303      	str	r3, [sp, #12]
 8008d2a:	688b      	ldr	r3, [r1, #8]
 8008d2c:	1e5a      	subs	r2, r3, #1
 8008d2e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008d32:	bf81      	itttt	hi
 8008d34:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008d38:	eb03 0b05 	addhi.w	fp, r3, r5
 8008d3c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008d40:	608b      	strhi	r3, [r1, #8]
 8008d42:	680b      	ldr	r3, [r1, #0]
 8008d44:	460a      	mov	r2, r1
 8008d46:	f04f 0500 	mov.w	r5, #0
 8008d4a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008d4e:	f842 3b1c 	str.w	r3, [r2], #28
 8008d52:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008d56:	4680      	mov	r8, r0
 8008d58:	460c      	mov	r4, r1
 8008d5a:	bf98      	it	ls
 8008d5c:	f04f 0b00 	movls.w	fp, #0
 8008d60:	9201      	str	r2, [sp, #4]
 8008d62:	4616      	mov	r6, r2
 8008d64:	46aa      	mov	sl, r5
 8008d66:	46a9      	mov	r9, r5
 8008d68:	9502      	str	r5, [sp, #8]
 8008d6a:	68a2      	ldr	r2, [r4, #8]
 8008d6c:	b152      	cbz	r2, 8008d84 <_scanf_float+0x64>
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	2b4e      	cmp	r3, #78	@ 0x4e
 8008d74:	d864      	bhi.n	8008e40 <_scanf_float+0x120>
 8008d76:	2b40      	cmp	r3, #64	@ 0x40
 8008d78:	d83c      	bhi.n	8008df4 <_scanf_float+0xd4>
 8008d7a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008d7e:	b2c8      	uxtb	r0, r1
 8008d80:	280e      	cmp	r0, #14
 8008d82:	d93a      	bls.n	8008dfa <_scanf_float+0xda>
 8008d84:	f1b9 0f00 	cmp.w	r9, #0
 8008d88:	d003      	beq.n	8008d92 <_scanf_float+0x72>
 8008d8a:	6823      	ldr	r3, [r4, #0]
 8008d8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d90:	6023      	str	r3, [r4, #0]
 8008d92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d96:	f1ba 0f01 	cmp.w	sl, #1
 8008d9a:	f200 8117 	bhi.w	8008fcc <_scanf_float+0x2ac>
 8008d9e:	9b01      	ldr	r3, [sp, #4]
 8008da0:	429e      	cmp	r6, r3
 8008da2:	f200 8108 	bhi.w	8008fb6 <_scanf_float+0x296>
 8008da6:	2001      	movs	r0, #1
 8008da8:	b007      	add	sp, #28
 8008daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dae:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008db2:	2a0d      	cmp	r2, #13
 8008db4:	d8e6      	bhi.n	8008d84 <_scanf_float+0x64>
 8008db6:	a101      	add	r1, pc, #4	@ (adr r1, 8008dbc <_scanf_float+0x9c>)
 8008db8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008dbc:	08008f03 	.word	0x08008f03
 8008dc0:	08008d85 	.word	0x08008d85
 8008dc4:	08008d85 	.word	0x08008d85
 8008dc8:	08008d85 	.word	0x08008d85
 8008dcc:	08008f63 	.word	0x08008f63
 8008dd0:	08008f3b 	.word	0x08008f3b
 8008dd4:	08008d85 	.word	0x08008d85
 8008dd8:	08008d85 	.word	0x08008d85
 8008ddc:	08008f11 	.word	0x08008f11
 8008de0:	08008d85 	.word	0x08008d85
 8008de4:	08008d85 	.word	0x08008d85
 8008de8:	08008d85 	.word	0x08008d85
 8008dec:	08008d85 	.word	0x08008d85
 8008df0:	08008ec9 	.word	0x08008ec9
 8008df4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008df8:	e7db      	b.n	8008db2 <_scanf_float+0x92>
 8008dfa:	290e      	cmp	r1, #14
 8008dfc:	d8c2      	bhi.n	8008d84 <_scanf_float+0x64>
 8008dfe:	a001      	add	r0, pc, #4	@ (adr r0, 8008e04 <_scanf_float+0xe4>)
 8008e00:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008e04:	08008eb9 	.word	0x08008eb9
 8008e08:	08008d85 	.word	0x08008d85
 8008e0c:	08008eb9 	.word	0x08008eb9
 8008e10:	08008f4f 	.word	0x08008f4f
 8008e14:	08008d85 	.word	0x08008d85
 8008e18:	08008e61 	.word	0x08008e61
 8008e1c:	08008e9f 	.word	0x08008e9f
 8008e20:	08008e9f 	.word	0x08008e9f
 8008e24:	08008e9f 	.word	0x08008e9f
 8008e28:	08008e9f 	.word	0x08008e9f
 8008e2c:	08008e9f 	.word	0x08008e9f
 8008e30:	08008e9f 	.word	0x08008e9f
 8008e34:	08008e9f 	.word	0x08008e9f
 8008e38:	08008e9f 	.word	0x08008e9f
 8008e3c:	08008e9f 	.word	0x08008e9f
 8008e40:	2b6e      	cmp	r3, #110	@ 0x6e
 8008e42:	d809      	bhi.n	8008e58 <_scanf_float+0x138>
 8008e44:	2b60      	cmp	r3, #96	@ 0x60
 8008e46:	d8b2      	bhi.n	8008dae <_scanf_float+0x8e>
 8008e48:	2b54      	cmp	r3, #84	@ 0x54
 8008e4a:	d07b      	beq.n	8008f44 <_scanf_float+0x224>
 8008e4c:	2b59      	cmp	r3, #89	@ 0x59
 8008e4e:	d199      	bne.n	8008d84 <_scanf_float+0x64>
 8008e50:	2d07      	cmp	r5, #7
 8008e52:	d197      	bne.n	8008d84 <_scanf_float+0x64>
 8008e54:	2508      	movs	r5, #8
 8008e56:	e02c      	b.n	8008eb2 <_scanf_float+0x192>
 8008e58:	2b74      	cmp	r3, #116	@ 0x74
 8008e5a:	d073      	beq.n	8008f44 <_scanf_float+0x224>
 8008e5c:	2b79      	cmp	r3, #121	@ 0x79
 8008e5e:	e7f6      	b.n	8008e4e <_scanf_float+0x12e>
 8008e60:	6821      	ldr	r1, [r4, #0]
 8008e62:	05c8      	lsls	r0, r1, #23
 8008e64:	d51b      	bpl.n	8008e9e <_scanf_float+0x17e>
 8008e66:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008e6a:	6021      	str	r1, [r4, #0]
 8008e6c:	f109 0901 	add.w	r9, r9, #1
 8008e70:	f1bb 0f00 	cmp.w	fp, #0
 8008e74:	d003      	beq.n	8008e7e <_scanf_float+0x15e>
 8008e76:	3201      	adds	r2, #1
 8008e78:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e7c:	60a2      	str	r2, [r4, #8]
 8008e7e:	68a3      	ldr	r3, [r4, #8]
 8008e80:	3b01      	subs	r3, #1
 8008e82:	60a3      	str	r3, [r4, #8]
 8008e84:	6923      	ldr	r3, [r4, #16]
 8008e86:	3301      	adds	r3, #1
 8008e88:	6123      	str	r3, [r4, #16]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	3b01      	subs	r3, #1
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	607b      	str	r3, [r7, #4]
 8008e92:	f340 8087 	ble.w	8008fa4 <_scanf_float+0x284>
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	603b      	str	r3, [r7, #0]
 8008e9c:	e765      	b.n	8008d6a <_scanf_float+0x4a>
 8008e9e:	eb1a 0105 	adds.w	r1, sl, r5
 8008ea2:	f47f af6f 	bne.w	8008d84 <_scanf_float+0x64>
 8008ea6:	6822      	ldr	r2, [r4, #0]
 8008ea8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008eac:	6022      	str	r2, [r4, #0]
 8008eae:	460d      	mov	r5, r1
 8008eb0:	468a      	mov	sl, r1
 8008eb2:	f806 3b01 	strb.w	r3, [r6], #1
 8008eb6:	e7e2      	b.n	8008e7e <_scanf_float+0x15e>
 8008eb8:	6822      	ldr	r2, [r4, #0]
 8008eba:	0610      	lsls	r0, r2, #24
 8008ebc:	f57f af62 	bpl.w	8008d84 <_scanf_float+0x64>
 8008ec0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008ec4:	6022      	str	r2, [r4, #0]
 8008ec6:	e7f4      	b.n	8008eb2 <_scanf_float+0x192>
 8008ec8:	f1ba 0f00 	cmp.w	sl, #0
 8008ecc:	d10e      	bne.n	8008eec <_scanf_float+0x1cc>
 8008ece:	f1b9 0f00 	cmp.w	r9, #0
 8008ed2:	d10e      	bne.n	8008ef2 <_scanf_float+0x1d2>
 8008ed4:	6822      	ldr	r2, [r4, #0]
 8008ed6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008eda:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008ede:	d108      	bne.n	8008ef2 <_scanf_float+0x1d2>
 8008ee0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008ee4:	6022      	str	r2, [r4, #0]
 8008ee6:	f04f 0a01 	mov.w	sl, #1
 8008eea:	e7e2      	b.n	8008eb2 <_scanf_float+0x192>
 8008eec:	f1ba 0f02 	cmp.w	sl, #2
 8008ef0:	d055      	beq.n	8008f9e <_scanf_float+0x27e>
 8008ef2:	2d01      	cmp	r5, #1
 8008ef4:	d002      	beq.n	8008efc <_scanf_float+0x1dc>
 8008ef6:	2d04      	cmp	r5, #4
 8008ef8:	f47f af44 	bne.w	8008d84 <_scanf_float+0x64>
 8008efc:	3501      	adds	r5, #1
 8008efe:	b2ed      	uxtb	r5, r5
 8008f00:	e7d7      	b.n	8008eb2 <_scanf_float+0x192>
 8008f02:	f1ba 0f01 	cmp.w	sl, #1
 8008f06:	f47f af3d 	bne.w	8008d84 <_scanf_float+0x64>
 8008f0a:	f04f 0a02 	mov.w	sl, #2
 8008f0e:	e7d0      	b.n	8008eb2 <_scanf_float+0x192>
 8008f10:	b97d      	cbnz	r5, 8008f32 <_scanf_float+0x212>
 8008f12:	f1b9 0f00 	cmp.w	r9, #0
 8008f16:	f47f af38 	bne.w	8008d8a <_scanf_float+0x6a>
 8008f1a:	6822      	ldr	r2, [r4, #0]
 8008f1c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008f20:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008f24:	f040 8101 	bne.w	800912a <_scanf_float+0x40a>
 8008f28:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008f2c:	6022      	str	r2, [r4, #0]
 8008f2e:	2501      	movs	r5, #1
 8008f30:	e7bf      	b.n	8008eb2 <_scanf_float+0x192>
 8008f32:	2d03      	cmp	r5, #3
 8008f34:	d0e2      	beq.n	8008efc <_scanf_float+0x1dc>
 8008f36:	2d05      	cmp	r5, #5
 8008f38:	e7de      	b.n	8008ef8 <_scanf_float+0x1d8>
 8008f3a:	2d02      	cmp	r5, #2
 8008f3c:	f47f af22 	bne.w	8008d84 <_scanf_float+0x64>
 8008f40:	2503      	movs	r5, #3
 8008f42:	e7b6      	b.n	8008eb2 <_scanf_float+0x192>
 8008f44:	2d06      	cmp	r5, #6
 8008f46:	f47f af1d 	bne.w	8008d84 <_scanf_float+0x64>
 8008f4a:	2507      	movs	r5, #7
 8008f4c:	e7b1      	b.n	8008eb2 <_scanf_float+0x192>
 8008f4e:	6822      	ldr	r2, [r4, #0]
 8008f50:	0591      	lsls	r1, r2, #22
 8008f52:	f57f af17 	bpl.w	8008d84 <_scanf_float+0x64>
 8008f56:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008f5a:	6022      	str	r2, [r4, #0]
 8008f5c:	f8cd 9008 	str.w	r9, [sp, #8]
 8008f60:	e7a7      	b.n	8008eb2 <_scanf_float+0x192>
 8008f62:	6822      	ldr	r2, [r4, #0]
 8008f64:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008f68:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008f6c:	d006      	beq.n	8008f7c <_scanf_float+0x25c>
 8008f6e:	0550      	lsls	r0, r2, #21
 8008f70:	f57f af08 	bpl.w	8008d84 <_scanf_float+0x64>
 8008f74:	f1b9 0f00 	cmp.w	r9, #0
 8008f78:	f000 80d7 	beq.w	800912a <_scanf_float+0x40a>
 8008f7c:	0591      	lsls	r1, r2, #22
 8008f7e:	bf58      	it	pl
 8008f80:	9902      	ldrpl	r1, [sp, #8]
 8008f82:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008f86:	bf58      	it	pl
 8008f88:	eba9 0101 	subpl.w	r1, r9, r1
 8008f8c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008f90:	bf58      	it	pl
 8008f92:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008f96:	6022      	str	r2, [r4, #0]
 8008f98:	f04f 0900 	mov.w	r9, #0
 8008f9c:	e789      	b.n	8008eb2 <_scanf_float+0x192>
 8008f9e:	f04f 0a03 	mov.w	sl, #3
 8008fa2:	e786      	b.n	8008eb2 <_scanf_float+0x192>
 8008fa4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008fa8:	4639      	mov	r1, r7
 8008faa:	4640      	mov	r0, r8
 8008fac:	4798      	blx	r3
 8008fae:	2800      	cmp	r0, #0
 8008fb0:	f43f aedb 	beq.w	8008d6a <_scanf_float+0x4a>
 8008fb4:	e6e6      	b.n	8008d84 <_scanf_float+0x64>
 8008fb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008fba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008fbe:	463a      	mov	r2, r7
 8008fc0:	4640      	mov	r0, r8
 8008fc2:	4798      	blx	r3
 8008fc4:	6923      	ldr	r3, [r4, #16]
 8008fc6:	3b01      	subs	r3, #1
 8008fc8:	6123      	str	r3, [r4, #16]
 8008fca:	e6e8      	b.n	8008d9e <_scanf_float+0x7e>
 8008fcc:	1e6b      	subs	r3, r5, #1
 8008fce:	2b06      	cmp	r3, #6
 8008fd0:	d824      	bhi.n	800901c <_scanf_float+0x2fc>
 8008fd2:	2d02      	cmp	r5, #2
 8008fd4:	d836      	bhi.n	8009044 <_scanf_float+0x324>
 8008fd6:	9b01      	ldr	r3, [sp, #4]
 8008fd8:	429e      	cmp	r6, r3
 8008fda:	f67f aee4 	bls.w	8008da6 <_scanf_float+0x86>
 8008fde:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008fe2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008fe6:	463a      	mov	r2, r7
 8008fe8:	4640      	mov	r0, r8
 8008fea:	4798      	blx	r3
 8008fec:	6923      	ldr	r3, [r4, #16]
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	6123      	str	r3, [r4, #16]
 8008ff2:	e7f0      	b.n	8008fd6 <_scanf_float+0x2b6>
 8008ff4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008ff8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008ffc:	463a      	mov	r2, r7
 8008ffe:	4640      	mov	r0, r8
 8009000:	4798      	blx	r3
 8009002:	6923      	ldr	r3, [r4, #16]
 8009004:	3b01      	subs	r3, #1
 8009006:	6123      	str	r3, [r4, #16]
 8009008:	f10a 3aff 	add.w	sl, sl, #4294967295
 800900c:	fa5f fa8a 	uxtb.w	sl, sl
 8009010:	f1ba 0f02 	cmp.w	sl, #2
 8009014:	d1ee      	bne.n	8008ff4 <_scanf_float+0x2d4>
 8009016:	3d03      	subs	r5, #3
 8009018:	b2ed      	uxtb	r5, r5
 800901a:	1b76      	subs	r6, r6, r5
 800901c:	6823      	ldr	r3, [r4, #0]
 800901e:	05da      	lsls	r2, r3, #23
 8009020:	d530      	bpl.n	8009084 <_scanf_float+0x364>
 8009022:	055b      	lsls	r3, r3, #21
 8009024:	d511      	bpl.n	800904a <_scanf_float+0x32a>
 8009026:	9b01      	ldr	r3, [sp, #4]
 8009028:	429e      	cmp	r6, r3
 800902a:	f67f aebc 	bls.w	8008da6 <_scanf_float+0x86>
 800902e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009032:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009036:	463a      	mov	r2, r7
 8009038:	4640      	mov	r0, r8
 800903a:	4798      	blx	r3
 800903c:	6923      	ldr	r3, [r4, #16]
 800903e:	3b01      	subs	r3, #1
 8009040:	6123      	str	r3, [r4, #16]
 8009042:	e7f0      	b.n	8009026 <_scanf_float+0x306>
 8009044:	46aa      	mov	sl, r5
 8009046:	46b3      	mov	fp, r6
 8009048:	e7de      	b.n	8009008 <_scanf_float+0x2e8>
 800904a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800904e:	6923      	ldr	r3, [r4, #16]
 8009050:	2965      	cmp	r1, #101	@ 0x65
 8009052:	f103 33ff 	add.w	r3, r3, #4294967295
 8009056:	f106 35ff 	add.w	r5, r6, #4294967295
 800905a:	6123      	str	r3, [r4, #16]
 800905c:	d00c      	beq.n	8009078 <_scanf_float+0x358>
 800905e:	2945      	cmp	r1, #69	@ 0x45
 8009060:	d00a      	beq.n	8009078 <_scanf_float+0x358>
 8009062:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009066:	463a      	mov	r2, r7
 8009068:	4640      	mov	r0, r8
 800906a:	4798      	blx	r3
 800906c:	6923      	ldr	r3, [r4, #16]
 800906e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009072:	3b01      	subs	r3, #1
 8009074:	1eb5      	subs	r5, r6, #2
 8009076:	6123      	str	r3, [r4, #16]
 8009078:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800907c:	463a      	mov	r2, r7
 800907e:	4640      	mov	r0, r8
 8009080:	4798      	blx	r3
 8009082:	462e      	mov	r6, r5
 8009084:	6822      	ldr	r2, [r4, #0]
 8009086:	f012 0210 	ands.w	r2, r2, #16
 800908a:	d001      	beq.n	8009090 <_scanf_float+0x370>
 800908c:	2000      	movs	r0, #0
 800908e:	e68b      	b.n	8008da8 <_scanf_float+0x88>
 8009090:	7032      	strb	r2, [r6, #0]
 8009092:	6823      	ldr	r3, [r4, #0]
 8009094:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009098:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800909c:	d11a      	bne.n	80090d4 <_scanf_float+0x3b4>
 800909e:	9b02      	ldr	r3, [sp, #8]
 80090a0:	454b      	cmp	r3, r9
 80090a2:	eba3 0209 	sub.w	r2, r3, r9
 80090a6:	d121      	bne.n	80090ec <_scanf_float+0x3cc>
 80090a8:	9901      	ldr	r1, [sp, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	4640      	mov	r0, r8
 80090ae:	f7ff f925 	bl	80082fc <_strtod_r>
 80090b2:	9b03      	ldr	r3, [sp, #12]
 80090b4:	6821      	ldr	r1, [r4, #0]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f011 0f02 	tst.w	r1, #2
 80090bc:	f103 0204 	add.w	r2, r3, #4
 80090c0:	d01f      	beq.n	8009102 <_scanf_float+0x3e2>
 80090c2:	9903      	ldr	r1, [sp, #12]
 80090c4:	600a      	str	r2, [r1, #0]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	ed83 0b00 	vstr	d0, [r3]
 80090cc:	68e3      	ldr	r3, [r4, #12]
 80090ce:	3301      	adds	r3, #1
 80090d0:	60e3      	str	r3, [r4, #12]
 80090d2:	e7db      	b.n	800908c <_scanf_float+0x36c>
 80090d4:	9b04      	ldr	r3, [sp, #16]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d0e6      	beq.n	80090a8 <_scanf_float+0x388>
 80090da:	9905      	ldr	r1, [sp, #20]
 80090dc:	230a      	movs	r3, #10
 80090de:	3101      	adds	r1, #1
 80090e0:	4640      	mov	r0, r8
 80090e2:	f7ff f9d9 	bl	8008498 <_strtol_r>
 80090e6:	9b04      	ldr	r3, [sp, #16]
 80090e8:	9e05      	ldr	r6, [sp, #20]
 80090ea:	1ac2      	subs	r2, r0, r3
 80090ec:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80090f0:	429e      	cmp	r6, r3
 80090f2:	bf28      	it	cs
 80090f4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80090f8:	490d      	ldr	r1, [pc, #52]	@ (8009130 <_scanf_float+0x410>)
 80090fa:	4630      	mov	r0, r6
 80090fc:	f000 f912 	bl	8009324 <siprintf>
 8009100:	e7d2      	b.n	80090a8 <_scanf_float+0x388>
 8009102:	f011 0f04 	tst.w	r1, #4
 8009106:	9903      	ldr	r1, [sp, #12]
 8009108:	600a      	str	r2, [r1, #0]
 800910a:	d1dc      	bne.n	80090c6 <_scanf_float+0x3a6>
 800910c:	eeb4 0b40 	vcmp.f64	d0, d0
 8009110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009114:	681d      	ldr	r5, [r3, #0]
 8009116:	d705      	bvc.n	8009124 <_scanf_float+0x404>
 8009118:	4806      	ldr	r0, [pc, #24]	@ (8009134 <_scanf_float+0x414>)
 800911a:	f000 fa25 	bl	8009568 <nanf>
 800911e:	ed85 0a00 	vstr	s0, [r5]
 8009122:	e7d3      	b.n	80090cc <_scanf_float+0x3ac>
 8009124:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8009128:	e7f9      	b.n	800911e <_scanf_float+0x3fe>
 800912a:	f04f 0900 	mov.w	r9, #0
 800912e:	e630      	b.n	8008d92 <_scanf_float+0x72>
 8009130:	0800bfe5 	.word	0x0800bfe5
 8009134:	0800c284 	.word	0x0800c284

08009138 <std>:
 8009138:	2300      	movs	r3, #0
 800913a:	b510      	push	{r4, lr}
 800913c:	4604      	mov	r4, r0
 800913e:	e9c0 3300 	strd	r3, r3, [r0]
 8009142:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009146:	6083      	str	r3, [r0, #8]
 8009148:	8181      	strh	r1, [r0, #12]
 800914a:	6643      	str	r3, [r0, #100]	@ 0x64
 800914c:	81c2      	strh	r2, [r0, #14]
 800914e:	6183      	str	r3, [r0, #24]
 8009150:	4619      	mov	r1, r3
 8009152:	2208      	movs	r2, #8
 8009154:	305c      	adds	r0, #92	@ 0x5c
 8009156:	f000 f948 	bl	80093ea <memset>
 800915a:	4b0d      	ldr	r3, [pc, #52]	@ (8009190 <std+0x58>)
 800915c:	6263      	str	r3, [r4, #36]	@ 0x24
 800915e:	4b0d      	ldr	r3, [pc, #52]	@ (8009194 <std+0x5c>)
 8009160:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009162:	4b0d      	ldr	r3, [pc, #52]	@ (8009198 <std+0x60>)
 8009164:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009166:	4b0d      	ldr	r3, [pc, #52]	@ (800919c <std+0x64>)
 8009168:	6323      	str	r3, [r4, #48]	@ 0x30
 800916a:	4b0d      	ldr	r3, [pc, #52]	@ (80091a0 <std+0x68>)
 800916c:	6224      	str	r4, [r4, #32]
 800916e:	429c      	cmp	r4, r3
 8009170:	d006      	beq.n	8009180 <std+0x48>
 8009172:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009176:	4294      	cmp	r4, r2
 8009178:	d002      	beq.n	8009180 <std+0x48>
 800917a:	33d0      	adds	r3, #208	@ 0xd0
 800917c:	429c      	cmp	r4, r3
 800917e:	d105      	bne.n	800918c <std+0x54>
 8009180:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009188:	f000 b9d4 	b.w	8009534 <__retarget_lock_init_recursive>
 800918c:	bd10      	pop	{r4, pc}
 800918e:	bf00      	nop
 8009190:	08009365 	.word	0x08009365
 8009194:	08009387 	.word	0x08009387
 8009198:	080093bf 	.word	0x080093bf
 800919c:	080093e3 	.word	0x080093e3
 80091a0:	20000b04 	.word	0x20000b04

080091a4 <stdio_exit_handler>:
 80091a4:	4a02      	ldr	r2, [pc, #8]	@ (80091b0 <stdio_exit_handler+0xc>)
 80091a6:	4903      	ldr	r1, [pc, #12]	@ (80091b4 <stdio_exit_handler+0x10>)
 80091a8:	4803      	ldr	r0, [pc, #12]	@ (80091b8 <stdio_exit_handler+0x14>)
 80091aa:	f000 b869 	b.w	8009280 <_fwalk_sglue>
 80091ae:	bf00      	nop
 80091b0:	20000014 	.word	0x20000014
 80091b4:	0800b6fd 	.word	0x0800b6fd
 80091b8:	20000190 	.word	0x20000190

080091bc <cleanup_stdio>:
 80091bc:	6841      	ldr	r1, [r0, #4]
 80091be:	4b0c      	ldr	r3, [pc, #48]	@ (80091f0 <cleanup_stdio+0x34>)
 80091c0:	4299      	cmp	r1, r3
 80091c2:	b510      	push	{r4, lr}
 80091c4:	4604      	mov	r4, r0
 80091c6:	d001      	beq.n	80091cc <cleanup_stdio+0x10>
 80091c8:	f002 fa98 	bl	800b6fc <_fflush_r>
 80091cc:	68a1      	ldr	r1, [r4, #8]
 80091ce:	4b09      	ldr	r3, [pc, #36]	@ (80091f4 <cleanup_stdio+0x38>)
 80091d0:	4299      	cmp	r1, r3
 80091d2:	d002      	beq.n	80091da <cleanup_stdio+0x1e>
 80091d4:	4620      	mov	r0, r4
 80091d6:	f002 fa91 	bl	800b6fc <_fflush_r>
 80091da:	68e1      	ldr	r1, [r4, #12]
 80091dc:	4b06      	ldr	r3, [pc, #24]	@ (80091f8 <cleanup_stdio+0x3c>)
 80091de:	4299      	cmp	r1, r3
 80091e0:	d004      	beq.n	80091ec <cleanup_stdio+0x30>
 80091e2:	4620      	mov	r0, r4
 80091e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091e8:	f002 ba88 	b.w	800b6fc <_fflush_r>
 80091ec:	bd10      	pop	{r4, pc}
 80091ee:	bf00      	nop
 80091f0:	20000b04 	.word	0x20000b04
 80091f4:	20000b6c 	.word	0x20000b6c
 80091f8:	20000bd4 	.word	0x20000bd4

080091fc <global_stdio_init.part.0>:
 80091fc:	b510      	push	{r4, lr}
 80091fe:	4b0b      	ldr	r3, [pc, #44]	@ (800922c <global_stdio_init.part.0+0x30>)
 8009200:	4c0b      	ldr	r4, [pc, #44]	@ (8009230 <global_stdio_init.part.0+0x34>)
 8009202:	4a0c      	ldr	r2, [pc, #48]	@ (8009234 <global_stdio_init.part.0+0x38>)
 8009204:	601a      	str	r2, [r3, #0]
 8009206:	4620      	mov	r0, r4
 8009208:	2200      	movs	r2, #0
 800920a:	2104      	movs	r1, #4
 800920c:	f7ff ff94 	bl	8009138 <std>
 8009210:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009214:	2201      	movs	r2, #1
 8009216:	2109      	movs	r1, #9
 8009218:	f7ff ff8e 	bl	8009138 <std>
 800921c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009220:	2202      	movs	r2, #2
 8009222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009226:	2112      	movs	r1, #18
 8009228:	f7ff bf86 	b.w	8009138 <std>
 800922c:	20000c3c 	.word	0x20000c3c
 8009230:	20000b04 	.word	0x20000b04
 8009234:	080091a5 	.word	0x080091a5

08009238 <__sfp_lock_acquire>:
 8009238:	4801      	ldr	r0, [pc, #4]	@ (8009240 <__sfp_lock_acquire+0x8>)
 800923a:	f000 b97c 	b.w	8009536 <__retarget_lock_acquire_recursive>
 800923e:	bf00      	nop
 8009240:	20000c45 	.word	0x20000c45

08009244 <__sfp_lock_release>:
 8009244:	4801      	ldr	r0, [pc, #4]	@ (800924c <__sfp_lock_release+0x8>)
 8009246:	f000 b977 	b.w	8009538 <__retarget_lock_release_recursive>
 800924a:	bf00      	nop
 800924c:	20000c45 	.word	0x20000c45

08009250 <__sinit>:
 8009250:	b510      	push	{r4, lr}
 8009252:	4604      	mov	r4, r0
 8009254:	f7ff fff0 	bl	8009238 <__sfp_lock_acquire>
 8009258:	6a23      	ldr	r3, [r4, #32]
 800925a:	b11b      	cbz	r3, 8009264 <__sinit+0x14>
 800925c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009260:	f7ff bff0 	b.w	8009244 <__sfp_lock_release>
 8009264:	4b04      	ldr	r3, [pc, #16]	@ (8009278 <__sinit+0x28>)
 8009266:	6223      	str	r3, [r4, #32]
 8009268:	4b04      	ldr	r3, [pc, #16]	@ (800927c <__sinit+0x2c>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d1f5      	bne.n	800925c <__sinit+0xc>
 8009270:	f7ff ffc4 	bl	80091fc <global_stdio_init.part.0>
 8009274:	e7f2      	b.n	800925c <__sinit+0xc>
 8009276:	bf00      	nop
 8009278:	080091bd 	.word	0x080091bd
 800927c:	20000c3c 	.word	0x20000c3c

08009280 <_fwalk_sglue>:
 8009280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009284:	4607      	mov	r7, r0
 8009286:	4688      	mov	r8, r1
 8009288:	4614      	mov	r4, r2
 800928a:	2600      	movs	r6, #0
 800928c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009290:	f1b9 0901 	subs.w	r9, r9, #1
 8009294:	d505      	bpl.n	80092a2 <_fwalk_sglue+0x22>
 8009296:	6824      	ldr	r4, [r4, #0]
 8009298:	2c00      	cmp	r4, #0
 800929a:	d1f7      	bne.n	800928c <_fwalk_sglue+0xc>
 800929c:	4630      	mov	r0, r6
 800929e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092a2:	89ab      	ldrh	r3, [r5, #12]
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d907      	bls.n	80092b8 <_fwalk_sglue+0x38>
 80092a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092ac:	3301      	adds	r3, #1
 80092ae:	d003      	beq.n	80092b8 <_fwalk_sglue+0x38>
 80092b0:	4629      	mov	r1, r5
 80092b2:	4638      	mov	r0, r7
 80092b4:	47c0      	blx	r8
 80092b6:	4306      	orrs	r6, r0
 80092b8:	3568      	adds	r5, #104	@ 0x68
 80092ba:	e7e9      	b.n	8009290 <_fwalk_sglue+0x10>

080092bc <sniprintf>:
 80092bc:	b40c      	push	{r2, r3}
 80092be:	b530      	push	{r4, r5, lr}
 80092c0:	4b17      	ldr	r3, [pc, #92]	@ (8009320 <sniprintf+0x64>)
 80092c2:	1e0c      	subs	r4, r1, #0
 80092c4:	681d      	ldr	r5, [r3, #0]
 80092c6:	b09d      	sub	sp, #116	@ 0x74
 80092c8:	da08      	bge.n	80092dc <sniprintf+0x20>
 80092ca:	238b      	movs	r3, #139	@ 0x8b
 80092cc:	602b      	str	r3, [r5, #0]
 80092ce:	f04f 30ff 	mov.w	r0, #4294967295
 80092d2:	b01d      	add	sp, #116	@ 0x74
 80092d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092d8:	b002      	add	sp, #8
 80092da:	4770      	bx	lr
 80092dc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80092e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80092e4:	bf14      	ite	ne
 80092e6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80092ea:	4623      	moveq	r3, r4
 80092ec:	9304      	str	r3, [sp, #16]
 80092ee:	9307      	str	r3, [sp, #28]
 80092f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80092f4:	9002      	str	r0, [sp, #8]
 80092f6:	9006      	str	r0, [sp, #24]
 80092f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80092fc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80092fe:	ab21      	add	r3, sp, #132	@ 0x84
 8009300:	a902      	add	r1, sp, #8
 8009302:	4628      	mov	r0, r5
 8009304:	9301      	str	r3, [sp, #4]
 8009306:	f002 f879 	bl	800b3fc <_svfiprintf_r>
 800930a:	1c43      	adds	r3, r0, #1
 800930c:	bfbc      	itt	lt
 800930e:	238b      	movlt	r3, #139	@ 0x8b
 8009310:	602b      	strlt	r3, [r5, #0]
 8009312:	2c00      	cmp	r4, #0
 8009314:	d0dd      	beq.n	80092d2 <sniprintf+0x16>
 8009316:	9b02      	ldr	r3, [sp, #8]
 8009318:	2200      	movs	r2, #0
 800931a:	701a      	strb	r2, [r3, #0]
 800931c:	e7d9      	b.n	80092d2 <sniprintf+0x16>
 800931e:	bf00      	nop
 8009320:	2000018c 	.word	0x2000018c

08009324 <siprintf>:
 8009324:	b40e      	push	{r1, r2, r3}
 8009326:	b500      	push	{lr}
 8009328:	b09c      	sub	sp, #112	@ 0x70
 800932a:	ab1d      	add	r3, sp, #116	@ 0x74
 800932c:	9002      	str	r0, [sp, #8]
 800932e:	9006      	str	r0, [sp, #24]
 8009330:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009334:	4809      	ldr	r0, [pc, #36]	@ (800935c <siprintf+0x38>)
 8009336:	9107      	str	r1, [sp, #28]
 8009338:	9104      	str	r1, [sp, #16]
 800933a:	4909      	ldr	r1, [pc, #36]	@ (8009360 <siprintf+0x3c>)
 800933c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009340:	9105      	str	r1, [sp, #20]
 8009342:	6800      	ldr	r0, [r0, #0]
 8009344:	9301      	str	r3, [sp, #4]
 8009346:	a902      	add	r1, sp, #8
 8009348:	f002 f858 	bl	800b3fc <_svfiprintf_r>
 800934c:	9b02      	ldr	r3, [sp, #8]
 800934e:	2200      	movs	r2, #0
 8009350:	701a      	strb	r2, [r3, #0]
 8009352:	b01c      	add	sp, #112	@ 0x70
 8009354:	f85d eb04 	ldr.w	lr, [sp], #4
 8009358:	b003      	add	sp, #12
 800935a:	4770      	bx	lr
 800935c:	2000018c 	.word	0x2000018c
 8009360:	ffff0208 	.word	0xffff0208

08009364 <__sread>:
 8009364:	b510      	push	{r4, lr}
 8009366:	460c      	mov	r4, r1
 8009368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800936c:	f000 f894 	bl	8009498 <_read_r>
 8009370:	2800      	cmp	r0, #0
 8009372:	bfab      	itete	ge
 8009374:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009376:	89a3      	ldrhlt	r3, [r4, #12]
 8009378:	181b      	addge	r3, r3, r0
 800937a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800937e:	bfac      	ite	ge
 8009380:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009382:	81a3      	strhlt	r3, [r4, #12]
 8009384:	bd10      	pop	{r4, pc}

08009386 <__swrite>:
 8009386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800938a:	461f      	mov	r7, r3
 800938c:	898b      	ldrh	r3, [r1, #12]
 800938e:	05db      	lsls	r3, r3, #23
 8009390:	4605      	mov	r5, r0
 8009392:	460c      	mov	r4, r1
 8009394:	4616      	mov	r6, r2
 8009396:	d505      	bpl.n	80093a4 <__swrite+0x1e>
 8009398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800939c:	2302      	movs	r3, #2
 800939e:	2200      	movs	r2, #0
 80093a0:	f000 f868 	bl	8009474 <_lseek_r>
 80093a4:	89a3      	ldrh	r3, [r4, #12]
 80093a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80093ae:	81a3      	strh	r3, [r4, #12]
 80093b0:	4632      	mov	r2, r6
 80093b2:	463b      	mov	r3, r7
 80093b4:	4628      	mov	r0, r5
 80093b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093ba:	f000 b87f 	b.w	80094bc <_write_r>

080093be <__sseek>:
 80093be:	b510      	push	{r4, lr}
 80093c0:	460c      	mov	r4, r1
 80093c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093c6:	f000 f855 	bl	8009474 <_lseek_r>
 80093ca:	1c43      	adds	r3, r0, #1
 80093cc:	89a3      	ldrh	r3, [r4, #12]
 80093ce:	bf15      	itete	ne
 80093d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80093d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80093d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80093da:	81a3      	strheq	r3, [r4, #12]
 80093dc:	bf18      	it	ne
 80093de:	81a3      	strhne	r3, [r4, #12]
 80093e0:	bd10      	pop	{r4, pc}

080093e2 <__sclose>:
 80093e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093e6:	f000 b835 	b.w	8009454 <_close_r>

080093ea <memset>:
 80093ea:	4402      	add	r2, r0
 80093ec:	4603      	mov	r3, r0
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d100      	bne.n	80093f4 <memset+0xa>
 80093f2:	4770      	bx	lr
 80093f4:	f803 1b01 	strb.w	r1, [r3], #1
 80093f8:	e7f9      	b.n	80093ee <memset+0x4>

080093fa <strncmp>:
 80093fa:	b510      	push	{r4, lr}
 80093fc:	b16a      	cbz	r2, 800941a <strncmp+0x20>
 80093fe:	3901      	subs	r1, #1
 8009400:	1884      	adds	r4, r0, r2
 8009402:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009406:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800940a:	429a      	cmp	r2, r3
 800940c:	d103      	bne.n	8009416 <strncmp+0x1c>
 800940e:	42a0      	cmp	r0, r4
 8009410:	d001      	beq.n	8009416 <strncmp+0x1c>
 8009412:	2a00      	cmp	r2, #0
 8009414:	d1f5      	bne.n	8009402 <strncmp+0x8>
 8009416:	1ad0      	subs	r0, r2, r3
 8009418:	bd10      	pop	{r4, pc}
 800941a:	4610      	mov	r0, r2
 800941c:	e7fc      	b.n	8009418 <strncmp+0x1e>

0800941e <strrchr>:
 800941e:	b538      	push	{r3, r4, r5, lr}
 8009420:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8009424:	4603      	mov	r3, r0
 8009426:	d10e      	bne.n	8009446 <strrchr+0x28>
 8009428:	4621      	mov	r1, r4
 800942a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800942e:	f002 b9a7 	b.w	800b780 <strchr>
 8009432:	1c43      	adds	r3, r0, #1
 8009434:	4605      	mov	r5, r0
 8009436:	4621      	mov	r1, r4
 8009438:	4618      	mov	r0, r3
 800943a:	f002 f9a1 	bl	800b780 <strchr>
 800943e:	2800      	cmp	r0, #0
 8009440:	d1f7      	bne.n	8009432 <strrchr+0x14>
 8009442:	4628      	mov	r0, r5
 8009444:	bd38      	pop	{r3, r4, r5, pc}
 8009446:	2500      	movs	r5, #0
 8009448:	e7f5      	b.n	8009436 <strrchr+0x18>
	...

0800944c <_localeconv_r>:
 800944c:	4800      	ldr	r0, [pc, #0]	@ (8009450 <_localeconv_r+0x4>)
 800944e:	4770      	bx	lr
 8009450:	20000110 	.word	0x20000110

08009454 <_close_r>:
 8009454:	b538      	push	{r3, r4, r5, lr}
 8009456:	4d06      	ldr	r5, [pc, #24]	@ (8009470 <_close_r+0x1c>)
 8009458:	2300      	movs	r3, #0
 800945a:	4604      	mov	r4, r0
 800945c:	4608      	mov	r0, r1
 800945e:	602b      	str	r3, [r5, #0]
 8009460:	f7f8 fc2e 	bl	8001cc0 <_close>
 8009464:	1c43      	adds	r3, r0, #1
 8009466:	d102      	bne.n	800946e <_close_r+0x1a>
 8009468:	682b      	ldr	r3, [r5, #0]
 800946a:	b103      	cbz	r3, 800946e <_close_r+0x1a>
 800946c:	6023      	str	r3, [r4, #0]
 800946e:	bd38      	pop	{r3, r4, r5, pc}
 8009470:	20000c40 	.word	0x20000c40

08009474 <_lseek_r>:
 8009474:	b538      	push	{r3, r4, r5, lr}
 8009476:	4d07      	ldr	r5, [pc, #28]	@ (8009494 <_lseek_r+0x20>)
 8009478:	4604      	mov	r4, r0
 800947a:	4608      	mov	r0, r1
 800947c:	4611      	mov	r1, r2
 800947e:	2200      	movs	r2, #0
 8009480:	602a      	str	r2, [r5, #0]
 8009482:	461a      	mov	r2, r3
 8009484:	f7f8 fc43 	bl	8001d0e <_lseek>
 8009488:	1c43      	adds	r3, r0, #1
 800948a:	d102      	bne.n	8009492 <_lseek_r+0x1e>
 800948c:	682b      	ldr	r3, [r5, #0]
 800948e:	b103      	cbz	r3, 8009492 <_lseek_r+0x1e>
 8009490:	6023      	str	r3, [r4, #0]
 8009492:	bd38      	pop	{r3, r4, r5, pc}
 8009494:	20000c40 	.word	0x20000c40

08009498 <_read_r>:
 8009498:	b538      	push	{r3, r4, r5, lr}
 800949a:	4d07      	ldr	r5, [pc, #28]	@ (80094b8 <_read_r+0x20>)
 800949c:	4604      	mov	r4, r0
 800949e:	4608      	mov	r0, r1
 80094a0:	4611      	mov	r1, r2
 80094a2:	2200      	movs	r2, #0
 80094a4:	602a      	str	r2, [r5, #0]
 80094a6:	461a      	mov	r2, r3
 80094a8:	f7f8 fbd1 	bl	8001c4e <_read>
 80094ac:	1c43      	adds	r3, r0, #1
 80094ae:	d102      	bne.n	80094b6 <_read_r+0x1e>
 80094b0:	682b      	ldr	r3, [r5, #0]
 80094b2:	b103      	cbz	r3, 80094b6 <_read_r+0x1e>
 80094b4:	6023      	str	r3, [r4, #0]
 80094b6:	bd38      	pop	{r3, r4, r5, pc}
 80094b8:	20000c40 	.word	0x20000c40

080094bc <_write_r>:
 80094bc:	b538      	push	{r3, r4, r5, lr}
 80094be:	4d07      	ldr	r5, [pc, #28]	@ (80094dc <_write_r+0x20>)
 80094c0:	4604      	mov	r4, r0
 80094c2:	4608      	mov	r0, r1
 80094c4:	4611      	mov	r1, r2
 80094c6:	2200      	movs	r2, #0
 80094c8:	602a      	str	r2, [r5, #0]
 80094ca:	461a      	mov	r2, r3
 80094cc:	f7f8 fbdc 	bl	8001c88 <_write>
 80094d0:	1c43      	adds	r3, r0, #1
 80094d2:	d102      	bne.n	80094da <_write_r+0x1e>
 80094d4:	682b      	ldr	r3, [r5, #0]
 80094d6:	b103      	cbz	r3, 80094da <_write_r+0x1e>
 80094d8:	6023      	str	r3, [r4, #0]
 80094da:	bd38      	pop	{r3, r4, r5, pc}
 80094dc:	20000c40 	.word	0x20000c40

080094e0 <__errno>:
 80094e0:	4b01      	ldr	r3, [pc, #4]	@ (80094e8 <__errno+0x8>)
 80094e2:	6818      	ldr	r0, [r3, #0]
 80094e4:	4770      	bx	lr
 80094e6:	bf00      	nop
 80094e8:	2000018c 	.word	0x2000018c

080094ec <__libc_init_array>:
 80094ec:	b570      	push	{r4, r5, r6, lr}
 80094ee:	4d0d      	ldr	r5, [pc, #52]	@ (8009524 <__libc_init_array+0x38>)
 80094f0:	4c0d      	ldr	r4, [pc, #52]	@ (8009528 <__libc_init_array+0x3c>)
 80094f2:	1b64      	subs	r4, r4, r5
 80094f4:	10a4      	asrs	r4, r4, #2
 80094f6:	2600      	movs	r6, #0
 80094f8:	42a6      	cmp	r6, r4
 80094fa:	d109      	bne.n	8009510 <__libc_init_array+0x24>
 80094fc:	4d0b      	ldr	r5, [pc, #44]	@ (800952c <__libc_init_array+0x40>)
 80094fe:	4c0c      	ldr	r4, [pc, #48]	@ (8009530 <__libc_init_array+0x44>)
 8009500:	f002 fc7a 	bl	800bdf8 <_init>
 8009504:	1b64      	subs	r4, r4, r5
 8009506:	10a4      	asrs	r4, r4, #2
 8009508:	2600      	movs	r6, #0
 800950a:	42a6      	cmp	r6, r4
 800950c:	d105      	bne.n	800951a <__libc_init_array+0x2e>
 800950e:	bd70      	pop	{r4, r5, r6, pc}
 8009510:	f855 3b04 	ldr.w	r3, [r5], #4
 8009514:	4798      	blx	r3
 8009516:	3601      	adds	r6, #1
 8009518:	e7ee      	b.n	80094f8 <__libc_init_array+0xc>
 800951a:	f855 3b04 	ldr.w	r3, [r5], #4
 800951e:	4798      	blx	r3
 8009520:	3601      	adds	r6, #1
 8009522:	e7f2      	b.n	800950a <__libc_init_array+0x1e>
 8009524:	0800c290 	.word	0x0800c290
 8009528:	0800c290 	.word	0x0800c290
 800952c:	0800c290 	.word	0x0800c290
 8009530:	0800c294 	.word	0x0800c294

08009534 <__retarget_lock_init_recursive>:
 8009534:	4770      	bx	lr

08009536 <__retarget_lock_acquire_recursive>:
 8009536:	4770      	bx	lr

08009538 <__retarget_lock_release_recursive>:
 8009538:	4770      	bx	lr

0800953a <memcpy>:
 800953a:	440a      	add	r2, r1
 800953c:	4291      	cmp	r1, r2
 800953e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009542:	d100      	bne.n	8009546 <memcpy+0xc>
 8009544:	4770      	bx	lr
 8009546:	b510      	push	{r4, lr}
 8009548:	f811 4b01 	ldrb.w	r4, [r1], #1
 800954c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009550:	4291      	cmp	r1, r2
 8009552:	d1f9      	bne.n	8009548 <memcpy+0xe>
 8009554:	bd10      	pop	{r4, pc}
	...

08009558 <nan>:
 8009558:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009560 <nan+0x8>
 800955c:	4770      	bx	lr
 800955e:	bf00      	nop
 8009560:	00000000 	.word	0x00000000
 8009564:	7ff80000 	.word	0x7ff80000

08009568 <nanf>:
 8009568:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009570 <nanf+0x8>
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	7fc00000 	.word	0x7fc00000

08009574 <quorem>:
 8009574:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009578:	6903      	ldr	r3, [r0, #16]
 800957a:	690c      	ldr	r4, [r1, #16]
 800957c:	42a3      	cmp	r3, r4
 800957e:	4607      	mov	r7, r0
 8009580:	db7e      	blt.n	8009680 <quorem+0x10c>
 8009582:	3c01      	subs	r4, #1
 8009584:	f101 0814 	add.w	r8, r1, #20
 8009588:	00a3      	lsls	r3, r4, #2
 800958a:	f100 0514 	add.w	r5, r0, #20
 800958e:	9300      	str	r3, [sp, #0]
 8009590:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009594:	9301      	str	r3, [sp, #4]
 8009596:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800959a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800959e:	3301      	adds	r3, #1
 80095a0:	429a      	cmp	r2, r3
 80095a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80095a6:	fbb2 f6f3 	udiv	r6, r2, r3
 80095aa:	d32e      	bcc.n	800960a <quorem+0x96>
 80095ac:	f04f 0a00 	mov.w	sl, #0
 80095b0:	46c4      	mov	ip, r8
 80095b2:	46ae      	mov	lr, r5
 80095b4:	46d3      	mov	fp, sl
 80095b6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80095ba:	b298      	uxth	r0, r3
 80095bc:	fb06 a000 	mla	r0, r6, r0, sl
 80095c0:	0c02      	lsrs	r2, r0, #16
 80095c2:	0c1b      	lsrs	r3, r3, #16
 80095c4:	fb06 2303 	mla	r3, r6, r3, r2
 80095c8:	f8de 2000 	ldr.w	r2, [lr]
 80095cc:	b280      	uxth	r0, r0
 80095ce:	b292      	uxth	r2, r2
 80095d0:	1a12      	subs	r2, r2, r0
 80095d2:	445a      	add	r2, fp
 80095d4:	f8de 0000 	ldr.w	r0, [lr]
 80095d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80095dc:	b29b      	uxth	r3, r3
 80095de:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80095e2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80095e6:	b292      	uxth	r2, r2
 80095e8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80095ec:	45e1      	cmp	r9, ip
 80095ee:	f84e 2b04 	str.w	r2, [lr], #4
 80095f2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80095f6:	d2de      	bcs.n	80095b6 <quorem+0x42>
 80095f8:	9b00      	ldr	r3, [sp, #0]
 80095fa:	58eb      	ldr	r3, [r5, r3]
 80095fc:	b92b      	cbnz	r3, 800960a <quorem+0x96>
 80095fe:	9b01      	ldr	r3, [sp, #4]
 8009600:	3b04      	subs	r3, #4
 8009602:	429d      	cmp	r5, r3
 8009604:	461a      	mov	r2, r3
 8009606:	d32f      	bcc.n	8009668 <quorem+0xf4>
 8009608:	613c      	str	r4, [r7, #16]
 800960a:	4638      	mov	r0, r7
 800960c:	f001 fca2 	bl	800af54 <__mcmp>
 8009610:	2800      	cmp	r0, #0
 8009612:	db25      	blt.n	8009660 <quorem+0xec>
 8009614:	4629      	mov	r1, r5
 8009616:	2000      	movs	r0, #0
 8009618:	f858 2b04 	ldr.w	r2, [r8], #4
 800961c:	f8d1 c000 	ldr.w	ip, [r1]
 8009620:	fa1f fe82 	uxth.w	lr, r2
 8009624:	fa1f f38c 	uxth.w	r3, ip
 8009628:	eba3 030e 	sub.w	r3, r3, lr
 800962c:	4403      	add	r3, r0
 800962e:	0c12      	lsrs	r2, r2, #16
 8009630:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009634:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009638:	b29b      	uxth	r3, r3
 800963a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800963e:	45c1      	cmp	r9, r8
 8009640:	f841 3b04 	str.w	r3, [r1], #4
 8009644:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009648:	d2e6      	bcs.n	8009618 <quorem+0xa4>
 800964a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800964e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009652:	b922      	cbnz	r2, 800965e <quorem+0xea>
 8009654:	3b04      	subs	r3, #4
 8009656:	429d      	cmp	r5, r3
 8009658:	461a      	mov	r2, r3
 800965a:	d30b      	bcc.n	8009674 <quorem+0x100>
 800965c:	613c      	str	r4, [r7, #16]
 800965e:	3601      	adds	r6, #1
 8009660:	4630      	mov	r0, r6
 8009662:	b003      	add	sp, #12
 8009664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009668:	6812      	ldr	r2, [r2, #0]
 800966a:	3b04      	subs	r3, #4
 800966c:	2a00      	cmp	r2, #0
 800966e:	d1cb      	bne.n	8009608 <quorem+0x94>
 8009670:	3c01      	subs	r4, #1
 8009672:	e7c6      	b.n	8009602 <quorem+0x8e>
 8009674:	6812      	ldr	r2, [r2, #0]
 8009676:	3b04      	subs	r3, #4
 8009678:	2a00      	cmp	r2, #0
 800967a:	d1ef      	bne.n	800965c <quorem+0xe8>
 800967c:	3c01      	subs	r4, #1
 800967e:	e7ea      	b.n	8009656 <quorem+0xe2>
 8009680:	2000      	movs	r0, #0
 8009682:	e7ee      	b.n	8009662 <quorem+0xee>
 8009684:	0000      	movs	r0, r0
	...

08009688 <_dtoa_r>:
 8009688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800968c:	ed2d 8b02 	vpush	{d8}
 8009690:	69c7      	ldr	r7, [r0, #28]
 8009692:	b091      	sub	sp, #68	@ 0x44
 8009694:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009698:	ec55 4b10 	vmov	r4, r5, d0
 800969c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800969e:	9107      	str	r1, [sp, #28]
 80096a0:	4681      	mov	r9, r0
 80096a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80096a4:	930d      	str	r3, [sp, #52]	@ 0x34
 80096a6:	b97f      	cbnz	r7, 80096c8 <_dtoa_r+0x40>
 80096a8:	2010      	movs	r0, #16
 80096aa:	f001 f8c7 	bl	800a83c <malloc>
 80096ae:	4602      	mov	r2, r0
 80096b0:	f8c9 001c 	str.w	r0, [r9, #28]
 80096b4:	b920      	cbnz	r0, 80096c0 <_dtoa_r+0x38>
 80096b6:	4ba0      	ldr	r3, [pc, #640]	@ (8009938 <_dtoa_r+0x2b0>)
 80096b8:	21ef      	movs	r1, #239	@ 0xef
 80096ba:	48a0      	ldr	r0, [pc, #640]	@ (800993c <_dtoa_r+0x2b4>)
 80096bc:	f002 f87e 	bl	800b7bc <__assert_func>
 80096c0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80096c4:	6007      	str	r7, [r0, #0]
 80096c6:	60c7      	str	r7, [r0, #12]
 80096c8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80096cc:	6819      	ldr	r1, [r3, #0]
 80096ce:	b159      	cbz	r1, 80096e8 <_dtoa_r+0x60>
 80096d0:	685a      	ldr	r2, [r3, #4]
 80096d2:	604a      	str	r2, [r1, #4]
 80096d4:	2301      	movs	r3, #1
 80096d6:	4093      	lsls	r3, r2
 80096d8:	608b      	str	r3, [r1, #8]
 80096da:	4648      	mov	r0, r9
 80096dc:	f001 f9b6 	bl	800aa4c <_Bfree>
 80096e0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80096e4:	2200      	movs	r2, #0
 80096e6:	601a      	str	r2, [r3, #0]
 80096e8:	1e2b      	subs	r3, r5, #0
 80096ea:	bfbb      	ittet	lt
 80096ec:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80096f0:	9303      	strlt	r3, [sp, #12]
 80096f2:	2300      	movge	r3, #0
 80096f4:	2201      	movlt	r2, #1
 80096f6:	bfac      	ite	ge
 80096f8:	6033      	strge	r3, [r6, #0]
 80096fa:	6032      	strlt	r2, [r6, #0]
 80096fc:	4b90      	ldr	r3, [pc, #576]	@ (8009940 <_dtoa_r+0x2b8>)
 80096fe:	9e03      	ldr	r6, [sp, #12]
 8009700:	43b3      	bics	r3, r6
 8009702:	d110      	bne.n	8009726 <_dtoa_r+0x9e>
 8009704:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009706:	f242 730f 	movw	r3, #9999	@ 0x270f
 800970a:	6013      	str	r3, [r2, #0]
 800970c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8009710:	4323      	orrs	r3, r4
 8009712:	f000 84de 	beq.w	800a0d2 <_dtoa_r+0xa4a>
 8009716:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009718:	4f8a      	ldr	r7, [pc, #552]	@ (8009944 <_dtoa_r+0x2bc>)
 800971a:	2b00      	cmp	r3, #0
 800971c:	f000 84e0 	beq.w	800a0e0 <_dtoa_r+0xa58>
 8009720:	1cfb      	adds	r3, r7, #3
 8009722:	f000 bcdb 	b.w	800a0dc <_dtoa_r+0xa54>
 8009726:	ed9d 8b02 	vldr	d8, [sp, #8]
 800972a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800972e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009732:	d10a      	bne.n	800974a <_dtoa_r+0xc2>
 8009734:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009736:	2301      	movs	r3, #1
 8009738:	6013      	str	r3, [r2, #0]
 800973a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800973c:	b113      	cbz	r3, 8009744 <_dtoa_r+0xbc>
 800973e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009740:	4b81      	ldr	r3, [pc, #516]	@ (8009948 <_dtoa_r+0x2c0>)
 8009742:	6013      	str	r3, [r2, #0]
 8009744:	4f81      	ldr	r7, [pc, #516]	@ (800994c <_dtoa_r+0x2c4>)
 8009746:	f000 bccb 	b.w	800a0e0 <_dtoa_r+0xa58>
 800974a:	aa0e      	add	r2, sp, #56	@ 0x38
 800974c:	a90f      	add	r1, sp, #60	@ 0x3c
 800974e:	4648      	mov	r0, r9
 8009750:	eeb0 0b48 	vmov.f64	d0, d8
 8009754:	f001 fd1e 	bl	800b194 <__d2b>
 8009758:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800975c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800975e:	9001      	str	r0, [sp, #4]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d045      	beq.n	80097f0 <_dtoa_r+0x168>
 8009764:	eeb0 7b48 	vmov.f64	d7, d8
 8009768:	ee18 1a90 	vmov	r1, s17
 800976c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009770:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8009774:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009778:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800977c:	2500      	movs	r5, #0
 800977e:	ee07 1a90 	vmov	s15, r1
 8009782:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8009786:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009920 <_dtoa_r+0x298>
 800978a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800978e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8009928 <_dtoa_r+0x2a0>
 8009792:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009796:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009930 <_dtoa_r+0x2a8>
 800979a:	ee07 3a90 	vmov	s15, r3
 800979e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80097a2:	eeb0 7b46 	vmov.f64	d7, d6
 80097a6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80097aa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80097ae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80097b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097b6:	ee16 8a90 	vmov	r8, s13
 80097ba:	d508      	bpl.n	80097ce <_dtoa_r+0x146>
 80097bc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80097c0:	eeb4 6b47 	vcmp.f64	d6, d7
 80097c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097c8:	bf18      	it	ne
 80097ca:	f108 38ff 	addne.w	r8, r8, #4294967295
 80097ce:	f1b8 0f16 	cmp.w	r8, #22
 80097d2:	d82b      	bhi.n	800982c <_dtoa_r+0x1a4>
 80097d4:	495e      	ldr	r1, [pc, #376]	@ (8009950 <_dtoa_r+0x2c8>)
 80097d6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80097da:	ed91 7b00 	vldr	d7, [r1]
 80097de:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80097e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097e6:	d501      	bpl.n	80097ec <_dtoa_r+0x164>
 80097e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80097ec:	2100      	movs	r1, #0
 80097ee:	e01e      	b.n	800982e <_dtoa_r+0x1a6>
 80097f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097f2:	4413      	add	r3, r2
 80097f4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80097f8:	2920      	cmp	r1, #32
 80097fa:	bfc1      	itttt	gt
 80097fc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8009800:	408e      	lslgt	r6, r1
 8009802:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8009806:	fa24 f101 	lsrgt.w	r1, r4, r1
 800980a:	bfd6      	itet	le
 800980c:	f1c1 0120 	rsble	r1, r1, #32
 8009810:	4331      	orrgt	r1, r6
 8009812:	fa04 f101 	lslle.w	r1, r4, r1
 8009816:	ee07 1a90 	vmov	s15, r1
 800981a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800981e:	3b01      	subs	r3, #1
 8009820:	ee17 1a90 	vmov	r1, s15
 8009824:	2501      	movs	r5, #1
 8009826:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800982a:	e7a8      	b.n	800977e <_dtoa_r+0xf6>
 800982c:	2101      	movs	r1, #1
 800982e:	1ad2      	subs	r2, r2, r3
 8009830:	1e53      	subs	r3, r2, #1
 8009832:	9306      	str	r3, [sp, #24]
 8009834:	bf45      	ittet	mi
 8009836:	f1c2 0301 	rsbmi	r3, r2, #1
 800983a:	9305      	strmi	r3, [sp, #20]
 800983c:	2300      	movpl	r3, #0
 800983e:	2300      	movmi	r3, #0
 8009840:	bf4c      	ite	mi
 8009842:	9306      	strmi	r3, [sp, #24]
 8009844:	9305      	strpl	r3, [sp, #20]
 8009846:	f1b8 0f00 	cmp.w	r8, #0
 800984a:	910c      	str	r1, [sp, #48]	@ 0x30
 800984c:	db18      	blt.n	8009880 <_dtoa_r+0x1f8>
 800984e:	9b06      	ldr	r3, [sp, #24]
 8009850:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009854:	4443      	add	r3, r8
 8009856:	9306      	str	r3, [sp, #24]
 8009858:	2300      	movs	r3, #0
 800985a:	9a07      	ldr	r2, [sp, #28]
 800985c:	2a09      	cmp	r2, #9
 800985e:	d849      	bhi.n	80098f4 <_dtoa_r+0x26c>
 8009860:	2a05      	cmp	r2, #5
 8009862:	bfc4      	itt	gt
 8009864:	3a04      	subgt	r2, #4
 8009866:	9207      	strgt	r2, [sp, #28]
 8009868:	9a07      	ldr	r2, [sp, #28]
 800986a:	f1a2 0202 	sub.w	r2, r2, #2
 800986e:	bfcc      	ite	gt
 8009870:	2400      	movgt	r4, #0
 8009872:	2401      	movle	r4, #1
 8009874:	2a03      	cmp	r2, #3
 8009876:	d848      	bhi.n	800990a <_dtoa_r+0x282>
 8009878:	e8df f002 	tbb	[pc, r2]
 800987c:	3a2c2e0b 	.word	0x3a2c2e0b
 8009880:	9b05      	ldr	r3, [sp, #20]
 8009882:	2200      	movs	r2, #0
 8009884:	eba3 0308 	sub.w	r3, r3, r8
 8009888:	9305      	str	r3, [sp, #20]
 800988a:	920a      	str	r2, [sp, #40]	@ 0x28
 800988c:	f1c8 0300 	rsb	r3, r8, #0
 8009890:	e7e3      	b.n	800985a <_dtoa_r+0x1d2>
 8009892:	2200      	movs	r2, #0
 8009894:	9208      	str	r2, [sp, #32]
 8009896:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009898:	2a00      	cmp	r2, #0
 800989a:	dc39      	bgt.n	8009910 <_dtoa_r+0x288>
 800989c:	f04f 0b01 	mov.w	fp, #1
 80098a0:	46da      	mov	sl, fp
 80098a2:	465a      	mov	r2, fp
 80098a4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80098a8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80098ac:	2100      	movs	r1, #0
 80098ae:	2004      	movs	r0, #4
 80098b0:	f100 0614 	add.w	r6, r0, #20
 80098b4:	4296      	cmp	r6, r2
 80098b6:	d930      	bls.n	800991a <_dtoa_r+0x292>
 80098b8:	6079      	str	r1, [r7, #4]
 80098ba:	4648      	mov	r0, r9
 80098bc:	9304      	str	r3, [sp, #16]
 80098be:	f001 f885 	bl	800a9cc <_Balloc>
 80098c2:	9b04      	ldr	r3, [sp, #16]
 80098c4:	4607      	mov	r7, r0
 80098c6:	2800      	cmp	r0, #0
 80098c8:	d146      	bne.n	8009958 <_dtoa_r+0x2d0>
 80098ca:	4b22      	ldr	r3, [pc, #136]	@ (8009954 <_dtoa_r+0x2cc>)
 80098cc:	4602      	mov	r2, r0
 80098ce:	f240 11af 	movw	r1, #431	@ 0x1af
 80098d2:	e6f2      	b.n	80096ba <_dtoa_r+0x32>
 80098d4:	2201      	movs	r2, #1
 80098d6:	e7dd      	b.n	8009894 <_dtoa_r+0x20c>
 80098d8:	2200      	movs	r2, #0
 80098da:	9208      	str	r2, [sp, #32]
 80098dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098de:	eb08 0b02 	add.w	fp, r8, r2
 80098e2:	f10b 0a01 	add.w	sl, fp, #1
 80098e6:	4652      	mov	r2, sl
 80098e8:	2a01      	cmp	r2, #1
 80098ea:	bfb8      	it	lt
 80098ec:	2201      	movlt	r2, #1
 80098ee:	e7db      	b.n	80098a8 <_dtoa_r+0x220>
 80098f0:	2201      	movs	r2, #1
 80098f2:	e7f2      	b.n	80098da <_dtoa_r+0x252>
 80098f4:	2401      	movs	r4, #1
 80098f6:	2200      	movs	r2, #0
 80098f8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80098fc:	f04f 3bff 	mov.w	fp, #4294967295
 8009900:	2100      	movs	r1, #0
 8009902:	46da      	mov	sl, fp
 8009904:	2212      	movs	r2, #18
 8009906:	9109      	str	r1, [sp, #36]	@ 0x24
 8009908:	e7ce      	b.n	80098a8 <_dtoa_r+0x220>
 800990a:	2201      	movs	r2, #1
 800990c:	9208      	str	r2, [sp, #32]
 800990e:	e7f5      	b.n	80098fc <_dtoa_r+0x274>
 8009910:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8009914:	46da      	mov	sl, fp
 8009916:	465a      	mov	r2, fp
 8009918:	e7c6      	b.n	80098a8 <_dtoa_r+0x220>
 800991a:	3101      	adds	r1, #1
 800991c:	0040      	lsls	r0, r0, #1
 800991e:	e7c7      	b.n	80098b0 <_dtoa_r+0x228>
 8009920:	636f4361 	.word	0x636f4361
 8009924:	3fd287a7 	.word	0x3fd287a7
 8009928:	8b60c8b3 	.word	0x8b60c8b3
 800992c:	3fc68a28 	.word	0x3fc68a28
 8009930:	509f79fb 	.word	0x509f79fb
 8009934:	3fd34413 	.word	0x3fd34413
 8009938:	0800bfff 	.word	0x0800bfff
 800993c:	0800c016 	.word	0x0800c016
 8009940:	7ff00000 	.word	0x7ff00000
 8009944:	0800bffb 	.word	0x0800bffb
 8009948:	0800bfc2 	.word	0x0800bfc2
 800994c:	0800bfc1 	.word	0x0800bfc1
 8009950:	0800c170 	.word	0x0800c170
 8009954:	0800c06e 	.word	0x0800c06e
 8009958:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800995c:	f1ba 0f0e 	cmp.w	sl, #14
 8009960:	6010      	str	r0, [r2, #0]
 8009962:	d86f      	bhi.n	8009a44 <_dtoa_r+0x3bc>
 8009964:	2c00      	cmp	r4, #0
 8009966:	d06d      	beq.n	8009a44 <_dtoa_r+0x3bc>
 8009968:	f1b8 0f00 	cmp.w	r8, #0
 800996c:	f340 80c2 	ble.w	8009af4 <_dtoa_r+0x46c>
 8009970:	4aca      	ldr	r2, [pc, #808]	@ (8009c9c <_dtoa_r+0x614>)
 8009972:	f008 010f 	and.w	r1, r8, #15
 8009976:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800997a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800997e:	ed92 7b00 	vldr	d7, [r2]
 8009982:	ea4f 1128 	mov.w	r1, r8, asr #4
 8009986:	f000 80a9 	beq.w	8009adc <_dtoa_r+0x454>
 800998a:	4ac5      	ldr	r2, [pc, #788]	@ (8009ca0 <_dtoa_r+0x618>)
 800998c:	ed92 6b08 	vldr	d6, [r2, #32]
 8009990:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009994:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009998:	f001 010f 	and.w	r1, r1, #15
 800999c:	2203      	movs	r2, #3
 800999e:	48c0      	ldr	r0, [pc, #768]	@ (8009ca0 <_dtoa_r+0x618>)
 80099a0:	2900      	cmp	r1, #0
 80099a2:	f040 809d 	bne.w	8009ae0 <_dtoa_r+0x458>
 80099a6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80099aa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80099ae:	ed8d 7b02 	vstr	d7, [sp, #8]
 80099b2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80099b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80099b8:	2900      	cmp	r1, #0
 80099ba:	f000 80c1 	beq.w	8009b40 <_dtoa_r+0x4b8>
 80099be:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80099c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80099c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099ca:	f140 80b9 	bpl.w	8009b40 <_dtoa_r+0x4b8>
 80099ce:	f1ba 0f00 	cmp.w	sl, #0
 80099d2:	f000 80b5 	beq.w	8009b40 <_dtoa_r+0x4b8>
 80099d6:	f1bb 0f00 	cmp.w	fp, #0
 80099da:	dd31      	ble.n	8009a40 <_dtoa_r+0x3b8>
 80099dc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80099e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80099e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80099e8:	f108 31ff 	add.w	r1, r8, #4294967295
 80099ec:	9104      	str	r1, [sp, #16]
 80099ee:	3201      	adds	r2, #1
 80099f0:	465c      	mov	r4, fp
 80099f2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80099f6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80099fa:	ee07 2a90 	vmov	s15, r2
 80099fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009a02:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009a06:	ee15 2a90 	vmov	r2, s11
 8009a0a:	ec51 0b15 	vmov	r0, r1, d5
 8009a0e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8009a12:	2c00      	cmp	r4, #0
 8009a14:	f040 8098 	bne.w	8009b48 <_dtoa_r+0x4c0>
 8009a18:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009a1c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009a20:	ec41 0b17 	vmov	d7, r0, r1
 8009a24:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a2c:	f300 8261 	bgt.w	8009ef2 <_dtoa_r+0x86a>
 8009a30:	eeb1 7b47 	vneg.f64	d7, d7
 8009a34:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a3c:	f100 80f5 	bmi.w	8009c2a <_dtoa_r+0x5a2>
 8009a40:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009a44:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009a46:	2a00      	cmp	r2, #0
 8009a48:	f2c0 812c 	blt.w	8009ca4 <_dtoa_r+0x61c>
 8009a4c:	f1b8 0f0e 	cmp.w	r8, #14
 8009a50:	f300 8128 	bgt.w	8009ca4 <_dtoa_r+0x61c>
 8009a54:	4b91      	ldr	r3, [pc, #580]	@ (8009c9c <_dtoa_r+0x614>)
 8009a56:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009a5a:	ed93 6b00 	vldr	d6, [r3]
 8009a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	da03      	bge.n	8009a6c <_dtoa_r+0x3e4>
 8009a64:	f1ba 0f00 	cmp.w	sl, #0
 8009a68:	f340 80d2 	ble.w	8009c10 <_dtoa_r+0x588>
 8009a6c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8009a70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a74:	463e      	mov	r6, r7
 8009a76:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009a7a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009a7e:	ee15 3a10 	vmov	r3, s10
 8009a82:	3330      	adds	r3, #48	@ 0x30
 8009a84:	f806 3b01 	strb.w	r3, [r6], #1
 8009a88:	1bf3      	subs	r3, r6, r7
 8009a8a:	459a      	cmp	sl, r3
 8009a8c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009a90:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009a94:	f040 80f8 	bne.w	8009c88 <_dtoa_r+0x600>
 8009a98:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009a9c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aa4:	f300 80dd 	bgt.w	8009c62 <_dtoa_r+0x5da>
 8009aa8:	eeb4 7b46 	vcmp.f64	d7, d6
 8009aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ab0:	d104      	bne.n	8009abc <_dtoa_r+0x434>
 8009ab2:	ee15 3a10 	vmov	r3, s10
 8009ab6:	07db      	lsls	r3, r3, #31
 8009ab8:	f100 80d3 	bmi.w	8009c62 <_dtoa_r+0x5da>
 8009abc:	9901      	ldr	r1, [sp, #4]
 8009abe:	4648      	mov	r0, r9
 8009ac0:	f000 ffc4 	bl	800aa4c <_Bfree>
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009ac8:	7033      	strb	r3, [r6, #0]
 8009aca:	f108 0301 	add.w	r3, r8, #1
 8009ace:	6013      	str	r3, [r2, #0]
 8009ad0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	f000 8304 	beq.w	800a0e0 <_dtoa_r+0xa58>
 8009ad8:	601e      	str	r6, [r3, #0]
 8009ada:	e301      	b.n	800a0e0 <_dtoa_r+0xa58>
 8009adc:	2202      	movs	r2, #2
 8009ade:	e75e      	b.n	800999e <_dtoa_r+0x316>
 8009ae0:	07cc      	lsls	r4, r1, #31
 8009ae2:	d504      	bpl.n	8009aee <_dtoa_r+0x466>
 8009ae4:	ed90 6b00 	vldr	d6, [r0]
 8009ae8:	3201      	adds	r2, #1
 8009aea:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009aee:	1049      	asrs	r1, r1, #1
 8009af0:	3008      	adds	r0, #8
 8009af2:	e755      	b.n	80099a0 <_dtoa_r+0x318>
 8009af4:	d022      	beq.n	8009b3c <_dtoa_r+0x4b4>
 8009af6:	f1c8 0100 	rsb	r1, r8, #0
 8009afa:	4a68      	ldr	r2, [pc, #416]	@ (8009c9c <_dtoa_r+0x614>)
 8009afc:	f001 000f 	and.w	r0, r1, #15
 8009b00:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009b04:	ed92 7b00 	vldr	d7, [r2]
 8009b08:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009b0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009b10:	4863      	ldr	r0, [pc, #396]	@ (8009ca0 <_dtoa_r+0x618>)
 8009b12:	1109      	asrs	r1, r1, #4
 8009b14:	2400      	movs	r4, #0
 8009b16:	2202      	movs	r2, #2
 8009b18:	b929      	cbnz	r1, 8009b26 <_dtoa_r+0x49e>
 8009b1a:	2c00      	cmp	r4, #0
 8009b1c:	f43f af49 	beq.w	80099b2 <_dtoa_r+0x32a>
 8009b20:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009b24:	e745      	b.n	80099b2 <_dtoa_r+0x32a>
 8009b26:	07ce      	lsls	r6, r1, #31
 8009b28:	d505      	bpl.n	8009b36 <_dtoa_r+0x4ae>
 8009b2a:	ed90 6b00 	vldr	d6, [r0]
 8009b2e:	3201      	adds	r2, #1
 8009b30:	2401      	movs	r4, #1
 8009b32:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009b36:	1049      	asrs	r1, r1, #1
 8009b38:	3008      	adds	r0, #8
 8009b3a:	e7ed      	b.n	8009b18 <_dtoa_r+0x490>
 8009b3c:	2202      	movs	r2, #2
 8009b3e:	e738      	b.n	80099b2 <_dtoa_r+0x32a>
 8009b40:	f8cd 8010 	str.w	r8, [sp, #16]
 8009b44:	4654      	mov	r4, sl
 8009b46:	e754      	b.n	80099f2 <_dtoa_r+0x36a>
 8009b48:	4a54      	ldr	r2, [pc, #336]	@ (8009c9c <_dtoa_r+0x614>)
 8009b4a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8009b4e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009b52:	9a08      	ldr	r2, [sp, #32]
 8009b54:	ec41 0b17 	vmov	d7, r0, r1
 8009b58:	443c      	add	r4, r7
 8009b5a:	b34a      	cbz	r2, 8009bb0 <_dtoa_r+0x528>
 8009b5c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8009b60:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8009b64:	463e      	mov	r6, r7
 8009b66:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009b6a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009b6e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009b72:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009b76:	ee14 2a90 	vmov	r2, s9
 8009b7a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009b7e:	3230      	adds	r2, #48	@ 0x30
 8009b80:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009b84:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b8c:	f806 2b01 	strb.w	r2, [r6], #1
 8009b90:	d438      	bmi.n	8009c04 <_dtoa_r+0x57c>
 8009b92:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009b96:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b9e:	d462      	bmi.n	8009c66 <_dtoa_r+0x5de>
 8009ba0:	42a6      	cmp	r6, r4
 8009ba2:	f43f af4d 	beq.w	8009a40 <_dtoa_r+0x3b8>
 8009ba6:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009baa:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009bae:	e7e0      	b.n	8009b72 <_dtoa_r+0x4ea>
 8009bb0:	4621      	mov	r1, r4
 8009bb2:	463e      	mov	r6, r7
 8009bb4:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009bb8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009bbc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009bc0:	ee14 2a90 	vmov	r2, s9
 8009bc4:	3230      	adds	r2, #48	@ 0x30
 8009bc6:	f806 2b01 	strb.w	r2, [r6], #1
 8009bca:	42a6      	cmp	r6, r4
 8009bcc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009bd0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009bd4:	d119      	bne.n	8009c0a <_dtoa_r+0x582>
 8009bd6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8009bda:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009bde:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009be6:	dc3e      	bgt.n	8009c66 <_dtoa_r+0x5de>
 8009be8:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009bec:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bf4:	f57f af24 	bpl.w	8009a40 <_dtoa_r+0x3b8>
 8009bf8:	460e      	mov	r6, r1
 8009bfa:	3901      	subs	r1, #1
 8009bfc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009c00:	2b30      	cmp	r3, #48	@ 0x30
 8009c02:	d0f9      	beq.n	8009bf8 <_dtoa_r+0x570>
 8009c04:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009c08:	e758      	b.n	8009abc <_dtoa_r+0x434>
 8009c0a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009c0e:	e7d5      	b.n	8009bbc <_dtoa_r+0x534>
 8009c10:	d10b      	bne.n	8009c2a <_dtoa_r+0x5a2>
 8009c12:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009c16:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009c1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c1e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c26:	f2c0 8161 	blt.w	8009eec <_dtoa_r+0x864>
 8009c2a:	2400      	movs	r4, #0
 8009c2c:	4625      	mov	r5, r4
 8009c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c30:	43db      	mvns	r3, r3
 8009c32:	9304      	str	r3, [sp, #16]
 8009c34:	463e      	mov	r6, r7
 8009c36:	f04f 0800 	mov.w	r8, #0
 8009c3a:	4621      	mov	r1, r4
 8009c3c:	4648      	mov	r0, r9
 8009c3e:	f000 ff05 	bl	800aa4c <_Bfree>
 8009c42:	2d00      	cmp	r5, #0
 8009c44:	d0de      	beq.n	8009c04 <_dtoa_r+0x57c>
 8009c46:	f1b8 0f00 	cmp.w	r8, #0
 8009c4a:	d005      	beq.n	8009c58 <_dtoa_r+0x5d0>
 8009c4c:	45a8      	cmp	r8, r5
 8009c4e:	d003      	beq.n	8009c58 <_dtoa_r+0x5d0>
 8009c50:	4641      	mov	r1, r8
 8009c52:	4648      	mov	r0, r9
 8009c54:	f000 fefa 	bl	800aa4c <_Bfree>
 8009c58:	4629      	mov	r1, r5
 8009c5a:	4648      	mov	r0, r9
 8009c5c:	f000 fef6 	bl	800aa4c <_Bfree>
 8009c60:	e7d0      	b.n	8009c04 <_dtoa_r+0x57c>
 8009c62:	f8cd 8010 	str.w	r8, [sp, #16]
 8009c66:	4633      	mov	r3, r6
 8009c68:	461e      	mov	r6, r3
 8009c6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c6e:	2a39      	cmp	r2, #57	@ 0x39
 8009c70:	d106      	bne.n	8009c80 <_dtoa_r+0x5f8>
 8009c72:	429f      	cmp	r7, r3
 8009c74:	d1f8      	bne.n	8009c68 <_dtoa_r+0x5e0>
 8009c76:	9a04      	ldr	r2, [sp, #16]
 8009c78:	3201      	adds	r2, #1
 8009c7a:	9204      	str	r2, [sp, #16]
 8009c7c:	2230      	movs	r2, #48	@ 0x30
 8009c7e:	703a      	strb	r2, [r7, #0]
 8009c80:	781a      	ldrb	r2, [r3, #0]
 8009c82:	3201      	adds	r2, #1
 8009c84:	701a      	strb	r2, [r3, #0]
 8009c86:	e7bd      	b.n	8009c04 <_dtoa_r+0x57c>
 8009c88:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009c8c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c94:	f47f aeef 	bne.w	8009a76 <_dtoa_r+0x3ee>
 8009c98:	e710      	b.n	8009abc <_dtoa_r+0x434>
 8009c9a:	bf00      	nop
 8009c9c:	0800c170 	.word	0x0800c170
 8009ca0:	0800c148 	.word	0x0800c148
 8009ca4:	9908      	ldr	r1, [sp, #32]
 8009ca6:	2900      	cmp	r1, #0
 8009ca8:	f000 80e3 	beq.w	8009e72 <_dtoa_r+0x7ea>
 8009cac:	9907      	ldr	r1, [sp, #28]
 8009cae:	2901      	cmp	r1, #1
 8009cb0:	f300 80c8 	bgt.w	8009e44 <_dtoa_r+0x7bc>
 8009cb4:	2d00      	cmp	r5, #0
 8009cb6:	f000 80c1 	beq.w	8009e3c <_dtoa_r+0x7b4>
 8009cba:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009cbe:	9e05      	ldr	r6, [sp, #20]
 8009cc0:	461c      	mov	r4, r3
 8009cc2:	9304      	str	r3, [sp, #16]
 8009cc4:	9b05      	ldr	r3, [sp, #20]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	9305      	str	r3, [sp, #20]
 8009cca:	9b06      	ldr	r3, [sp, #24]
 8009ccc:	2101      	movs	r1, #1
 8009cce:	4413      	add	r3, r2
 8009cd0:	4648      	mov	r0, r9
 8009cd2:	9306      	str	r3, [sp, #24]
 8009cd4:	f000 ffb8 	bl	800ac48 <__i2b>
 8009cd8:	9b04      	ldr	r3, [sp, #16]
 8009cda:	4605      	mov	r5, r0
 8009cdc:	b166      	cbz	r6, 8009cf8 <_dtoa_r+0x670>
 8009cde:	9a06      	ldr	r2, [sp, #24]
 8009ce0:	2a00      	cmp	r2, #0
 8009ce2:	dd09      	ble.n	8009cf8 <_dtoa_r+0x670>
 8009ce4:	42b2      	cmp	r2, r6
 8009ce6:	9905      	ldr	r1, [sp, #20]
 8009ce8:	bfa8      	it	ge
 8009cea:	4632      	movge	r2, r6
 8009cec:	1a89      	subs	r1, r1, r2
 8009cee:	9105      	str	r1, [sp, #20]
 8009cf0:	9906      	ldr	r1, [sp, #24]
 8009cf2:	1ab6      	subs	r6, r6, r2
 8009cf4:	1a8a      	subs	r2, r1, r2
 8009cf6:	9206      	str	r2, [sp, #24]
 8009cf8:	b1fb      	cbz	r3, 8009d3a <_dtoa_r+0x6b2>
 8009cfa:	9a08      	ldr	r2, [sp, #32]
 8009cfc:	2a00      	cmp	r2, #0
 8009cfe:	f000 80bc 	beq.w	8009e7a <_dtoa_r+0x7f2>
 8009d02:	b19c      	cbz	r4, 8009d2c <_dtoa_r+0x6a4>
 8009d04:	4629      	mov	r1, r5
 8009d06:	4622      	mov	r2, r4
 8009d08:	4648      	mov	r0, r9
 8009d0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d0c:	f001 f85c 	bl	800adc8 <__pow5mult>
 8009d10:	9a01      	ldr	r2, [sp, #4]
 8009d12:	4601      	mov	r1, r0
 8009d14:	4605      	mov	r5, r0
 8009d16:	4648      	mov	r0, r9
 8009d18:	f000 ffac 	bl	800ac74 <__multiply>
 8009d1c:	9901      	ldr	r1, [sp, #4]
 8009d1e:	9004      	str	r0, [sp, #16]
 8009d20:	4648      	mov	r0, r9
 8009d22:	f000 fe93 	bl	800aa4c <_Bfree>
 8009d26:	9a04      	ldr	r2, [sp, #16]
 8009d28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d2a:	9201      	str	r2, [sp, #4]
 8009d2c:	1b1a      	subs	r2, r3, r4
 8009d2e:	d004      	beq.n	8009d3a <_dtoa_r+0x6b2>
 8009d30:	9901      	ldr	r1, [sp, #4]
 8009d32:	4648      	mov	r0, r9
 8009d34:	f001 f848 	bl	800adc8 <__pow5mult>
 8009d38:	9001      	str	r0, [sp, #4]
 8009d3a:	2101      	movs	r1, #1
 8009d3c:	4648      	mov	r0, r9
 8009d3e:	f000 ff83 	bl	800ac48 <__i2b>
 8009d42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d44:	4604      	mov	r4, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	f000 81d0 	beq.w	800a0ec <_dtoa_r+0xa64>
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	4601      	mov	r1, r0
 8009d50:	4648      	mov	r0, r9
 8009d52:	f001 f839 	bl	800adc8 <__pow5mult>
 8009d56:	9b07      	ldr	r3, [sp, #28]
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	4604      	mov	r4, r0
 8009d5c:	f300 8095 	bgt.w	8009e8a <_dtoa_r+0x802>
 8009d60:	9b02      	ldr	r3, [sp, #8]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	f040 808b 	bne.w	8009e7e <_dtoa_r+0x7f6>
 8009d68:	9b03      	ldr	r3, [sp, #12]
 8009d6a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009d6e:	2a00      	cmp	r2, #0
 8009d70:	f040 8087 	bne.w	8009e82 <_dtoa_r+0x7fa>
 8009d74:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009d78:	0d12      	lsrs	r2, r2, #20
 8009d7a:	0512      	lsls	r2, r2, #20
 8009d7c:	2a00      	cmp	r2, #0
 8009d7e:	f000 8082 	beq.w	8009e86 <_dtoa_r+0x7fe>
 8009d82:	9b05      	ldr	r3, [sp, #20]
 8009d84:	3301      	adds	r3, #1
 8009d86:	9305      	str	r3, [sp, #20]
 8009d88:	9b06      	ldr	r3, [sp, #24]
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	9306      	str	r3, [sp, #24]
 8009d8e:	2301      	movs	r3, #1
 8009d90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	f000 81af 	beq.w	800a0f8 <_dtoa_r+0xa70>
 8009d9a:	6922      	ldr	r2, [r4, #16]
 8009d9c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009da0:	6910      	ldr	r0, [r2, #16]
 8009da2:	f000 ff05 	bl	800abb0 <__hi0bits>
 8009da6:	f1c0 0020 	rsb	r0, r0, #32
 8009daa:	9b06      	ldr	r3, [sp, #24]
 8009dac:	4418      	add	r0, r3
 8009dae:	f010 001f 	ands.w	r0, r0, #31
 8009db2:	d076      	beq.n	8009ea2 <_dtoa_r+0x81a>
 8009db4:	f1c0 0220 	rsb	r2, r0, #32
 8009db8:	2a04      	cmp	r2, #4
 8009dba:	dd69      	ble.n	8009e90 <_dtoa_r+0x808>
 8009dbc:	9b05      	ldr	r3, [sp, #20]
 8009dbe:	f1c0 001c 	rsb	r0, r0, #28
 8009dc2:	4403      	add	r3, r0
 8009dc4:	9305      	str	r3, [sp, #20]
 8009dc6:	9b06      	ldr	r3, [sp, #24]
 8009dc8:	4406      	add	r6, r0
 8009dca:	4403      	add	r3, r0
 8009dcc:	9306      	str	r3, [sp, #24]
 8009dce:	9b05      	ldr	r3, [sp, #20]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	dd05      	ble.n	8009de0 <_dtoa_r+0x758>
 8009dd4:	9901      	ldr	r1, [sp, #4]
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	4648      	mov	r0, r9
 8009dda:	f001 f84f 	bl	800ae7c <__lshift>
 8009dde:	9001      	str	r0, [sp, #4]
 8009de0:	9b06      	ldr	r3, [sp, #24]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	dd05      	ble.n	8009df2 <_dtoa_r+0x76a>
 8009de6:	4621      	mov	r1, r4
 8009de8:	461a      	mov	r2, r3
 8009dea:	4648      	mov	r0, r9
 8009dec:	f001 f846 	bl	800ae7c <__lshift>
 8009df0:	4604      	mov	r4, r0
 8009df2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d056      	beq.n	8009ea6 <_dtoa_r+0x81e>
 8009df8:	9801      	ldr	r0, [sp, #4]
 8009dfa:	4621      	mov	r1, r4
 8009dfc:	f001 f8aa 	bl	800af54 <__mcmp>
 8009e00:	2800      	cmp	r0, #0
 8009e02:	da50      	bge.n	8009ea6 <_dtoa_r+0x81e>
 8009e04:	f108 33ff 	add.w	r3, r8, #4294967295
 8009e08:	9304      	str	r3, [sp, #16]
 8009e0a:	9901      	ldr	r1, [sp, #4]
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	220a      	movs	r2, #10
 8009e10:	4648      	mov	r0, r9
 8009e12:	f000 fe3d 	bl	800aa90 <__multadd>
 8009e16:	9b08      	ldr	r3, [sp, #32]
 8009e18:	9001      	str	r0, [sp, #4]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	f000 816e 	beq.w	800a0fc <_dtoa_r+0xa74>
 8009e20:	4629      	mov	r1, r5
 8009e22:	2300      	movs	r3, #0
 8009e24:	220a      	movs	r2, #10
 8009e26:	4648      	mov	r0, r9
 8009e28:	f000 fe32 	bl	800aa90 <__multadd>
 8009e2c:	f1bb 0f00 	cmp.w	fp, #0
 8009e30:	4605      	mov	r5, r0
 8009e32:	dc64      	bgt.n	8009efe <_dtoa_r+0x876>
 8009e34:	9b07      	ldr	r3, [sp, #28]
 8009e36:	2b02      	cmp	r3, #2
 8009e38:	dc3e      	bgt.n	8009eb8 <_dtoa_r+0x830>
 8009e3a:	e060      	b.n	8009efe <_dtoa_r+0x876>
 8009e3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e3e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009e42:	e73c      	b.n	8009cbe <_dtoa_r+0x636>
 8009e44:	f10a 34ff 	add.w	r4, sl, #4294967295
 8009e48:	42a3      	cmp	r3, r4
 8009e4a:	bfbf      	itttt	lt
 8009e4c:	1ae2      	sublt	r2, r4, r3
 8009e4e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009e50:	189b      	addlt	r3, r3, r2
 8009e52:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8009e54:	bfae      	itee	ge
 8009e56:	1b1c      	subge	r4, r3, r4
 8009e58:	4623      	movlt	r3, r4
 8009e5a:	2400      	movlt	r4, #0
 8009e5c:	f1ba 0f00 	cmp.w	sl, #0
 8009e60:	bfb5      	itete	lt
 8009e62:	9a05      	ldrlt	r2, [sp, #20]
 8009e64:	9e05      	ldrge	r6, [sp, #20]
 8009e66:	eba2 060a 	sublt.w	r6, r2, sl
 8009e6a:	4652      	movge	r2, sl
 8009e6c:	bfb8      	it	lt
 8009e6e:	2200      	movlt	r2, #0
 8009e70:	e727      	b.n	8009cc2 <_dtoa_r+0x63a>
 8009e72:	9e05      	ldr	r6, [sp, #20]
 8009e74:	9d08      	ldr	r5, [sp, #32]
 8009e76:	461c      	mov	r4, r3
 8009e78:	e730      	b.n	8009cdc <_dtoa_r+0x654>
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	e758      	b.n	8009d30 <_dtoa_r+0x6a8>
 8009e7e:	2300      	movs	r3, #0
 8009e80:	e786      	b.n	8009d90 <_dtoa_r+0x708>
 8009e82:	9b02      	ldr	r3, [sp, #8]
 8009e84:	e784      	b.n	8009d90 <_dtoa_r+0x708>
 8009e86:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009e88:	e783      	b.n	8009d92 <_dtoa_r+0x70a>
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e8e:	e784      	b.n	8009d9a <_dtoa_r+0x712>
 8009e90:	d09d      	beq.n	8009dce <_dtoa_r+0x746>
 8009e92:	9b05      	ldr	r3, [sp, #20]
 8009e94:	321c      	adds	r2, #28
 8009e96:	4413      	add	r3, r2
 8009e98:	9305      	str	r3, [sp, #20]
 8009e9a:	9b06      	ldr	r3, [sp, #24]
 8009e9c:	4416      	add	r6, r2
 8009e9e:	4413      	add	r3, r2
 8009ea0:	e794      	b.n	8009dcc <_dtoa_r+0x744>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	e7f5      	b.n	8009e92 <_dtoa_r+0x80a>
 8009ea6:	f1ba 0f00 	cmp.w	sl, #0
 8009eaa:	f8cd 8010 	str.w	r8, [sp, #16]
 8009eae:	46d3      	mov	fp, sl
 8009eb0:	dc21      	bgt.n	8009ef6 <_dtoa_r+0x86e>
 8009eb2:	9b07      	ldr	r3, [sp, #28]
 8009eb4:	2b02      	cmp	r3, #2
 8009eb6:	dd1e      	ble.n	8009ef6 <_dtoa_r+0x86e>
 8009eb8:	f1bb 0f00 	cmp.w	fp, #0
 8009ebc:	f47f aeb7 	bne.w	8009c2e <_dtoa_r+0x5a6>
 8009ec0:	4621      	mov	r1, r4
 8009ec2:	465b      	mov	r3, fp
 8009ec4:	2205      	movs	r2, #5
 8009ec6:	4648      	mov	r0, r9
 8009ec8:	f000 fde2 	bl	800aa90 <__multadd>
 8009ecc:	4601      	mov	r1, r0
 8009ece:	4604      	mov	r4, r0
 8009ed0:	9801      	ldr	r0, [sp, #4]
 8009ed2:	f001 f83f 	bl	800af54 <__mcmp>
 8009ed6:	2800      	cmp	r0, #0
 8009ed8:	f77f aea9 	ble.w	8009c2e <_dtoa_r+0x5a6>
 8009edc:	463e      	mov	r6, r7
 8009ede:	2331      	movs	r3, #49	@ 0x31
 8009ee0:	f806 3b01 	strb.w	r3, [r6], #1
 8009ee4:	9b04      	ldr	r3, [sp, #16]
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	9304      	str	r3, [sp, #16]
 8009eea:	e6a4      	b.n	8009c36 <_dtoa_r+0x5ae>
 8009eec:	f8cd 8010 	str.w	r8, [sp, #16]
 8009ef0:	4654      	mov	r4, sl
 8009ef2:	4625      	mov	r5, r4
 8009ef4:	e7f2      	b.n	8009edc <_dtoa_r+0x854>
 8009ef6:	9b08      	ldr	r3, [sp, #32]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	f000 8103 	beq.w	800a104 <_dtoa_r+0xa7c>
 8009efe:	2e00      	cmp	r6, #0
 8009f00:	dd05      	ble.n	8009f0e <_dtoa_r+0x886>
 8009f02:	4629      	mov	r1, r5
 8009f04:	4632      	mov	r2, r6
 8009f06:	4648      	mov	r0, r9
 8009f08:	f000 ffb8 	bl	800ae7c <__lshift>
 8009f0c:	4605      	mov	r5, r0
 8009f0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d058      	beq.n	8009fc6 <_dtoa_r+0x93e>
 8009f14:	6869      	ldr	r1, [r5, #4]
 8009f16:	4648      	mov	r0, r9
 8009f18:	f000 fd58 	bl	800a9cc <_Balloc>
 8009f1c:	4606      	mov	r6, r0
 8009f1e:	b928      	cbnz	r0, 8009f2c <_dtoa_r+0x8a4>
 8009f20:	4b82      	ldr	r3, [pc, #520]	@ (800a12c <_dtoa_r+0xaa4>)
 8009f22:	4602      	mov	r2, r0
 8009f24:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009f28:	f7ff bbc7 	b.w	80096ba <_dtoa_r+0x32>
 8009f2c:	692a      	ldr	r2, [r5, #16]
 8009f2e:	3202      	adds	r2, #2
 8009f30:	0092      	lsls	r2, r2, #2
 8009f32:	f105 010c 	add.w	r1, r5, #12
 8009f36:	300c      	adds	r0, #12
 8009f38:	f7ff faff 	bl	800953a <memcpy>
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	4631      	mov	r1, r6
 8009f40:	4648      	mov	r0, r9
 8009f42:	f000 ff9b 	bl	800ae7c <__lshift>
 8009f46:	1c7b      	adds	r3, r7, #1
 8009f48:	9305      	str	r3, [sp, #20]
 8009f4a:	eb07 030b 	add.w	r3, r7, fp
 8009f4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f50:	9b02      	ldr	r3, [sp, #8]
 8009f52:	f003 0301 	and.w	r3, r3, #1
 8009f56:	46a8      	mov	r8, r5
 8009f58:	9308      	str	r3, [sp, #32]
 8009f5a:	4605      	mov	r5, r0
 8009f5c:	9b05      	ldr	r3, [sp, #20]
 8009f5e:	9801      	ldr	r0, [sp, #4]
 8009f60:	4621      	mov	r1, r4
 8009f62:	f103 3bff 	add.w	fp, r3, #4294967295
 8009f66:	f7ff fb05 	bl	8009574 <quorem>
 8009f6a:	4641      	mov	r1, r8
 8009f6c:	9002      	str	r0, [sp, #8]
 8009f6e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8009f72:	9801      	ldr	r0, [sp, #4]
 8009f74:	f000 ffee 	bl	800af54 <__mcmp>
 8009f78:	462a      	mov	r2, r5
 8009f7a:	9006      	str	r0, [sp, #24]
 8009f7c:	4621      	mov	r1, r4
 8009f7e:	4648      	mov	r0, r9
 8009f80:	f001 f804 	bl	800af8c <__mdiff>
 8009f84:	68c2      	ldr	r2, [r0, #12]
 8009f86:	4606      	mov	r6, r0
 8009f88:	b9fa      	cbnz	r2, 8009fca <_dtoa_r+0x942>
 8009f8a:	4601      	mov	r1, r0
 8009f8c:	9801      	ldr	r0, [sp, #4]
 8009f8e:	f000 ffe1 	bl	800af54 <__mcmp>
 8009f92:	4602      	mov	r2, r0
 8009f94:	4631      	mov	r1, r6
 8009f96:	4648      	mov	r0, r9
 8009f98:	920a      	str	r2, [sp, #40]	@ 0x28
 8009f9a:	f000 fd57 	bl	800aa4c <_Bfree>
 8009f9e:	9b07      	ldr	r3, [sp, #28]
 8009fa0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009fa2:	9e05      	ldr	r6, [sp, #20]
 8009fa4:	ea43 0102 	orr.w	r1, r3, r2
 8009fa8:	9b08      	ldr	r3, [sp, #32]
 8009faa:	4319      	orrs	r1, r3
 8009fac:	d10f      	bne.n	8009fce <_dtoa_r+0x946>
 8009fae:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009fb2:	d028      	beq.n	800a006 <_dtoa_r+0x97e>
 8009fb4:	9b06      	ldr	r3, [sp, #24]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	dd02      	ble.n	8009fc0 <_dtoa_r+0x938>
 8009fba:	9b02      	ldr	r3, [sp, #8]
 8009fbc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8009fc0:	f88b a000 	strb.w	sl, [fp]
 8009fc4:	e639      	b.n	8009c3a <_dtoa_r+0x5b2>
 8009fc6:	4628      	mov	r0, r5
 8009fc8:	e7bd      	b.n	8009f46 <_dtoa_r+0x8be>
 8009fca:	2201      	movs	r2, #1
 8009fcc:	e7e2      	b.n	8009f94 <_dtoa_r+0x90c>
 8009fce:	9b06      	ldr	r3, [sp, #24]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	db04      	blt.n	8009fde <_dtoa_r+0x956>
 8009fd4:	9907      	ldr	r1, [sp, #28]
 8009fd6:	430b      	orrs	r3, r1
 8009fd8:	9908      	ldr	r1, [sp, #32]
 8009fda:	430b      	orrs	r3, r1
 8009fdc:	d120      	bne.n	800a020 <_dtoa_r+0x998>
 8009fde:	2a00      	cmp	r2, #0
 8009fe0:	ddee      	ble.n	8009fc0 <_dtoa_r+0x938>
 8009fe2:	9901      	ldr	r1, [sp, #4]
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	4648      	mov	r0, r9
 8009fe8:	f000 ff48 	bl	800ae7c <__lshift>
 8009fec:	4621      	mov	r1, r4
 8009fee:	9001      	str	r0, [sp, #4]
 8009ff0:	f000 ffb0 	bl	800af54 <__mcmp>
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	dc03      	bgt.n	800a000 <_dtoa_r+0x978>
 8009ff8:	d1e2      	bne.n	8009fc0 <_dtoa_r+0x938>
 8009ffa:	f01a 0f01 	tst.w	sl, #1
 8009ffe:	d0df      	beq.n	8009fc0 <_dtoa_r+0x938>
 800a000:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a004:	d1d9      	bne.n	8009fba <_dtoa_r+0x932>
 800a006:	2339      	movs	r3, #57	@ 0x39
 800a008:	f88b 3000 	strb.w	r3, [fp]
 800a00c:	4633      	mov	r3, r6
 800a00e:	461e      	mov	r6, r3
 800a010:	3b01      	subs	r3, #1
 800a012:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a016:	2a39      	cmp	r2, #57	@ 0x39
 800a018:	d053      	beq.n	800a0c2 <_dtoa_r+0xa3a>
 800a01a:	3201      	adds	r2, #1
 800a01c:	701a      	strb	r2, [r3, #0]
 800a01e:	e60c      	b.n	8009c3a <_dtoa_r+0x5b2>
 800a020:	2a00      	cmp	r2, #0
 800a022:	dd07      	ble.n	800a034 <_dtoa_r+0x9ac>
 800a024:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a028:	d0ed      	beq.n	800a006 <_dtoa_r+0x97e>
 800a02a:	f10a 0301 	add.w	r3, sl, #1
 800a02e:	f88b 3000 	strb.w	r3, [fp]
 800a032:	e602      	b.n	8009c3a <_dtoa_r+0x5b2>
 800a034:	9b05      	ldr	r3, [sp, #20]
 800a036:	9a05      	ldr	r2, [sp, #20]
 800a038:	f803 ac01 	strb.w	sl, [r3, #-1]
 800a03c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a03e:	4293      	cmp	r3, r2
 800a040:	d029      	beq.n	800a096 <_dtoa_r+0xa0e>
 800a042:	9901      	ldr	r1, [sp, #4]
 800a044:	2300      	movs	r3, #0
 800a046:	220a      	movs	r2, #10
 800a048:	4648      	mov	r0, r9
 800a04a:	f000 fd21 	bl	800aa90 <__multadd>
 800a04e:	45a8      	cmp	r8, r5
 800a050:	9001      	str	r0, [sp, #4]
 800a052:	f04f 0300 	mov.w	r3, #0
 800a056:	f04f 020a 	mov.w	r2, #10
 800a05a:	4641      	mov	r1, r8
 800a05c:	4648      	mov	r0, r9
 800a05e:	d107      	bne.n	800a070 <_dtoa_r+0x9e8>
 800a060:	f000 fd16 	bl	800aa90 <__multadd>
 800a064:	4680      	mov	r8, r0
 800a066:	4605      	mov	r5, r0
 800a068:	9b05      	ldr	r3, [sp, #20]
 800a06a:	3301      	adds	r3, #1
 800a06c:	9305      	str	r3, [sp, #20]
 800a06e:	e775      	b.n	8009f5c <_dtoa_r+0x8d4>
 800a070:	f000 fd0e 	bl	800aa90 <__multadd>
 800a074:	4629      	mov	r1, r5
 800a076:	4680      	mov	r8, r0
 800a078:	2300      	movs	r3, #0
 800a07a:	220a      	movs	r2, #10
 800a07c:	4648      	mov	r0, r9
 800a07e:	f000 fd07 	bl	800aa90 <__multadd>
 800a082:	4605      	mov	r5, r0
 800a084:	e7f0      	b.n	800a068 <_dtoa_r+0x9e0>
 800a086:	f1bb 0f00 	cmp.w	fp, #0
 800a08a:	bfcc      	ite	gt
 800a08c:	465e      	movgt	r6, fp
 800a08e:	2601      	movle	r6, #1
 800a090:	443e      	add	r6, r7
 800a092:	f04f 0800 	mov.w	r8, #0
 800a096:	9901      	ldr	r1, [sp, #4]
 800a098:	2201      	movs	r2, #1
 800a09a:	4648      	mov	r0, r9
 800a09c:	f000 feee 	bl	800ae7c <__lshift>
 800a0a0:	4621      	mov	r1, r4
 800a0a2:	9001      	str	r0, [sp, #4]
 800a0a4:	f000 ff56 	bl	800af54 <__mcmp>
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	dcaf      	bgt.n	800a00c <_dtoa_r+0x984>
 800a0ac:	d102      	bne.n	800a0b4 <_dtoa_r+0xa2c>
 800a0ae:	f01a 0f01 	tst.w	sl, #1
 800a0b2:	d1ab      	bne.n	800a00c <_dtoa_r+0x984>
 800a0b4:	4633      	mov	r3, r6
 800a0b6:	461e      	mov	r6, r3
 800a0b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0bc:	2a30      	cmp	r2, #48	@ 0x30
 800a0be:	d0fa      	beq.n	800a0b6 <_dtoa_r+0xa2e>
 800a0c0:	e5bb      	b.n	8009c3a <_dtoa_r+0x5b2>
 800a0c2:	429f      	cmp	r7, r3
 800a0c4:	d1a3      	bne.n	800a00e <_dtoa_r+0x986>
 800a0c6:	9b04      	ldr	r3, [sp, #16]
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	9304      	str	r3, [sp, #16]
 800a0cc:	2331      	movs	r3, #49	@ 0x31
 800a0ce:	703b      	strb	r3, [r7, #0]
 800a0d0:	e5b3      	b.n	8009c3a <_dtoa_r+0x5b2>
 800a0d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a0d4:	4f16      	ldr	r7, [pc, #88]	@ (800a130 <_dtoa_r+0xaa8>)
 800a0d6:	b11b      	cbz	r3, 800a0e0 <_dtoa_r+0xa58>
 800a0d8:	f107 0308 	add.w	r3, r7, #8
 800a0dc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a0de:	6013      	str	r3, [r2, #0]
 800a0e0:	4638      	mov	r0, r7
 800a0e2:	b011      	add	sp, #68	@ 0x44
 800a0e4:	ecbd 8b02 	vpop	{d8}
 800a0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ec:	9b07      	ldr	r3, [sp, #28]
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	f77f ae36 	ble.w	8009d60 <_dtoa_r+0x6d8>
 800a0f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0f8:	2001      	movs	r0, #1
 800a0fa:	e656      	b.n	8009daa <_dtoa_r+0x722>
 800a0fc:	f1bb 0f00 	cmp.w	fp, #0
 800a100:	f77f aed7 	ble.w	8009eb2 <_dtoa_r+0x82a>
 800a104:	463e      	mov	r6, r7
 800a106:	9801      	ldr	r0, [sp, #4]
 800a108:	4621      	mov	r1, r4
 800a10a:	f7ff fa33 	bl	8009574 <quorem>
 800a10e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a112:	f806 ab01 	strb.w	sl, [r6], #1
 800a116:	1bf2      	subs	r2, r6, r7
 800a118:	4593      	cmp	fp, r2
 800a11a:	ddb4      	ble.n	800a086 <_dtoa_r+0x9fe>
 800a11c:	9901      	ldr	r1, [sp, #4]
 800a11e:	2300      	movs	r3, #0
 800a120:	220a      	movs	r2, #10
 800a122:	4648      	mov	r0, r9
 800a124:	f000 fcb4 	bl	800aa90 <__multadd>
 800a128:	9001      	str	r0, [sp, #4]
 800a12a:	e7ec      	b.n	800a106 <_dtoa_r+0xa7e>
 800a12c:	0800c06e 	.word	0x0800c06e
 800a130:	0800bff2 	.word	0x0800bff2

0800a134 <_free_r>:
 800a134:	b538      	push	{r3, r4, r5, lr}
 800a136:	4605      	mov	r5, r0
 800a138:	2900      	cmp	r1, #0
 800a13a:	d041      	beq.n	800a1c0 <_free_r+0x8c>
 800a13c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a140:	1f0c      	subs	r4, r1, #4
 800a142:	2b00      	cmp	r3, #0
 800a144:	bfb8      	it	lt
 800a146:	18e4      	addlt	r4, r4, r3
 800a148:	f000 fc34 	bl	800a9b4 <__malloc_lock>
 800a14c:	4a1d      	ldr	r2, [pc, #116]	@ (800a1c4 <_free_r+0x90>)
 800a14e:	6813      	ldr	r3, [r2, #0]
 800a150:	b933      	cbnz	r3, 800a160 <_free_r+0x2c>
 800a152:	6063      	str	r3, [r4, #4]
 800a154:	6014      	str	r4, [r2, #0]
 800a156:	4628      	mov	r0, r5
 800a158:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a15c:	f000 bc30 	b.w	800a9c0 <__malloc_unlock>
 800a160:	42a3      	cmp	r3, r4
 800a162:	d908      	bls.n	800a176 <_free_r+0x42>
 800a164:	6820      	ldr	r0, [r4, #0]
 800a166:	1821      	adds	r1, r4, r0
 800a168:	428b      	cmp	r3, r1
 800a16a:	bf01      	itttt	eq
 800a16c:	6819      	ldreq	r1, [r3, #0]
 800a16e:	685b      	ldreq	r3, [r3, #4]
 800a170:	1809      	addeq	r1, r1, r0
 800a172:	6021      	streq	r1, [r4, #0]
 800a174:	e7ed      	b.n	800a152 <_free_r+0x1e>
 800a176:	461a      	mov	r2, r3
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	b10b      	cbz	r3, 800a180 <_free_r+0x4c>
 800a17c:	42a3      	cmp	r3, r4
 800a17e:	d9fa      	bls.n	800a176 <_free_r+0x42>
 800a180:	6811      	ldr	r1, [r2, #0]
 800a182:	1850      	adds	r0, r2, r1
 800a184:	42a0      	cmp	r0, r4
 800a186:	d10b      	bne.n	800a1a0 <_free_r+0x6c>
 800a188:	6820      	ldr	r0, [r4, #0]
 800a18a:	4401      	add	r1, r0
 800a18c:	1850      	adds	r0, r2, r1
 800a18e:	4283      	cmp	r3, r0
 800a190:	6011      	str	r1, [r2, #0]
 800a192:	d1e0      	bne.n	800a156 <_free_r+0x22>
 800a194:	6818      	ldr	r0, [r3, #0]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	6053      	str	r3, [r2, #4]
 800a19a:	4408      	add	r0, r1
 800a19c:	6010      	str	r0, [r2, #0]
 800a19e:	e7da      	b.n	800a156 <_free_r+0x22>
 800a1a0:	d902      	bls.n	800a1a8 <_free_r+0x74>
 800a1a2:	230c      	movs	r3, #12
 800a1a4:	602b      	str	r3, [r5, #0]
 800a1a6:	e7d6      	b.n	800a156 <_free_r+0x22>
 800a1a8:	6820      	ldr	r0, [r4, #0]
 800a1aa:	1821      	adds	r1, r4, r0
 800a1ac:	428b      	cmp	r3, r1
 800a1ae:	bf04      	itt	eq
 800a1b0:	6819      	ldreq	r1, [r3, #0]
 800a1b2:	685b      	ldreq	r3, [r3, #4]
 800a1b4:	6063      	str	r3, [r4, #4]
 800a1b6:	bf04      	itt	eq
 800a1b8:	1809      	addeq	r1, r1, r0
 800a1ba:	6021      	streq	r1, [r4, #0]
 800a1bc:	6054      	str	r4, [r2, #4]
 800a1be:	e7ca      	b.n	800a156 <_free_r+0x22>
 800a1c0:	bd38      	pop	{r3, r4, r5, pc}
 800a1c2:	bf00      	nop
 800a1c4:	20000c4c 	.word	0x20000c4c

0800a1c8 <rshift>:
 800a1c8:	6903      	ldr	r3, [r0, #16]
 800a1ca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a1ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a1d2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a1d6:	f100 0414 	add.w	r4, r0, #20
 800a1da:	dd45      	ble.n	800a268 <rshift+0xa0>
 800a1dc:	f011 011f 	ands.w	r1, r1, #31
 800a1e0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a1e4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a1e8:	d10c      	bne.n	800a204 <rshift+0x3c>
 800a1ea:	f100 0710 	add.w	r7, r0, #16
 800a1ee:	4629      	mov	r1, r5
 800a1f0:	42b1      	cmp	r1, r6
 800a1f2:	d334      	bcc.n	800a25e <rshift+0x96>
 800a1f4:	1a9b      	subs	r3, r3, r2
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	1eea      	subs	r2, r5, #3
 800a1fa:	4296      	cmp	r6, r2
 800a1fc:	bf38      	it	cc
 800a1fe:	2300      	movcc	r3, #0
 800a200:	4423      	add	r3, r4
 800a202:	e015      	b.n	800a230 <rshift+0x68>
 800a204:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a208:	f1c1 0820 	rsb	r8, r1, #32
 800a20c:	40cf      	lsrs	r7, r1
 800a20e:	f105 0e04 	add.w	lr, r5, #4
 800a212:	46a1      	mov	r9, r4
 800a214:	4576      	cmp	r6, lr
 800a216:	46f4      	mov	ip, lr
 800a218:	d815      	bhi.n	800a246 <rshift+0x7e>
 800a21a:	1a9a      	subs	r2, r3, r2
 800a21c:	0092      	lsls	r2, r2, #2
 800a21e:	3a04      	subs	r2, #4
 800a220:	3501      	adds	r5, #1
 800a222:	42ae      	cmp	r6, r5
 800a224:	bf38      	it	cc
 800a226:	2200      	movcc	r2, #0
 800a228:	18a3      	adds	r3, r4, r2
 800a22a:	50a7      	str	r7, [r4, r2]
 800a22c:	b107      	cbz	r7, 800a230 <rshift+0x68>
 800a22e:	3304      	adds	r3, #4
 800a230:	1b1a      	subs	r2, r3, r4
 800a232:	42a3      	cmp	r3, r4
 800a234:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a238:	bf08      	it	eq
 800a23a:	2300      	moveq	r3, #0
 800a23c:	6102      	str	r2, [r0, #16]
 800a23e:	bf08      	it	eq
 800a240:	6143      	streq	r3, [r0, #20]
 800a242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a246:	f8dc c000 	ldr.w	ip, [ip]
 800a24a:	fa0c fc08 	lsl.w	ip, ip, r8
 800a24e:	ea4c 0707 	orr.w	r7, ip, r7
 800a252:	f849 7b04 	str.w	r7, [r9], #4
 800a256:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a25a:	40cf      	lsrs	r7, r1
 800a25c:	e7da      	b.n	800a214 <rshift+0x4c>
 800a25e:	f851 cb04 	ldr.w	ip, [r1], #4
 800a262:	f847 cf04 	str.w	ip, [r7, #4]!
 800a266:	e7c3      	b.n	800a1f0 <rshift+0x28>
 800a268:	4623      	mov	r3, r4
 800a26a:	e7e1      	b.n	800a230 <rshift+0x68>

0800a26c <__hexdig_fun>:
 800a26c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a270:	2b09      	cmp	r3, #9
 800a272:	d802      	bhi.n	800a27a <__hexdig_fun+0xe>
 800a274:	3820      	subs	r0, #32
 800a276:	b2c0      	uxtb	r0, r0
 800a278:	4770      	bx	lr
 800a27a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a27e:	2b05      	cmp	r3, #5
 800a280:	d801      	bhi.n	800a286 <__hexdig_fun+0x1a>
 800a282:	3847      	subs	r0, #71	@ 0x47
 800a284:	e7f7      	b.n	800a276 <__hexdig_fun+0xa>
 800a286:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a28a:	2b05      	cmp	r3, #5
 800a28c:	d801      	bhi.n	800a292 <__hexdig_fun+0x26>
 800a28e:	3827      	subs	r0, #39	@ 0x27
 800a290:	e7f1      	b.n	800a276 <__hexdig_fun+0xa>
 800a292:	2000      	movs	r0, #0
 800a294:	4770      	bx	lr
	...

0800a298 <__gethex>:
 800a298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a29c:	b085      	sub	sp, #20
 800a29e:	468a      	mov	sl, r1
 800a2a0:	9302      	str	r3, [sp, #8]
 800a2a2:	680b      	ldr	r3, [r1, #0]
 800a2a4:	9001      	str	r0, [sp, #4]
 800a2a6:	4690      	mov	r8, r2
 800a2a8:	1c9c      	adds	r4, r3, #2
 800a2aa:	46a1      	mov	r9, r4
 800a2ac:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a2b0:	2830      	cmp	r0, #48	@ 0x30
 800a2b2:	d0fa      	beq.n	800a2aa <__gethex+0x12>
 800a2b4:	eba9 0303 	sub.w	r3, r9, r3
 800a2b8:	f1a3 0b02 	sub.w	fp, r3, #2
 800a2bc:	f7ff ffd6 	bl	800a26c <__hexdig_fun>
 800a2c0:	4605      	mov	r5, r0
 800a2c2:	2800      	cmp	r0, #0
 800a2c4:	d168      	bne.n	800a398 <__gethex+0x100>
 800a2c6:	49a0      	ldr	r1, [pc, #640]	@ (800a548 <__gethex+0x2b0>)
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	4648      	mov	r0, r9
 800a2cc:	f7ff f895 	bl	80093fa <strncmp>
 800a2d0:	4607      	mov	r7, r0
 800a2d2:	2800      	cmp	r0, #0
 800a2d4:	d167      	bne.n	800a3a6 <__gethex+0x10e>
 800a2d6:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a2da:	4626      	mov	r6, r4
 800a2dc:	f7ff ffc6 	bl	800a26c <__hexdig_fun>
 800a2e0:	2800      	cmp	r0, #0
 800a2e2:	d062      	beq.n	800a3aa <__gethex+0x112>
 800a2e4:	4623      	mov	r3, r4
 800a2e6:	7818      	ldrb	r0, [r3, #0]
 800a2e8:	2830      	cmp	r0, #48	@ 0x30
 800a2ea:	4699      	mov	r9, r3
 800a2ec:	f103 0301 	add.w	r3, r3, #1
 800a2f0:	d0f9      	beq.n	800a2e6 <__gethex+0x4e>
 800a2f2:	f7ff ffbb 	bl	800a26c <__hexdig_fun>
 800a2f6:	fab0 f580 	clz	r5, r0
 800a2fa:	096d      	lsrs	r5, r5, #5
 800a2fc:	f04f 0b01 	mov.w	fp, #1
 800a300:	464a      	mov	r2, r9
 800a302:	4616      	mov	r6, r2
 800a304:	3201      	adds	r2, #1
 800a306:	7830      	ldrb	r0, [r6, #0]
 800a308:	f7ff ffb0 	bl	800a26c <__hexdig_fun>
 800a30c:	2800      	cmp	r0, #0
 800a30e:	d1f8      	bne.n	800a302 <__gethex+0x6a>
 800a310:	498d      	ldr	r1, [pc, #564]	@ (800a548 <__gethex+0x2b0>)
 800a312:	2201      	movs	r2, #1
 800a314:	4630      	mov	r0, r6
 800a316:	f7ff f870 	bl	80093fa <strncmp>
 800a31a:	2800      	cmp	r0, #0
 800a31c:	d13f      	bne.n	800a39e <__gethex+0x106>
 800a31e:	b944      	cbnz	r4, 800a332 <__gethex+0x9a>
 800a320:	1c74      	adds	r4, r6, #1
 800a322:	4622      	mov	r2, r4
 800a324:	4616      	mov	r6, r2
 800a326:	3201      	adds	r2, #1
 800a328:	7830      	ldrb	r0, [r6, #0]
 800a32a:	f7ff ff9f 	bl	800a26c <__hexdig_fun>
 800a32e:	2800      	cmp	r0, #0
 800a330:	d1f8      	bne.n	800a324 <__gethex+0x8c>
 800a332:	1ba4      	subs	r4, r4, r6
 800a334:	00a7      	lsls	r7, r4, #2
 800a336:	7833      	ldrb	r3, [r6, #0]
 800a338:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a33c:	2b50      	cmp	r3, #80	@ 0x50
 800a33e:	d13e      	bne.n	800a3be <__gethex+0x126>
 800a340:	7873      	ldrb	r3, [r6, #1]
 800a342:	2b2b      	cmp	r3, #43	@ 0x2b
 800a344:	d033      	beq.n	800a3ae <__gethex+0x116>
 800a346:	2b2d      	cmp	r3, #45	@ 0x2d
 800a348:	d034      	beq.n	800a3b4 <__gethex+0x11c>
 800a34a:	1c71      	adds	r1, r6, #1
 800a34c:	2400      	movs	r4, #0
 800a34e:	7808      	ldrb	r0, [r1, #0]
 800a350:	f7ff ff8c 	bl	800a26c <__hexdig_fun>
 800a354:	1e43      	subs	r3, r0, #1
 800a356:	b2db      	uxtb	r3, r3
 800a358:	2b18      	cmp	r3, #24
 800a35a:	d830      	bhi.n	800a3be <__gethex+0x126>
 800a35c:	f1a0 0210 	sub.w	r2, r0, #16
 800a360:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a364:	f7ff ff82 	bl	800a26c <__hexdig_fun>
 800a368:	f100 3cff 	add.w	ip, r0, #4294967295
 800a36c:	fa5f fc8c 	uxtb.w	ip, ip
 800a370:	f1bc 0f18 	cmp.w	ip, #24
 800a374:	f04f 030a 	mov.w	r3, #10
 800a378:	d91e      	bls.n	800a3b8 <__gethex+0x120>
 800a37a:	b104      	cbz	r4, 800a37e <__gethex+0xe6>
 800a37c:	4252      	negs	r2, r2
 800a37e:	4417      	add	r7, r2
 800a380:	f8ca 1000 	str.w	r1, [sl]
 800a384:	b1ed      	cbz	r5, 800a3c2 <__gethex+0x12a>
 800a386:	f1bb 0f00 	cmp.w	fp, #0
 800a38a:	bf0c      	ite	eq
 800a38c:	2506      	moveq	r5, #6
 800a38e:	2500      	movne	r5, #0
 800a390:	4628      	mov	r0, r5
 800a392:	b005      	add	sp, #20
 800a394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a398:	2500      	movs	r5, #0
 800a39a:	462c      	mov	r4, r5
 800a39c:	e7b0      	b.n	800a300 <__gethex+0x68>
 800a39e:	2c00      	cmp	r4, #0
 800a3a0:	d1c7      	bne.n	800a332 <__gethex+0x9a>
 800a3a2:	4627      	mov	r7, r4
 800a3a4:	e7c7      	b.n	800a336 <__gethex+0x9e>
 800a3a6:	464e      	mov	r6, r9
 800a3a8:	462f      	mov	r7, r5
 800a3aa:	2501      	movs	r5, #1
 800a3ac:	e7c3      	b.n	800a336 <__gethex+0x9e>
 800a3ae:	2400      	movs	r4, #0
 800a3b0:	1cb1      	adds	r1, r6, #2
 800a3b2:	e7cc      	b.n	800a34e <__gethex+0xb6>
 800a3b4:	2401      	movs	r4, #1
 800a3b6:	e7fb      	b.n	800a3b0 <__gethex+0x118>
 800a3b8:	fb03 0002 	mla	r0, r3, r2, r0
 800a3bc:	e7ce      	b.n	800a35c <__gethex+0xc4>
 800a3be:	4631      	mov	r1, r6
 800a3c0:	e7de      	b.n	800a380 <__gethex+0xe8>
 800a3c2:	eba6 0309 	sub.w	r3, r6, r9
 800a3c6:	3b01      	subs	r3, #1
 800a3c8:	4629      	mov	r1, r5
 800a3ca:	2b07      	cmp	r3, #7
 800a3cc:	dc0a      	bgt.n	800a3e4 <__gethex+0x14c>
 800a3ce:	9801      	ldr	r0, [sp, #4]
 800a3d0:	f000 fafc 	bl	800a9cc <_Balloc>
 800a3d4:	4604      	mov	r4, r0
 800a3d6:	b940      	cbnz	r0, 800a3ea <__gethex+0x152>
 800a3d8:	4b5c      	ldr	r3, [pc, #368]	@ (800a54c <__gethex+0x2b4>)
 800a3da:	4602      	mov	r2, r0
 800a3dc:	21e4      	movs	r1, #228	@ 0xe4
 800a3de:	485c      	ldr	r0, [pc, #368]	@ (800a550 <__gethex+0x2b8>)
 800a3e0:	f001 f9ec 	bl	800b7bc <__assert_func>
 800a3e4:	3101      	adds	r1, #1
 800a3e6:	105b      	asrs	r3, r3, #1
 800a3e8:	e7ef      	b.n	800a3ca <__gethex+0x132>
 800a3ea:	f100 0a14 	add.w	sl, r0, #20
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	4655      	mov	r5, sl
 800a3f2:	469b      	mov	fp, r3
 800a3f4:	45b1      	cmp	r9, r6
 800a3f6:	d337      	bcc.n	800a468 <__gethex+0x1d0>
 800a3f8:	f845 bb04 	str.w	fp, [r5], #4
 800a3fc:	eba5 050a 	sub.w	r5, r5, sl
 800a400:	10ad      	asrs	r5, r5, #2
 800a402:	6125      	str	r5, [r4, #16]
 800a404:	4658      	mov	r0, fp
 800a406:	f000 fbd3 	bl	800abb0 <__hi0bits>
 800a40a:	016d      	lsls	r5, r5, #5
 800a40c:	f8d8 6000 	ldr.w	r6, [r8]
 800a410:	1a2d      	subs	r5, r5, r0
 800a412:	42b5      	cmp	r5, r6
 800a414:	dd54      	ble.n	800a4c0 <__gethex+0x228>
 800a416:	1bad      	subs	r5, r5, r6
 800a418:	4629      	mov	r1, r5
 800a41a:	4620      	mov	r0, r4
 800a41c:	f000 ff64 	bl	800b2e8 <__any_on>
 800a420:	4681      	mov	r9, r0
 800a422:	b178      	cbz	r0, 800a444 <__gethex+0x1ac>
 800a424:	1e6b      	subs	r3, r5, #1
 800a426:	1159      	asrs	r1, r3, #5
 800a428:	f003 021f 	and.w	r2, r3, #31
 800a42c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a430:	f04f 0901 	mov.w	r9, #1
 800a434:	fa09 f202 	lsl.w	r2, r9, r2
 800a438:	420a      	tst	r2, r1
 800a43a:	d003      	beq.n	800a444 <__gethex+0x1ac>
 800a43c:	454b      	cmp	r3, r9
 800a43e:	dc36      	bgt.n	800a4ae <__gethex+0x216>
 800a440:	f04f 0902 	mov.w	r9, #2
 800a444:	4629      	mov	r1, r5
 800a446:	4620      	mov	r0, r4
 800a448:	f7ff febe 	bl	800a1c8 <rshift>
 800a44c:	442f      	add	r7, r5
 800a44e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a452:	42bb      	cmp	r3, r7
 800a454:	da42      	bge.n	800a4dc <__gethex+0x244>
 800a456:	9801      	ldr	r0, [sp, #4]
 800a458:	4621      	mov	r1, r4
 800a45a:	f000 faf7 	bl	800aa4c <_Bfree>
 800a45e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a460:	2300      	movs	r3, #0
 800a462:	6013      	str	r3, [r2, #0]
 800a464:	25a3      	movs	r5, #163	@ 0xa3
 800a466:	e793      	b.n	800a390 <__gethex+0xf8>
 800a468:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a46c:	2a2e      	cmp	r2, #46	@ 0x2e
 800a46e:	d012      	beq.n	800a496 <__gethex+0x1fe>
 800a470:	2b20      	cmp	r3, #32
 800a472:	d104      	bne.n	800a47e <__gethex+0x1e6>
 800a474:	f845 bb04 	str.w	fp, [r5], #4
 800a478:	f04f 0b00 	mov.w	fp, #0
 800a47c:	465b      	mov	r3, fp
 800a47e:	7830      	ldrb	r0, [r6, #0]
 800a480:	9303      	str	r3, [sp, #12]
 800a482:	f7ff fef3 	bl	800a26c <__hexdig_fun>
 800a486:	9b03      	ldr	r3, [sp, #12]
 800a488:	f000 000f 	and.w	r0, r0, #15
 800a48c:	4098      	lsls	r0, r3
 800a48e:	ea4b 0b00 	orr.w	fp, fp, r0
 800a492:	3304      	adds	r3, #4
 800a494:	e7ae      	b.n	800a3f4 <__gethex+0x15c>
 800a496:	45b1      	cmp	r9, r6
 800a498:	d8ea      	bhi.n	800a470 <__gethex+0x1d8>
 800a49a:	492b      	ldr	r1, [pc, #172]	@ (800a548 <__gethex+0x2b0>)
 800a49c:	9303      	str	r3, [sp, #12]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	4630      	mov	r0, r6
 800a4a2:	f7fe ffaa 	bl	80093fa <strncmp>
 800a4a6:	9b03      	ldr	r3, [sp, #12]
 800a4a8:	2800      	cmp	r0, #0
 800a4aa:	d1e1      	bne.n	800a470 <__gethex+0x1d8>
 800a4ac:	e7a2      	b.n	800a3f4 <__gethex+0x15c>
 800a4ae:	1ea9      	subs	r1, r5, #2
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	f000 ff19 	bl	800b2e8 <__any_on>
 800a4b6:	2800      	cmp	r0, #0
 800a4b8:	d0c2      	beq.n	800a440 <__gethex+0x1a8>
 800a4ba:	f04f 0903 	mov.w	r9, #3
 800a4be:	e7c1      	b.n	800a444 <__gethex+0x1ac>
 800a4c0:	da09      	bge.n	800a4d6 <__gethex+0x23e>
 800a4c2:	1b75      	subs	r5, r6, r5
 800a4c4:	4621      	mov	r1, r4
 800a4c6:	9801      	ldr	r0, [sp, #4]
 800a4c8:	462a      	mov	r2, r5
 800a4ca:	f000 fcd7 	bl	800ae7c <__lshift>
 800a4ce:	1b7f      	subs	r7, r7, r5
 800a4d0:	4604      	mov	r4, r0
 800a4d2:	f100 0a14 	add.w	sl, r0, #20
 800a4d6:	f04f 0900 	mov.w	r9, #0
 800a4da:	e7b8      	b.n	800a44e <__gethex+0x1b6>
 800a4dc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a4e0:	42bd      	cmp	r5, r7
 800a4e2:	dd6f      	ble.n	800a5c4 <__gethex+0x32c>
 800a4e4:	1bed      	subs	r5, r5, r7
 800a4e6:	42ae      	cmp	r6, r5
 800a4e8:	dc34      	bgt.n	800a554 <__gethex+0x2bc>
 800a4ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a4ee:	2b02      	cmp	r3, #2
 800a4f0:	d022      	beq.n	800a538 <__gethex+0x2a0>
 800a4f2:	2b03      	cmp	r3, #3
 800a4f4:	d024      	beq.n	800a540 <__gethex+0x2a8>
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d115      	bne.n	800a526 <__gethex+0x28e>
 800a4fa:	42ae      	cmp	r6, r5
 800a4fc:	d113      	bne.n	800a526 <__gethex+0x28e>
 800a4fe:	2e01      	cmp	r6, #1
 800a500:	d10b      	bne.n	800a51a <__gethex+0x282>
 800a502:	9a02      	ldr	r2, [sp, #8]
 800a504:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a508:	6013      	str	r3, [r2, #0]
 800a50a:	2301      	movs	r3, #1
 800a50c:	6123      	str	r3, [r4, #16]
 800a50e:	f8ca 3000 	str.w	r3, [sl]
 800a512:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a514:	2562      	movs	r5, #98	@ 0x62
 800a516:	601c      	str	r4, [r3, #0]
 800a518:	e73a      	b.n	800a390 <__gethex+0xf8>
 800a51a:	1e71      	subs	r1, r6, #1
 800a51c:	4620      	mov	r0, r4
 800a51e:	f000 fee3 	bl	800b2e8 <__any_on>
 800a522:	2800      	cmp	r0, #0
 800a524:	d1ed      	bne.n	800a502 <__gethex+0x26a>
 800a526:	9801      	ldr	r0, [sp, #4]
 800a528:	4621      	mov	r1, r4
 800a52a:	f000 fa8f 	bl	800aa4c <_Bfree>
 800a52e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a530:	2300      	movs	r3, #0
 800a532:	6013      	str	r3, [r2, #0]
 800a534:	2550      	movs	r5, #80	@ 0x50
 800a536:	e72b      	b.n	800a390 <__gethex+0xf8>
 800a538:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d1f3      	bne.n	800a526 <__gethex+0x28e>
 800a53e:	e7e0      	b.n	800a502 <__gethex+0x26a>
 800a540:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a542:	2b00      	cmp	r3, #0
 800a544:	d1dd      	bne.n	800a502 <__gethex+0x26a>
 800a546:	e7ee      	b.n	800a526 <__gethex+0x28e>
 800a548:	0800be58 	.word	0x0800be58
 800a54c:	0800c06e 	.word	0x0800c06e
 800a550:	0800c07f 	.word	0x0800c07f
 800a554:	1e6f      	subs	r7, r5, #1
 800a556:	f1b9 0f00 	cmp.w	r9, #0
 800a55a:	d130      	bne.n	800a5be <__gethex+0x326>
 800a55c:	b127      	cbz	r7, 800a568 <__gethex+0x2d0>
 800a55e:	4639      	mov	r1, r7
 800a560:	4620      	mov	r0, r4
 800a562:	f000 fec1 	bl	800b2e8 <__any_on>
 800a566:	4681      	mov	r9, r0
 800a568:	117a      	asrs	r2, r7, #5
 800a56a:	2301      	movs	r3, #1
 800a56c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a570:	f007 071f 	and.w	r7, r7, #31
 800a574:	40bb      	lsls	r3, r7
 800a576:	4213      	tst	r3, r2
 800a578:	4629      	mov	r1, r5
 800a57a:	4620      	mov	r0, r4
 800a57c:	bf18      	it	ne
 800a57e:	f049 0902 	orrne.w	r9, r9, #2
 800a582:	f7ff fe21 	bl	800a1c8 <rshift>
 800a586:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a58a:	1b76      	subs	r6, r6, r5
 800a58c:	2502      	movs	r5, #2
 800a58e:	f1b9 0f00 	cmp.w	r9, #0
 800a592:	d047      	beq.n	800a624 <__gethex+0x38c>
 800a594:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a598:	2b02      	cmp	r3, #2
 800a59a:	d015      	beq.n	800a5c8 <__gethex+0x330>
 800a59c:	2b03      	cmp	r3, #3
 800a59e:	d017      	beq.n	800a5d0 <__gethex+0x338>
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	d109      	bne.n	800a5b8 <__gethex+0x320>
 800a5a4:	f019 0f02 	tst.w	r9, #2
 800a5a8:	d006      	beq.n	800a5b8 <__gethex+0x320>
 800a5aa:	f8da 3000 	ldr.w	r3, [sl]
 800a5ae:	ea49 0903 	orr.w	r9, r9, r3
 800a5b2:	f019 0f01 	tst.w	r9, #1
 800a5b6:	d10e      	bne.n	800a5d6 <__gethex+0x33e>
 800a5b8:	f045 0510 	orr.w	r5, r5, #16
 800a5bc:	e032      	b.n	800a624 <__gethex+0x38c>
 800a5be:	f04f 0901 	mov.w	r9, #1
 800a5c2:	e7d1      	b.n	800a568 <__gethex+0x2d0>
 800a5c4:	2501      	movs	r5, #1
 800a5c6:	e7e2      	b.n	800a58e <__gethex+0x2f6>
 800a5c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5ca:	f1c3 0301 	rsb	r3, r3, #1
 800a5ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a5d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d0f0      	beq.n	800a5b8 <__gethex+0x320>
 800a5d6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a5da:	f104 0314 	add.w	r3, r4, #20
 800a5de:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a5e2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a5e6:	f04f 0c00 	mov.w	ip, #0
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5f0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a5f4:	d01b      	beq.n	800a62e <__gethex+0x396>
 800a5f6:	3201      	adds	r2, #1
 800a5f8:	6002      	str	r2, [r0, #0]
 800a5fa:	2d02      	cmp	r5, #2
 800a5fc:	f104 0314 	add.w	r3, r4, #20
 800a600:	d13c      	bne.n	800a67c <__gethex+0x3e4>
 800a602:	f8d8 2000 	ldr.w	r2, [r8]
 800a606:	3a01      	subs	r2, #1
 800a608:	42b2      	cmp	r2, r6
 800a60a:	d109      	bne.n	800a620 <__gethex+0x388>
 800a60c:	1171      	asrs	r1, r6, #5
 800a60e:	2201      	movs	r2, #1
 800a610:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a614:	f006 061f 	and.w	r6, r6, #31
 800a618:	fa02 f606 	lsl.w	r6, r2, r6
 800a61c:	421e      	tst	r6, r3
 800a61e:	d13a      	bne.n	800a696 <__gethex+0x3fe>
 800a620:	f045 0520 	orr.w	r5, r5, #32
 800a624:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a626:	601c      	str	r4, [r3, #0]
 800a628:	9b02      	ldr	r3, [sp, #8]
 800a62a:	601f      	str	r7, [r3, #0]
 800a62c:	e6b0      	b.n	800a390 <__gethex+0xf8>
 800a62e:	4299      	cmp	r1, r3
 800a630:	f843 cc04 	str.w	ip, [r3, #-4]
 800a634:	d8d9      	bhi.n	800a5ea <__gethex+0x352>
 800a636:	68a3      	ldr	r3, [r4, #8]
 800a638:	459b      	cmp	fp, r3
 800a63a:	db17      	blt.n	800a66c <__gethex+0x3d4>
 800a63c:	6861      	ldr	r1, [r4, #4]
 800a63e:	9801      	ldr	r0, [sp, #4]
 800a640:	3101      	adds	r1, #1
 800a642:	f000 f9c3 	bl	800a9cc <_Balloc>
 800a646:	4681      	mov	r9, r0
 800a648:	b918      	cbnz	r0, 800a652 <__gethex+0x3ba>
 800a64a:	4b1a      	ldr	r3, [pc, #104]	@ (800a6b4 <__gethex+0x41c>)
 800a64c:	4602      	mov	r2, r0
 800a64e:	2184      	movs	r1, #132	@ 0x84
 800a650:	e6c5      	b.n	800a3de <__gethex+0x146>
 800a652:	6922      	ldr	r2, [r4, #16]
 800a654:	3202      	adds	r2, #2
 800a656:	f104 010c 	add.w	r1, r4, #12
 800a65a:	0092      	lsls	r2, r2, #2
 800a65c:	300c      	adds	r0, #12
 800a65e:	f7fe ff6c 	bl	800953a <memcpy>
 800a662:	4621      	mov	r1, r4
 800a664:	9801      	ldr	r0, [sp, #4]
 800a666:	f000 f9f1 	bl	800aa4c <_Bfree>
 800a66a:	464c      	mov	r4, r9
 800a66c:	6923      	ldr	r3, [r4, #16]
 800a66e:	1c5a      	adds	r2, r3, #1
 800a670:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a674:	6122      	str	r2, [r4, #16]
 800a676:	2201      	movs	r2, #1
 800a678:	615a      	str	r2, [r3, #20]
 800a67a:	e7be      	b.n	800a5fa <__gethex+0x362>
 800a67c:	6922      	ldr	r2, [r4, #16]
 800a67e:	455a      	cmp	r2, fp
 800a680:	dd0b      	ble.n	800a69a <__gethex+0x402>
 800a682:	2101      	movs	r1, #1
 800a684:	4620      	mov	r0, r4
 800a686:	f7ff fd9f 	bl	800a1c8 <rshift>
 800a68a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a68e:	3701      	adds	r7, #1
 800a690:	42bb      	cmp	r3, r7
 800a692:	f6ff aee0 	blt.w	800a456 <__gethex+0x1be>
 800a696:	2501      	movs	r5, #1
 800a698:	e7c2      	b.n	800a620 <__gethex+0x388>
 800a69a:	f016 061f 	ands.w	r6, r6, #31
 800a69e:	d0fa      	beq.n	800a696 <__gethex+0x3fe>
 800a6a0:	4453      	add	r3, sl
 800a6a2:	f1c6 0620 	rsb	r6, r6, #32
 800a6a6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a6aa:	f000 fa81 	bl	800abb0 <__hi0bits>
 800a6ae:	42b0      	cmp	r0, r6
 800a6b0:	dbe7      	blt.n	800a682 <__gethex+0x3ea>
 800a6b2:	e7f0      	b.n	800a696 <__gethex+0x3fe>
 800a6b4:	0800c06e 	.word	0x0800c06e

0800a6b8 <L_shift>:
 800a6b8:	f1c2 0208 	rsb	r2, r2, #8
 800a6bc:	0092      	lsls	r2, r2, #2
 800a6be:	b570      	push	{r4, r5, r6, lr}
 800a6c0:	f1c2 0620 	rsb	r6, r2, #32
 800a6c4:	6843      	ldr	r3, [r0, #4]
 800a6c6:	6804      	ldr	r4, [r0, #0]
 800a6c8:	fa03 f506 	lsl.w	r5, r3, r6
 800a6cc:	432c      	orrs	r4, r5
 800a6ce:	40d3      	lsrs	r3, r2
 800a6d0:	6004      	str	r4, [r0, #0]
 800a6d2:	f840 3f04 	str.w	r3, [r0, #4]!
 800a6d6:	4288      	cmp	r0, r1
 800a6d8:	d3f4      	bcc.n	800a6c4 <L_shift+0xc>
 800a6da:	bd70      	pop	{r4, r5, r6, pc}

0800a6dc <__match>:
 800a6dc:	b530      	push	{r4, r5, lr}
 800a6de:	6803      	ldr	r3, [r0, #0]
 800a6e0:	3301      	adds	r3, #1
 800a6e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6e6:	b914      	cbnz	r4, 800a6ee <__match+0x12>
 800a6e8:	6003      	str	r3, [r0, #0]
 800a6ea:	2001      	movs	r0, #1
 800a6ec:	bd30      	pop	{r4, r5, pc}
 800a6ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6f2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a6f6:	2d19      	cmp	r5, #25
 800a6f8:	bf98      	it	ls
 800a6fa:	3220      	addls	r2, #32
 800a6fc:	42a2      	cmp	r2, r4
 800a6fe:	d0f0      	beq.n	800a6e2 <__match+0x6>
 800a700:	2000      	movs	r0, #0
 800a702:	e7f3      	b.n	800a6ec <__match+0x10>

0800a704 <__hexnan>:
 800a704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a708:	680b      	ldr	r3, [r1, #0]
 800a70a:	6801      	ldr	r1, [r0, #0]
 800a70c:	115e      	asrs	r6, r3, #5
 800a70e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a712:	f013 031f 	ands.w	r3, r3, #31
 800a716:	b087      	sub	sp, #28
 800a718:	bf18      	it	ne
 800a71a:	3604      	addne	r6, #4
 800a71c:	2500      	movs	r5, #0
 800a71e:	1f37      	subs	r7, r6, #4
 800a720:	4682      	mov	sl, r0
 800a722:	4690      	mov	r8, r2
 800a724:	9301      	str	r3, [sp, #4]
 800a726:	f846 5c04 	str.w	r5, [r6, #-4]
 800a72a:	46b9      	mov	r9, r7
 800a72c:	463c      	mov	r4, r7
 800a72e:	9502      	str	r5, [sp, #8]
 800a730:	46ab      	mov	fp, r5
 800a732:	784a      	ldrb	r2, [r1, #1]
 800a734:	1c4b      	adds	r3, r1, #1
 800a736:	9303      	str	r3, [sp, #12]
 800a738:	b342      	cbz	r2, 800a78c <__hexnan+0x88>
 800a73a:	4610      	mov	r0, r2
 800a73c:	9105      	str	r1, [sp, #20]
 800a73e:	9204      	str	r2, [sp, #16]
 800a740:	f7ff fd94 	bl	800a26c <__hexdig_fun>
 800a744:	2800      	cmp	r0, #0
 800a746:	d151      	bne.n	800a7ec <__hexnan+0xe8>
 800a748:	9a04      	ldr	r2, [sp, #16]
 800a74a:	9905      	ldr	r1, [sp, #20]
 800a74c:	2a20      	cmp	r2, #32
 800a74e:	d818      	bhi.n	800a782 <__hexnan+0x7e>
 800a750:	9b02      	ldr	r3, [sp, #8]
 800a752:	459b      	cmp	fp, r3
 800a754:	dd13      	ble.n	800a77e <__hexnan+0x7a>
 800a756:	454c      	cmp	r4, r9
 800a758:	d206      	bcs.n	800a768 <__hexnan+0x64>
 800a75a:	2d07      	cmp	r5, #7
 800a75c:	dc04      	bgt.n	800a768 <__hexnan+0x64>
 800a75e:	462a      	mov	r2, r5
 800a760:	4649      	mov	r1, r9
 800a762:	4620      	mov	r0, r4
 800a764:	f7ff ffa8 	bl	800a6b8 <L_shift>
 800a768:	4544      	cmp	r4, r8
 800a76a:	d952      	bls.n	800a812 <__hexnan+0x10e>
 800a76c:	2300      	movs	r3, #0
 800a76e:	f1a4 0904 	sub.w	r9, r4, #4
 800a772:	f844 3c04 	str.w	r3, [r4, #-4]
 800a776:	f8cd b008 	str.w	fp, [sp, #8]
 800a77a:	464c      	mov	r4, r9
 800a77c:	461d      	mov	r5, r3
 800a77e:	9903      	ldr	r1, [sp, #12]
 800a780:	e7d7      	b.n	800a732 <__hexnan+0x2e>
 800a782:	2a29      	cmp	r2, #41	@ 0x29
 800a784:	d157      	bne.n	800a836 <__hexnan+0x132>
 800a786:	3102      	adds	r1, #2
 800a788:	f8ca 1000 	str.w	r1, [sl]
 800a78c:	f1bb 0f00 	cmp.w	fp, #0
 800a790:	d051      	beq.n	800a836 <__hexnan+0x132>
 800a792:	454c      	cmp	r4, r9
 800a794:	d206      	bcs.n	800a7a4 <__hexnan+0xa0>
 800a796:	2d07      	cmp	r5, #7
 800a798:	dc04      	bgt.n	800a7a4 <__hexnan+0xa0>
 800a79a:	462a      	mov	r2, r5
 800a79c:	4649      	mov	r1, r9
 800a79e:	4620      	mov	r0, r4
 800a7a0:	f7ff ff8a 	bl	800a6b8 <L_shift>
 800a7a4:	4544      	cmp	r4, r8
 800a7a6:	d936      	bls.n	800a816 <__hexnan+0x112>
 800a7a8:	f1a8 0204 	sub.w	r2, r8, #4
 800a7ac:	4623      	mov	r3, r4
 800a7ae:	f853 1b04 	ldr.w	r1, [r3], #4
 800a7b2:	f842 1f04 	str.w	r1, [r2, #4]!
 800a7b6:	429f      	cmp	r7, r3
 800a7b8:	d2f9      	bcs.n	800a7ae <__hexnan+0xaa>
 800a7ba:	1b3b      	subs	r3, r7, r4
 800a7bc:	f023 0303 	bic.w	r3, r3, #3
 800a7c0:	3304      	adds	r3, #4
 800a7c2:	3401      	adds	r4, #1
 800a7c4:	3e03      	subs	r6, #3
 800a7c6:	42b4      	cmp	r4, r6
 800a7c8:	bf88      	it	hi
 800a7ca:	2304      	movhi	r3, #4
 800a7cc:	4443      	add	r3, r8
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	f843 2b04 	str.w	r2, [r3], #4
 800a7d4:	429f      	cmp	r7, r3
 800a7d6:	d2fb      	bcs.n	800a7d0 <__hexnan+0xcc>
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	b91b      	cbnz	r3, 800a7e4 <__hexnan+0xe0>
 800a7dc:	4547      	cmp	r7, r8
 800a7de:	d128      	bne.n	800a832 <__hexnan+0x12e>
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	603b      	str	r3, [r7, #0]
 800a7e4:	2005      	movs	r0, #5
 800a7e6:	b007      	add	sp, #28
 800a7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ec:	3501      	adds	r5, #1
 800a7ee:	2d08      	cmp	r5, #8
 800a7f0:	f10b 0b01 	add.w	fp, fp, #1
 800a7f4:	dd06      	ble.n	800a804 <__hexnan+0x100>
 800a7f6:	4544      	cmp	r4, r8
 800a7f8:	d9c1      	bls.n	800a77e <__hexnan+0x7a>
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	f844 3c04 	str.w	r3, [r4, #-4]
 800a800:	2501      	movs	r5, #1
 800a802:	3c04      	subs	r4, #4
 800a804:	6822      	ldr	r2, [r4, #0]
 800a806:	f000 000f 	and.w	r0, r0, #15
 800a80a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a80e:	6020      	str	r0, [r4, #0]
 800a810:	e7b5      	b.n	800a77e <__hexnan+0x7a>
 800a812:	2508      	movs	r5, #8
 800a814:	e7b3      	b.n	800a77e <__hexnan+0x7a>
 800a816:	9b01      	ldr	r3, [sp, #4]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d0dd      	beq.n	800a7d8 <__hexnan+0xd4>
 800a81c:	f1c3 0320 	rsb	r3, r3, #32
 800a820:	f04f 32ff 	mov.w	r2, #4294967295
 800a824:	40da      	lsrs	r2, r3
 800a826:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a82a:	4013      	ands	r3, r2
 800a82c:	f846 3c04 	str.w	r3, [r6, #-4]
 800a830:	e7d2      	b.n	800a7d8 <__hexnan+0xd4>
 800a832:	3f04      	subs	r7, #4
 800a834:	e7d0      	b.n	800a7d8 <__hexnan+0xd4>
 800a836:	2004      	movs	r0, #4
 800a838:	e7d5      	b.n	800a7e6 <__hexnan+0xe2>
	...

0800a83c <malloc>:
 800a83c:	4b02      	ldr	r3, [pc, #8]	@ (800a848 <malloc+0xc>)
 800a83e:	4601      	mov	r1, r0
 800a840:	6818      	ldr	r0, [r3, #0]
 800a842:	f000 b825 	b.w	800a890 <_malloc_r>
 800a846:	bf00      	nop
 800a848:	2000018c 	.word	0x2000018c

0800a84c <sbrk_aligned>:
 800a84c:	b570      	push	{r4, r5, r6, lr}
 800a84e:	4e0f      	ldr	r6, [pc, #60]	@ (800a88c <sbrk_aligned+0x40>)
 800a850:	460c      	mov	r4, r1
 800a852:	6831      	ldr	r1, [r6, #0]
 800a854:	4605      	mov	r5, r0
 800a856:	b911      	cbnz	r1, 800a85e <sbrk_aligned+0x12>
 800a858:	f000 ffa0 	bl	800b79c <_sbrk_r>
 800a85c:	6030      	str	r0, [r6, #0]
 800a85e:	4621      	mov	r1, r4
 800a860:	4628      	mov	r0, r5
 800a862:	f000 ff9b 	bl	800b79c <_sbrk_r>
 800a866:	1c43      	adds	r3, r0, #1
 800a868:	d103      	bne.n	800a872 <sbrk_aligned+0x26>
 800a86a:	f04f 34ff 	mov.w	r4, #4294967295
 800a86e:	4620      	mov	r0, r4
 800a870:	bd70      	pop	{r4, r5, r6, pc}
 800a872:	1cc4      	adds	r4, r0, #3
 800a874:	f024 0403 	bic.w	r4, r4, #3
 800a878:	42a0      	cmp	r0, r4
 800a87a:	d0f8      	beq.n	800a86e <sbrk_aligned+0x22>
 800a87c:	1a21      	subs	r1, r4, r0
 800a87e:	4628      	mov	r0, r5
 800a880:	f000 ff8c 	bl	800b79c <_sbrk_r>
 800a884:	3001      	adds	r0, #1
 800a886:	d1f2      	bne.n	800a86e <sbrk_aligned+0x22>
 800a888:	e7ef      	b.n	800a86a <sbrk_aligned+0x1e>
 800a88a:	bf00      	nop
 800a88c:	20000c48 	.word	0x20000c48

0800a890 <_malloc_r>:
 800a890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a894:	1ccd      	adds	r5, r1, #3
 800a896:	f025 0503 	bic.w	r5, r5, #3
 800a89a:	3508      	adds	r5, #8
 800a89c:	2d0c      	cmp	r5, #12
 800a89e:	bf38      	it	cc
 800a8a0:	250c      	movcc	r5, #12
 800a8a2:	2d00      	cmp	r5, #0
 800a8a4:	4606      	mov	r6, r0
 800a8a6:	db01      	blt.n	800a8ac <_malloc_r+0x1c>
 800a8a8:	42a9      	cmp	r1, r5
 800a8aa:	d904      	bls.n	800a8b6 <_malloc_r+0x26>
 800a8ac:	230c      	movs	r3, #12
 800a8ae:	6033      	str	r3, [r6, #0]
 800a8b0:	2000      	movs	r0, #0
 800a8b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a98c <_malloc_r+0xfc>
 800a8ba:	f000 f87b 	bl	800a9b4 <__malloc_lock>
 800a8be:	f8d8 3000 	ldr.w	r3, [r8]
 800a8c2:	461c      	mov	r4, r3
 800a8c4:	bb44      	cbnz	r4, 800a918 <_malloc_r+0x88>
 800a8c6:	4629      	mov	r1, r5
 800a8c8:	4630      	mov	r0, r6
 800a8ca:	f7ff ffbf 	bl	800a84c <sbrk_aligned>
 800a8ce:	1c43      	adds	r3, r0, #1
 800a8d0:	4604      	mov	r4, r0
 800a8d2:	d158      	bne.n	800a986 <_malloc_r+0xf6>
 800a8d4:	f8d8 4000 	ldr.w	r4, [r8]
 800a8d8:	4627      	mov	r7, r4
 800a8da:	2f00      	cmp	r7, #0
 800a8dc:	d143      	bne.n	800a966 <_malloc_r+0xd6>
 800a8de:	2c00      	cmp	r4, #0
 800a8e0:	d04b      	beq.n	800a97a <_malloc_r+0xea>
 800a8e2:	6823      	ldr	r3, [r4, #0]
 800a8e4:	4639      	mov	r1, r7
 800a8e6:	4630      	mov	r0, r6
 800a8e8:	eb04 0903 	add.w	r9, r4, r3
 800a8ec:	f000 ff56 	bl	800b79c <_sbrk_r>
 800a8f0:	4581      	cmp	r9, r0
 800a8f2:	d142      	bne.n	800a97a <_malloc_r+0xea>
 800a8f4:	6821      	ldr	r1, [r4, #0]
 800a8f6:	1a6d      	subs	r5, r5, r1
 800a8f8:	4629      	mov	r1, r5
 800a8fa:	4630      	mov	r0, r6
 800a8fc:	f7ff ffa6 	bl	800a84c <sbrk_aligned>
 800a900:	3001      	adds	r0, #1
 800a902:	d03a      	beq.n	800a97a <_malloc_r+0xea>
 800a904:	6823      	ldr	r3, [r4, #0]
 800a906:	442b      	add	r3, r5
 800a908:	6023      	str	r3, [r4, #0]
 800a90a:	f8d8 3000 	ldr.w	r3, [r8]
 800a90e:	685a      	ldr	r2, [r3, #4]
 800a910:	bb62      	cbnz	r2, 800a96c <_malloc_r+0xdc>
 800a912:	f8c8 7000 	str.w	r7, [r8]
 800a916:	e00f      	b.n	800a938 <_malloc_r+0xa8>
 800a918:	6822      	ldr	r2, [r4, #0]
 800a91a:	1b52      	subs	r2, r2, r5
 800a91c:	d420      	bmi.n	800a960 <_malloc_r+0xd0>
 800a91e:	2a0b      	cmp	r2, #11
 800a920:	d917      	bls.n	800a952 <_malloc_r+0xc2>
 800a922:	1961      	adds	r1, r4, r5
 800a924:	42a3      	cmp	r3, r4
 800a926:	6025      	str	r5, [r4, #0]
 800a928:	bf18      	it	ne
 800a92a:	6059      	strne	r1, [r3, #4]
 800a92c:	6863      	ldr	r3, [r4, #4]
 800a92e:	bf08      	it	eq
 800a930:	f8c8 1000 	streq.w	r1, [r8]
 800a934:	5162      	str	r2, [r4, r5]
 800a936:	604b      	str	r3, [r1, #4]
 800a938:	4630      	mov	r0, r6
 800a93a:	f000 f841 	bl	800a9c0 <__malloc_unlock>
 800a93e:	f104 000b 	add.w	r0, r4, #11
 800a942:	1d23      	adds	r3, r4, #4
 800a944:	f020 0007 	bic.w	r0, r0, #7
 800a948:	1ac2      	subs	r2, r0, r3
 800a94a:	bf1c      	itt	ne
 800a94c:	1a1b      	subne	r3, r3, r0
 800a94e:	50a3      	strne	r3, [r4, r2]
 800a950:	e7af      	b.n	800a8b2 <_malloc_r+0x22>
 800a952:	6862      	ldr	r2, [r4, #4]
 800a954:	42a3      	cmp	r3, r4
 800a956:	bf0c      	ite	eq
 800a958:	f8c8 2000 	streq.w	r2, [r8]
 800a95c:	605a      	strne	r2, [r3, #4]
 800a95e:	e7eb      	b.n	800a938 <_malloc_r+0xa8>
 800a960:	4623      	mov	r3, r4
 800a962:	6864      	ldr	r4, [r4, #4]
 800a964:	e7ae      	b.n	800a8c4 <_malloc_r+0x34>
 800a966:	463c      	mov	r4, r7
 800a968:	687f      	ldr	r7, [r7, #4]
 800a96a:	e7b6      	b.n	800a8da <_malloc_r+0x4a>
 800a96c:	461a      	mov	r2, r3
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	42a3      	cmp	r3, r4
 800a972:	d1fb      	bne.n	800a96c <_malloc_r+0xdc>
 800a974:	2300      	movs	r3, #0
 800a976:	6053      	str	r3, [r2, #4]
 800a978:	e7de      	b.n	800a938 <_malloc_r+0xa8>
 800a97a:	230c      	movs	r3, #12
 800a97c:	6033      	str	r3, [r6, #0]
 800a97e:	4630      	mov	r0, r6
 800a980:	f000 f81e 	bl	800a9c0 <__malloc_unlock>
 800a984:	e794      	b.n	800a8b0 <_malloc_r+0x20>
 800a986:	6005      	str	r5, [r0, #0]
 800a988:	e7d6      	b.n	800a938 <_malloc_r+0xa8>
 800a98a:	bf00      	nop
 800a98c:	20000c4c 	.word	0x20000c4c

0800a990 <__ascii_mbtowc>:
 800a990:	b082      	sub	sp, #8
 800a992:	b901      	cbnz	r1, 800a996 <__ascii_mbtowc+0x6>
 800a994:	a901      	add	r1, sp, #4
 800a996:	b142      	cbz	r2, 800a9aa <__ascii_mbtowc+0x1a>
 800a998:	b14b      	cbz	r3, 800a9ae <__ascii_mbtowc+0x1e>
 800a99a:	7813      	ldrb	r3, [r2, #0]
 800a99c:	600b      	str	r3, [r1, #0]
 800a99e:	7812      	ldrb	r2, [r2, #0]
 800a9a0:	1e10      	subs	r0, r2, #0
 800a9a2:	bf18      	it	ne
 800a9a4:	2001      	movne	r0, #1
 800a9a6:	b002      	add	sp, #8
 800a9a8:	4770      	bx	lr
 800a9aa:	4610      	mov	r0, r2
 800a9ac:	e7fb      	b.n	800a9a6 <__ascii_mbtowc+0x16>
 800a9ae:	f06f 0001 	mvn.w	r0, #1
 800a9b2:	e7f8      	b.n	800a9a6 <__ascii_mbtowc+0x16>

0800a9b4 <__malloc_lock>:
 800a9b4:	4801      	ldr	r0, [pc, #4]	@ (800a9bc <__malloc_lock+0x8>)
 800a9b6:	f7fe bdbe 	b.w	8009536 <__retarget_lock_acquire_recursive>
 800a9ba:	bf00      	nop
 800a9bc:	20000c44 	.word	0x20000c44

0800a9c0 <__malloc_unlock>:
 800a9c0:	4801      	ldr	r0, [pc, #4]	@ (800a9c8 <__malloc_unlock+0x8>)
 800a9c2:	f7fe bdb9 	b.w	8009538 <__retarget_lock_release_recursive>
 800a9c6:	bf00      	nop
 800a9c8:	20000c44 	.word	0x20000c44

0800a9cc <_Balloc>:
 800a9cc:	b570      	push	{r4, r5, r6, lr}
 800a9ce:	69c6      	ldr	r6, [r0, #28]
 800a9d0:	4604      	mov	r4, r0
 800a9d2:	460d      	mov	r5, r1
 800a9d4:	b976      	cbnz	r6, 800a9f4 <_Balloc+0x28>
 800a9d6:	2010      	movs	r0, #16
 800a9d8:	f7ff ff30 	bl	800a83c <malloc>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	61e0      	str	r0, [r4, #28]
 800a9e0:	b920      	cbnz	r0, 800a9ec <_Balloc+0x20>
 800a9e2:	4b18      	ldr	r3, [pc, #96]	@ (800aa44 <_Balloc+0x78>)
 800a9e4:	4818      	ldr	r0, [pc, #96]	@ (800aa48 <_Balloc+0x7c>)
 800a9e6:	216b      	movs	r1, #107	@ 0x6b
 800a9e8:	f000 fee8 	bl	800b7bc <__assert_func>
 800a9ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9f0:	6006      	str	r6, [r0, #0]
 800a9f2:	60c6      	str	r6, [r0, #12]
 800a9f4:	69e6      	ldr	r6, [r4, #28]
 800a9f6:	68f3      	ldr	r3, [r6, #12]
 800a9f8:	b183      	cbz	r3, 800aa1c <_Balloc+0x50>
 800a9fa:	69e3      	ldr	r3, [r4, #28]
 800a9fc:	68db      	ldr	r3, [r3, #12]
 800a9fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa02:	b9b8      	cbnz	r0, 800aa34 <_Balloc+0x68>
 800aa04:	2101      	movs	r1, #1
 800aa06:	fa01 f605 	lsl.w	r6, r1, r5
 800aa0a:	1d72      	adds	r2, r6, #5
 800aa0c:	0092      	lsls	r2, r2, #2
 800aa0e:	4620      	mov	r0, r4
 800aa10:	f000 fef2 	bl	800b7f8 <_calloc_r>
 800aa14:	b160      	cbz	r0, 800aa30 <_Balloc+0x64>
 800aa16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aa1a:	e00e      	b.n	800aa3a <_Balloc+0x6e>
 800aa1c:	2221      	movs	r2, #33	@ 0x21
 800aa1e:	2104      	movs	r1, #4
 800aa20:	4620      	mov	r0, r4
 800aa22:	f000 fee9 	bl	800b7f8 <_calloc_r>
 800aa26:	69e3      	ldr	r3, [r4, #28]
 800aa28:	60f0      	str	r0, [r6, #12]
 800aa2a:	68db      	ldr	r3, [r3, #12]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d1e4      	bne.n	800a9fa <_Balloc+0x2e>
 800aa30:	2000      	movs	r0, #0
 800aa32:	bd70      	pop	{r4, r5, r6, pc}
 800aa34:	6802      	ldr	r2, [r0, #0]
 800aa36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa40:	e7f7      	b.n	800aa32 <_Balloc+0x66>
 800aa42:	bf00      	nop
 800aa44:	0800bfff 	.word	0x0800bfff
 800aa48:	0800c0df 	.word	0x0800c0df

0800aa4c <_Bfree>:
 800aa4c:	b570      	push	{r4, r5, r6, lr}
 800aa4e:	69c6      	ldr	r6, [r0, #28]
 800aa50:	4605      	mov	r5, r0
 800aa52:	460c      	mov	r4, r1
 800aa54:	b976      	cbnz	r6, 800aa74 <_Bfree+0x28>
 800aa56:	2010      	movs	r0, #16
 800aa58:	f7ff fef0 	bl	800a83c <malloc>
 800aa5c:	4602      	mov	r2, r0
 800aa5e:	61e8      	str	r0, [r5, #28]
 800aa60:	b920      	cbnz	r0, 800aa6c <_Bfree+0x20>
 800aa62:	4b09      	ldr	r3, [pc, #36]	@ (800aa88 <_Bfree+0x3c>)
 800aa64:	4809      	ldr	r0, [pc, #36]	@ (800aa8c <_Bfree+0x40>)
 800aa66:	218f      	movs	r1, #143	@ 0x8f
 800aa68:	f000 fea8 	bl	800b7bc <__assert_func>
 800aa6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa70:	6006      	str	r6, [r0, #0]
 800aa72:	60c6      	str	r6, [r0, #12]
 800aa74:	b13c      	cbz	r4, 800aa86 <_Bfree+0x3a>
 800aa76:	69eb      	ldr	r3, [r5, #28]
 800aa78:	6862      	ldr	r2, [r4, #4]
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aa80:	6021      	str	r1, [r4, #0]
 800aa82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aa86:	bd70      	pop	{r4, r5, r6, pc}
 800aa88:	0800bfff 	.word	0x0800bfff
 800aa8c:	0800c0df 	.word	0x0800c0df

0800aa90 <__multadd>:
 800aa90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa94:	690d      	ldr	r5, [r1, #16]
 800aa96:	4607      	mov	r7, r0
 800aa98:	460c      	mov	r4, r1
 800aa9a:	461e      	mov	r6, r3
 800aa9c:	f101 0c14 	add.w	ip, r1, #20
 800aaa0:	2000      	movs	r0, #0
 800aaa2:	f8dc 3000 	ldr.w	r3, [ip]
 800aaa6:	b299      	uxth	r1, r3
 800aaa8:	fb02 6101 	mla	r1, r2, r1, r6
 800aaac:	0c1e      	lsrs	r6, r3, #16
 800aaae:	0c0b      	lsrs	r3, r1, #16
 800aab0:	fb02 3306 	mla	r3, r2, r6, r3
 800aab4:	b289      	uxth	r1, r1
 800aab6:	3001      	adds	r0, #1
 800aab8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aabc:	4285      	cmp	r5, r0
 800aabe:	f84c 1b04 	str.w	r1, [ip], #4
 800aac2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aac6:	dcec      	bgt.n	800aaa2 <__multadd+0x12>
 800aac8:	b30e      	cbz	r6, 800ab0e <__multadd+0x7e>
 800aaca:	68a3      	ldr	r3, [r4, #8]
 800aacc:	42ab      	cmp	r3, r5
 800aace:	dc19      	bgt.n	800ab04 <__multadd+0x74>
 800aad0:	6861      	ldr	r1, [r4, #4]
 800aad2:	4638      	mov	r0, r7
 800aad4:	3101      	adds	r1, #1
 800aad6:	f7ff ff79 	bl	800a9cc <_Balloc>
 800aada:	4680      	mov	r8, r0
 800aadc:	b928      	cbnz	r0, 800aaea <__multadd+0x5a>
 800aade:	4602      	mov	r2, r0
 800aae0:	4b0c      	ldr	r3, [pc, #48]	@ (800ab14 <__multadd+0x84>)
 800aae2:	480d      	ldr	r0, [pc, #52]	@ (800ab18 <__multadd+0x88>)
 800aae4:	21ba      	movs	r1, #186	@ 0xba
 800aae6:	f000 fe69 	bl	800b7bc <__assert_func>
 800aaea:	6922      	ldr	r2, [r4, #16]
 800aaec:	3202      	adds	r2, #2
 800aaee:	f104 010c 	add.w	r1, r4, #12
 800aaf2:	0092      	lsls	r2, r2, #2
 800aaf4:	300c      	adds	r0, #12
 800aaf6:	f7fe fd20 	bl	800953a <memcpy>
 800aafa:	4621      	mov	r1, r4
 800aafc:	4638      	mov	r0, r7
 800aafe:	f7ff ffa5 	bl	800aa4c <_Bfree>
 800ab02:	4644      	mov	r4, r8
 800ab04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab08:	3501      	adds	r5, #1
 800ab0a:	615e      	str	r6, [r3, #20]
 800ab0c:	6125      	str	r5, [r4, #16]
 800ab0e:	4620      	mov	r0, r4
 800ab10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab14:	0800c06e 	.word	0x0800c06e
 800ab18:	0800c0df 	.word	0x0800c0df

0800ab1c <__s2b>:
 800ab1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab20:	460c      	mov	r4, r1
 800ab22:	4615      	mov	r5, r2
 800ab24:	461f      	mov	r7, r3
 800ab26:	2209      	movs	r2, #9
 800ab28:	3308      	adds	r3, #8
 800ab2a:	4606      	mov	r6, r0
 800ab2c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab30:	2100      	movs	r1, #0
 800ab32:	2201      	movs	r2, #1
 800ab34:	429a      	cmp	r2, r3
 800ab36:	db09      	blt.n	800ab4c <__s2b+0x30>
 800ab38:	4630      	mov	r0, r6
 800ab3a:	f7ff ff47 	bl	800a9cc <_Balloc>
 800ab3e:	b940      	cbnz	r0, 800ab52 <__s2b+0x36>
 800ab40:	4602      	mov	r2, r0
 800ab42:	4b19      	ldr	r3, [pc, #100]	@ (800aba8 <__s2b+0x8c>)
 800ab44:	4819      	ldr	r0, [pc, #100]	@ (800abac <__s2b+0x90>)
 800ab46:	21d3      	movs	r1, #211	@ 0xd3
 800ab48:	f000 fe38 	bl	800b7bc <__assert_func>
 800ab4c:	0052      	lsls	r2, r2, #1
 800ab4e:	3101      	adds	r1, #1
 800ab50:	e7f0      	b.n	800ab34 <__s2b+0x18>
 800ab52:	9b08      	ldr	r3, [sp, #32]
 800ab54:	6143      	str	r3, [r0, #20]
 800ab56:	2d09      	cmp	r5, #9
 800ab58:	f04f 0301 	mov.w	r3, #1
 800ab5c:	6103      	str	r3, [r0, #16]
 800ab5e:	dd16      	ble.n	800ab8e <__s2b+0x72>
 800ab60:	f104 0909 	add.w	r9, r4, #9
 800ab64:	46c8      	mov	r8, r9
 800ab66:	442c      	add	r4, r5
 800ab68:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ab6c:	4601      	mov	r1, r0
 800ab6e:	3b30      	subs	r3, #48	@ 0x30
 800ab70:	220a      	movs	r2, #10
 800ab72:	4630      	mov	r0, r6
 800ab74:	f7ff ff8c 	bl	800aa90 <__multadd>
 800ab78:	45a0      	cmp	r8, r4
 800ab7a:	d1f5      	bne.n	800ab68 <__s2b+0x4c>
 800ab7c:	f1a5 0408 	sub.w	r4, r5, #8
 800ab80:	444c      	add	r4, r9
 800ab82:	1b2d      	subs	r5, r5, r4
 800ab84:	1963      	adds	r3, r4, r5
 800ab86:	42bb      	cmp	r3, r7
 800ab88:	db04      	blt.n	800ab94 <__s2b+0x78>
 800ab8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab8e:	340a      	adds	r4, #10
 800ab90:	2509      	movs	r5, #9
 800ab92:	e7f6      	b.n	800ab82 <__s2b+0x66>
 800ab94:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ab98:	4601      	mov	r1, r0
 800ab9a:	3b30      	subs	r3, #48	@ 0x30
 800ab9c:	220a      	movs	r2, #10
 800ab9e:	4630      	mov	r0, r6
 800aba0:	f7ff ff76 	bl	800aa90 <__multadd>
 800aba4:	e7ee      	b.n	800ab84 <__s2b+0x68>
 800aba6:	bf00      	nop
 800aba8:	0800c06e 	.word	0x0800c06e
 800abac:	0800c0df 	.word	0x0800c0df

0800abb0 <__hi0bits>:
 800abb0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800abb4:	4603      	mov	r3, r0
 800abb6:	bf36      	itet	cc
 800abb8:	0403      	lslcc	r3, r0, #16
 800abba:	2000      	movcs	r0, #0
 800abbc:	2010      	movcc	r0, #16
 800abbe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800abc2:	bf3c      	itt	cc
 800abc4:	021b      	lslcc	r3, r3, #8
 800abc6:	3008      	addcc	r0, #8
 800abc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800abcc:	bf3c      	itt	cc
 800abce:	011b      	lslcc	r3, r3, #4
 800abd0:	3004      	addcc	r0, #4
 800abd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abd6:	bf3c      	itt	cc
 800abd8:	009b      	lslcc	r3, r3, #2
 800abda:	3002      	addcc	r0, #2
 800abdc:	2b00      	cmp	r3, #0
 800abde:	db05      	blt.n	800abec <__hi0bits+0x3c>
 800abe0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800abe4:	f100 0001 	add.w	r0, r0, #1
 800abe8:	bf08      	it	eq
 800abea:	2020      	moveq	r0, #32
 800abec:	4770      	bx	lr

0800abee <__lo0bits>:
 800abee:	6803      	ldr	r3, [r0, #0]
 800abf0:	4602      	mov	r2, r0
 800abf2:	f013 0007 	ands.w	r0, r3, #7
 800abf6:	d00b      	beq.n	800ac10 <__lo0bits+0x22>
 800abf8:	07d9      	lsls	r1, r3, #31
 800abfa:	d421      	bmi.n	800ac40 <__lo0bits+0x52>
 800abfc:	0798      	lsls	r0, r3, #30
 800abfe:	bf49      	itett	mi
 800ac00:	085b      	lsrmi	r3, r3, #1
 800ac02:	089b      	lsrpl	r3, r3, #2
 800ac04:	2001      	movmi	r0, #1
 800ac06:	6013      	strmi	r3, [r2, #0]
 800ac08:	bf5c      	itt	pl
 800ac0a:	6013      	strpl	r3, [r2, #0]
 800ac0c:	2002      	movpl	r0, #2
 800ac0e:	4770      	bx	lr
 800ac10:	b299      	uxth	r1, r3
 800ac12:	b909      	cbnz	r1, 800ac18 <__lo0bits+0x2a>
 800ac14:	0c1b      	lsrs	r3, r3, #16
 800ac16:	2010      	movs	r0, #16
 800ac18:	b2d9      	uxtb	r1, r3
 800ac1a:	b909      	cbnz	r1, 800ac20 <__lo0bits+0x32>
 800ac1c:	3008      	adds	r0, #8
 800ac1e:	0a1b      	lsrs	r3, r3, #8
 800ac20:	0719      	lsls	r1, r3, #28
 800ac22:	bf04      	itt	eq
 800ac24:	091b      	lsreq	r3, r3, #4
 800ac26:	3004      	addeq	r0, #4
 800ac28:	0799      	lsls	r1, r3, #30
 800ac2a:	bf04      	itt	eq
 800ac2c:	089b      	lsreq	r3, r3, #2
 800ac2e:	3002      	addeq	r0, #2
 800ac30:	07d9      	lsls	r1, r3, #31
 800ac32:	d403      	bmi.n	800ac3c <__lo0bits+0x4e>
 800ac34:	085b      	lsrs	r3, r3, #1
 800ac36:	f100 0001 	add.w	r0, r0, #1
 800ac3a:	d003      	beq.n	800ac44 <__lo0bits+0x56>
 800ac3c:	6013      	str	r3, [r2, #0]
 800ac3e:	4770      	bx	lr
 800ac40:	2000      	movs	r0, #0
 800ac42:	4770      	bx	lr
 800ac44:	2020      	movs	r0, #32
 800ac46:	4770      	bx	lr

0800ac48 <__i2b>:
 800ac48:	b510      	push	{r4, lr}
 800ac4a:	460c      	mov	r4, r1
 800ac4c:	2101      	movs	r1, #1
 800ac4e:	f7ff febd 	bl	800a9cc <_Balloc>
 800ac52:	4602      	mov	r2, r0
 800ac54:	b928      	cbnz	r0, 800ac62 <__i2b+0x1a>
 800ac56:	4b05      	ldr	r3, [pc, #20]	@ (800ac6c <__i2b+0x24>)
 800ac58:	4805      	ldr	r0, [pc, #20]	@ (800ac70 <__i2b+0x28>)
 800ac5a:	f240 1145 	movw	r1, #325	@ 0x145
 800ac5e:	f000 fdad 	bl	800b7bc <__assert_func>
 800ac62:	2301      	movs	r3, #1
 800ac64:	6144      	str	r4, [r0, #20]
 800ac66:	6103      	str	r3, [r0, #16]
 800ac68:	bd10      	pop	{r4, pc}
 800ac6a:	bf00      	nop
 800ac6c:	0800c06e 	.word	0x0800c06e
 800ac70:	0800c0df 	.word	0x0800c0df

0800ac74 <__multiply>:
 800ac74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac78:	4614      	mov	r4, r2
 800ac7a:	690a      	ldr	r2, [r1, #16]
 800ac7c:	6923      	ldr	r3, [r4, #16]
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	bfa8      	it	ge
 800ac82:	4623      	movge	r3, r4
 800ac84:	460f      	mov	r7, r1
 800ac86:	bfa4      	itt	ge
 800ac88:	460c      	movge	r4, r1
 800ac8a:	461f      	movge	r7, r3
 800ac8c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ac90:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ac94:	68a3      	ldr	r3, [r4, #8]
 800ac96:	6861      	ldr	r1, [r4, #4]
 800ac98:	eb0a 0609 	add.w	r6, sl, r9
 800ac9c:	42b3      	cmp	r3, r6
 800ac9e:	b085      	sub	sp, #20
 800aca0:	bfb8      	it	lt
 800aca2:	3101      	addlt	r1, #1
 800aca4:	f7ff fe92 	bl	800a9cc <_Balloc>
 800aca8:	b930      	cbnz	r0, 800acb8 <__multiply+0x44>
 800acaa:	4602      	mov	r2, r0
 800acac:	4b44      	ldr	r3, [pc, #272]	@ (800adc0 <__multiply+0x14c>)
 800acae:	4845      	ldr	r0, [pc, #276]	@ (800adc4 <__multiply+0x150>)
 800acb0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800acb4:	f000 fd82 	bl	800b7bc <__assert_func>
 800acb8:	f100 0514 	add.w	r5, r0, #20
 800acbc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800acc0:	462b      	mov	r3, r5
 800acc2:	2200      	movs	r2, #0
 800acc4:	4543      	cmp	r3, r8
 800acc6:	d321      	bcc.n	800ad0c <__multiply+0x98>
 800acc8:	f107 0114 	add.w	r1, r7, #20
 800accc:	f104 0214 	add.w	r2, r4, #20
 800acd0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800acd4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800acd8:	9302      	str	r3, [sp, #8]
 800acda:	1b13      	subs	r3, r2, r4
 800acdc:	3b15      	subs	r3, #21
 800acde:	f023 0303 	bic.w	r3, r3, #3
 800ace2:	3304      	adds	r3, #4
 800ace4:	f104 0715 	add.w	r7, r4, #21
 800ace8:	42ba      	cmp	r2, r7
 800acea:	bf38      	it	cc
 800acec:	2304      	movcc	r3, #4
 800acee:	9301      	str	r3, [sp, #4]
 800acf0:	9b02      	ldr	r3, [sp, #8]
 800acf2:	9103      	str	r1, [sp, #12]
 800acf4:	428b      	cmp	r3, r1
 800acf6:	d80c      	bhi.n	800ad12 <__multiply+0x9e>
 800acf8:	2e00      	cmp	r6, #0
 800acfa:	dd03      	ble.n	800ad04 <__multiply+0x90>
 800acfc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d05b      	beq.n	800adbc <__multiply+0x148>
 800ad04:	6106      	str	r6, [r0, #16]
 800ad06:	b005      	add	sp, #20
 800ad08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad0c:	f843 2b04 	str.w	r2, [r3], #4
 800ad10:	e7d8      	b.n	800acc4 <__multiply+0x50>
 800ad12:	f8b1 a000 	ldrh.w	sl, [r1]
 800ad16:	f1ba 0f00 	cmp.w	sl, #0
 800ad1a:	d024      	beq.n	800ad66 <__multiply+0xf2>
 800ad1c:	f104 0e14 	add.w	lr, r4, #20
 800ad20:	46a9      	mov	r9, r5
 800ad22:	f04f 0c00 	mov.w	ip, #0
 800ad26:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ad2a:	f8d9 3000 	ldr.w	r3, [r9]
 800ad2e:	fa1f fb87 	uxth.w	fp, r7
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	fb0a 330b 	mla	r3, sl, fp, r3
 800ad38:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ad3c:	f8d9 7000 	ldr.w	r7, [r9]
 800ad40:	4463      	add	r3, ip
 800ad42:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ad46:	fb0a c70b 	mla	r7, sl, fp, ip
 800ad4a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ad4e:	b29b      	uxth	r3, r3
 800ad50:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ad54:	4572      	cmp	r2, lr
 800ad56:	f849 3b04 	str.w	r3, [r9], #4
 800ad5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ad5e:	d8e2      	bhi.n	800ad26 <__multiply+0xb2>
 800ad60:	9b01      	ldr	r3, [sp, #4]
 800ad62:	f845 c003 	str.w	ip, [r5, r3]
 800ad66:	9b03      	ldr	r3, [sp, #12]
 800ad68:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ad6c:	3104      	adds	r1, #4
 800ad6e:	f1b9 0f00 	cmp.w	r9, #0
 800ad72:	d021      	beq.n	800adb8 <__multiply+0x144>
 800ad74:	682b      	ldr	r3, [r5, #0]
 800ad76:	f104 0c14 	add.w	ip, r4, #20
 800ad7a:	46ae      	mov	lr, r5
 800ad7c:	f04f 0a00 	mov.w	sl, #0
 800ad80:	f8bc b000 	ldrh.w	fp, [ip]
 800ad84:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ad88:	fb09 770b 	mla	r7, r9, fp, r7
 800ad8c:	4457      	add	r7, sl
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ad94:	f84e 3b04 	str.w	r3, [lr], #4
 800ad98:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ad9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ada0:	f8be 3000 	ldrh.w	r3, [lr]
 800ada4:	fb09 330a 	mla	r3, r9, sl, r3
 800ada8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800adac:	4562      	cmp	r2, ip
 800adae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800adb2:	d8e5      	bhi.n	800ad80 <__multiply+0x10c>
 800adb4:	9f01      	ldr	r7, [sp, #4]
 800adb6:	51eb      	str	r3, [r5, r7]
 800adb8:	3504      	adds	r5, #4
 800adba:	e799      	b.n	800acf0 <__multiply+0x7c>
 800adbc:	3e01      	subs	r6, #1
 800adbe:	e79b      	b.n	800acf8 <__multiply+0x84>
 800adc0:	0800c06e 	.word	0x0800c06e
 800adc4:	0800c0df 	.word	0x0800c0df

0800adc8 <__pow5mult>:
 800adc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adcc:	4615      	mov	r5, r2
 800adce:	f012 0203 	ands.w	r2, r2, #3
 800add2:	4607      	mov	r7, r0
 800add4:	460e      	mov	r6, r1
 800add6:	d007      	beq.n	800ade8 <__pow5mult+0x20>
 800add8:	4c25      	ldr	r4, [pc, #148]	@ (800ae70 <__pow5mult+0xa8>)
 800adda:	3a01      	subs	r2, #1
 800addc:	2300      	movs	r3, #0
 800adde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ade2:	f7ff fe55 	bl	800aa90 <__multadd>
 800ade6:	4606      	mov	r6, r0
 800ade8:	10ad      	asrs	r5, r5, #2
 800adea:	d03d      	beq.n	800ae68 <__pow5mult+0xa0>
 800adec:	69fc      	ldr	r4, [r7, #28]
 800adee:	b97c      	cbnz	r4, 800ae10 <__pow5mult+0x48>
 800adf0:	2010      	movs	r0, #16
 800adf2:	f7ff fd23 	bl	800a83c <malloc>
 800adf6:	4602      	mov	r2, r0
 800adf8:	61f8      	str	r0, [r7, #28]
 800adfa:	b928      	cbnz	r0, 800ae08 <__pow5mult+0x40>
 800adfc:	4b1d      	ldr	r3, [pc, #116]	@ (800ae74 <__pow5mult+0xac>)
 800adfe:	481e      	ldr	r0, [pc, #120]	@ (800ae78 <__pow5mult+0xb0>)
 800ae00:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ae04:	f000 fcda 	bl	800b7bc <__assert_func>
 800ae08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae0c:	6004      	str	r4, [r0, #0]
 800ae0e:	60c4      	str	r4, [r0, #12]
 800ae10:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ae14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ae18:	b94c      	cbnz	r4, 800ae2e <__pow5mult+0x66>
 800ae1a:	f240 2171 	movw	r1, #625	@ 0x271
 800ae1e:	4638      	mov	r0, r7
 800ae20:	f7ff ff12 	bl	800ac48 <__i2b>
 800ae24:	2300      	movs	r3, #0
 800ae26:	f8c8 0008 	str.w	r0, [r8, #8]
 800ae2a:	4604      	mov	r4, r0
 800ae2c:	6003      	str	r3, [r0, #0]
 800ae2e:	f04f 0900 	mov.w	r9, #0
 800ae32:	07eb      	lsls	r3, r5, #31
 800ae34:	d50a      	bpl.n	800ae4c <__pow5mult+0x84>
 800ae36:	4631      	mov	r1, r6
 800ae38:	4622      	mov	r2, r4
 800ae3a:	4638      	mov	r0, r7
 800ae3c:	f7ff ff1a 	bl	800ac74 <__multiply>
 800ae40:	4631      	mov	r1, r6
 800ae42:	4680      	mov	r8, r0
 800ae44:	4638      	mov	r0, r7
 800ae46:	f7ff fe01 	bl	800aa4c <_Bfree>
 800ae4a:	4646      	mov	r6, r8
 800ae4c:	106d      	asrs	r5, r5, #1
 800ae4e:	d00b      	beq.n	800ae68 <__pow5mult+0xa0>
 800ae50:	6820      	ldr	r0, [r4, #0]
 800ae52:	b938      	cbnz	r0, 800ae64 <__pow5mult+0x9c>
 800ae54:	4622      	mov	r2, r4
 800ae56:	4621      	mov	r1, r4
 800ae58:	4638      	mov	r0, r7
 800ae5a:	f7ff ff0b 	bl	800ac74 <__multiply>
 800ae5e:	6020      	str	r0, [r4, #0]
 800ae60:	f8c0 9000 	str.w	r9, [r0]
 800ae64:	4604      	mov	r4, r0
 800ae66:	e7e4      	b.n	800ae32 <__pow5mult+0x6a>
 800ae68:	4630      	mov	r0, r6
 800ae6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae6e:	bf00      	nop
 800ae70:	0800c138 	.word	0x0800c138
 800ae74:	0800bfff 	.word	0x0800bfff
 800ae78:	0800c0df 	.word	0x0800c0df

0800ae7c <__lshift>:
 800ae7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae80:	460c      	mov	r4, r1
 800ae82:	6849      	ldr	r1, [r1, #4]
 800ae84:	6923      	ldr	r3, [r4, #16]
 800ae86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ae8a:	68a3      	ldr	r3, [r4, #8]
 800ae8c:	4607      	mov	r7, r0
 800ae8e:	4691      	mov	r9, r2
 800ae90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae94:	f108 0601 	add.w	r6, r8, #1
 800ae98:	42b3      	cmp	r3, r6
 800ae9a:	db0b      	blt.n	800aeb4 <__lshift+0x38>
 800ae9c:	4638      	mov	r0, r7
 800ae9e:	f7ff fd95 	bl	800a9cc <_Balloc>
 800aea2:	4605      	mov	r5, r0
 800aea4:	b948      	cbnz	r0, 800aeba <__lshift+0x3e>
 800aea6:	4602      	mov	r2, r0
 800aea8:	4b28      	ldr	r3, [pc, #160]	@ (800af4c <__lshift+0xd0>)
 800aeaa:	4829      	ldr	r0, [pc, #164]	@ (800af50 <__lshift+0xd4>)
 800aeac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800aeb0:	f000 fc84 	bl	800b7bc <__assert_func>
 800aeb4:	3101      	adds	r1, #1
 800aeb6:	005b      	lsls	r3, r3, #1
 800aeb8:	e7ee      	b.n	800ae98 <__lshift+0x1c>
 800aeba:	2300      	movs	r3, #0
 800aebc:	f100 0114 	add.w	r1, r0, #20
 800aec0:	f100 0210 	add.w	r2, r0, #16
 800aec4:	4618      	mov	r0, r3
 800aec6:	4553      	cmp	r3, sl
 800aec8:	db33      	blt.n	800af32 <__lshift+0xb6>
 800aeca:	6920      	ldr	r0, [r4, #16]
 800aecc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aed0:	f104 0314 	add.w	r3, r4, #20
 800aed4:	f019 091f 	ands.w	r9, r9, #31
 800aed8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aedc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aee0:	d02b      	beq.n	800af3a <__lshift+0xbe>
 800aee2:	f1c9 0e20 	rsb	lr, r9, #32
 800aee6:	468a      	mov	sl, r1
 800aee8:	2200      	movs	r2, #0
 800aeea:	6818      	ldr	r0, [r3, #0]
 800aeec:	fa00 f009 	lsl.w	r0, r0, r9
 800aef0:	4310      	orrs	r0, r2
 800aef2:	f84a 0b04 	str.w	r0, [sl], #4
 800aef6:	f853 2b04 	ldr.w	r2, [r3], #4
 800aefa:	459c      	cmp	ip, r3
 800aefc:	fa22 f20e 	lsr.w	r2, r2, lr
 800af00:	d8f3      	bhi.n	800aeea <__lshift+0x6e>
 800af02:	ebac 0304 	sub.w	r3, ip, r4
 800af06:	3b15      	subs	r3, #21
 800af08:	f023 0303 	bic.w	r3, r3, #3
 800af0c:	3304      	adds	r3, #4
 800af0e:	f104 0015 	add.w	r0, r4, #21
 800af12:	4584      	cmp	ip, r0
 800af14:	bf38      	it	cc
 800af16:	2304      	movcc	r3, #4
 800af18:	50ca      	str	r2, [r1, r3]
 800af1a:	b10a      	cbz	r2, 800af20 <__lshift+0xa4>
 800af1c:	f108 0602 	add.w	r6, r8, #2
 800af20:	3e01      	subs	r6, #1
 800af22:	4638      	mov	r0, r7
 800af24:	612e      	str	r6, [r5, #16]
 800af26:	4621      	mov	r1, r4
 800af28:	f7ff fd90 	bl	800aa4c <_Bfree>
 800af2c:	4628      	mov	r0, r5
 800af2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af32:	f842 0f04 	str.w	r0, [r2, #4]!
 800af36:	3301      	adds	r3, #1
 800af38:	e7c5      	b.n	800aec6 <__lshift+0x4a>
 800af3a:	3904      	subs	r1, #4
 800af3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800af40:	f841 2f04 	str.w	r2, [r1, #4]!
 800af44:	459c      	cmp	ip, r3
 800af46:	d8f9      	bhi.n	800af3c <__lshift+0xc0>
 800af48:	e7ea      	b.n	800af20 <__lshift+0xa4>
 800af4a:	bf00      	nop
 800af4c:	0800c06e 	.word	0x0800c06e
 800af50:	0800c0df 	.word	0x0800c0df

0800af54 <__mcmp>:
 800af54:	690a      	ldr	r2, [r1, #16]
 800af56:	4603      	mov	r3, r0
 800af58:	6900      	ldr	r0, [r0, #16]
 800af5a:	1a80      	subs	r0, r0, r2
 800af5c:	b530      	push	{r4, r5, lr}
 800af5e:	d10e      	bne.n	800af7e <__mcmp+0x2a>
 800af60:	3314      	adds	r3, #20
 800af62:	3114      	adds	r1, #20
 800af64:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800af68:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800af6c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800af70:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800af74:	4295      	cmp	r5, r2
 800af76:	d003      	beq.n	800af80 <__mcmp+0x2c>
 800af78:	d205      	bcs.n	800af86 <__mcmp+0x32>
 800af7a:	f04f 30ff 	mov.w	r0, #4294967295
 800af7e:	bd30      	pop	{r4, r5, pc}
 800af80:	42a3      	cmp	r3, r4
 800af82:	d3f3      	bcc.n	800af6c <__mcmp+0x18>
 800af84:	e7fb      	b.n	800af7e <__mcmp+0x2a>
 800af86:	2001      	movs	r0, #1
 800af88:	e7f9      	b.n	800af7e <__mcmp+0x2a>
	...

0800af8c <__mdiff>:
 800af8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af90:	4689      	mov	r9, r1
 800af92:	4606      	mov	r6, r0
 800af94:	4611      	mov	r1, r2
 800af96:	4648      	mov	r0, r9
 800af98:	4614      	mov	r4, r2
 800af9a:	f7ff ffdb 	bl	800af54 <__mcmp>
 800af9e:	1e05      	subs	r5, r0, #0
 800afa0:	d112      	bne.n	800afc8 <__mdiff+0x3c>
 800afa2:	4629      	mov	r1, r5
 800afa4:	4630      	mov	r0, r6
 800afa6:	f7ff fd11 	bl	800a9cc <_Balloc>
 800afaa:	4602      	mov	r2, r0
 800afac:	b928      	cbnz	r0, 800afba <__mdiff+0x2e>
 800afae:	4b3f      	ldr	r3, [pc, #252]	@ (800b0ac <__mdiff+0x120>)
 800afb0:	f240 2137 	movw	r1, #567	@ 0x237
 800afb4:	483e      	ldr	r0, [pc, #248]	@ (800b0b0 <__mdiff+0x124>)
 800afb6:	f000 fc01 	bl	800b7bc <__assert_func>
 800afba:	2301      	movs	r3, #1
 800afbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800afc0:	4610      	mov	r0, r2
 800afc2:	b003      	add	sp, #12
 800afc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afc8:	bfbc      	itt	lt
 800afca:	464b      	movlt	r3, r9
 800afcc:	46a1      	movlt	r9, r4
 800afce:	4630      	mov	r0, r6
 800afd0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800afd4:	bfba      	itte	lt
 800afd6:	461c      	movlt	r4, r3
 800afd8:	2501      	movlt	r5, #1
 800afda:	2500      	movge	r5, #0
 800afdc:	f7ff fcf6 	bl	800a9cc <_Balloc>
 800afe0:	4602      	mov	r2, r0
 800afe2:	b918      	cbnz	r0, 800afec <__mdiff+0x60>
 800afe4:	4b31      	ldr	r3, [pc, #196]	@ (800b0ac <__mdiff+0x120>)
 800afe6:	f240 2145 	movw	r1, #581	@ 0x245
 800afea:	e7e3      	b.n	800afb4 <__mdiff+0x28>
 800afec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aff0:	6926      	ldr	r6, [r4, #16]
 800aff2:	60c5      	str	r5, [r0, #12]
 800aff4:	f109 0310 	add.w	r3, r9, #16
 800aff8:	f109 0514 	add.w	r5, r9, #20
 800affc:	f104 0e14 	add.w	lr, r4, #20
 800b000:	f100 0b14 	add.w	fp, r0, #20
 800b004:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b008:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b00c:	9301      	str	r3, [sp, #4]
 800b00e:	46d9      	mov	r9, fp
 800b010:	f04f 0c00 	mov.w	ip, #0
 800b014:	9b01      	ldr	r3, [sp, #4]
 800b016:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b01a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b01e:	9301      	str	r3, [sp, #4]
 800b020:	fa1f f38a 	uxth.w	r3, sl
 800b024:	4619      	mov	r1, r3
 800b026:	b283      	uxth	r3, r0
 800b028:	1acb      	subs	r3, r1, r3
 800b02a:	0c00      	lsrs	r0, r0, #16
 800b02c:	4463      	add	r3, ip
 800b02e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b032:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b036:	b29b      	uxth	r3, r3
 800b038:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b03c:	4576      	cmp	r6, lr
 800b03e:	f849 3b04 	str.w	r3, [r9], #4
 800b042:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b046:	d8e5      	bhi.n	800b014 <__mdiff+0x88>
 800b048:	1b33      	subs	r3, r6, r4
 800b04a:	3b15      	subs	r3, #21
 800b04c:	f023 0303 	bic.w	r3, r3, #3
 800b050:	3415      	adds	r4, #21
 800b052:	3304      	adds	r3, #4
 800b054:	42a6      	cmp	r6, r4
 800b056:	bf38      	it	cc
 800b058:	2304      	movcc	r3, #4
 800b05a:	441d      	add	r5, r3
 800b05c:	445b      	add	r3, fp
 800b05e:	461e      	mov	r6, r3
 800b060:	462c      	mov	r4, r5
 800b062:	4544      	cmp	r4, r8
 800b064:	d30e      	bcc.n	800b084 <__mdiff+0xf8>
 800b066:	f108 0103 	add.w	r1, r8, #3
 800b06a:	1b49      	subs	r1, r1, r5
 800b06c:	f021 0103 	bic.w	r1, r1, #3
 800b070:	3d03      	subs	r5, #3
 800b072:	45a8      	cmp	r8, r5
 800b074:	bf38      	it	cc
 800b076:	2100      	movcc	r1, #0
 800b078:	440b      	add	r3, r1
 800b07a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b07e:	b191      	cbz	r1, 800b0a6 <__mdiff+0x11a>
 800b080:	6117      	str	r7, [r2, #16]
 800b082:	e79d      	b.n	800afc0 <__mdiff+0x34>
 800b084:	f854 1b04 	ldr.w	r1, [r4], #4
 800b088:	46e6      	mov	lr, ip
 800b08a:	0c08      	lsrs	r0, r1, #16
 800b08c:	fa1c fc81 	uxtah	ip, ip, r1
 800b090:	4471      	add	r1, lr
 800b092:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b096:	b289      	uxth	r1, r1
 800b098:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b09c:	f846 1b04 	str.w	r1, [r6], #4
 800b0a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b0a4:	e7dd      	b.n	800b062 <__mdiff+0xd6>
 800b0a6:	3f01      	subs	r7, #1
 800b0a8:	e7e7      	b.n	800b07a <__mdiff+0xee>
 800b0aa:	bf00      	nop
 800b0ac:	0800c06e 	.word	0x0800c06e
 800b0b0:	0800c0df 	.word	0x0800c0df

0800b0b4 <__ulp>:
 800b0b4:	b082      	sub	sp, #8
 800b0b6:	ed8d 0b00 	vstr	d0, [sp]
 800b0ba:	9a01      	ldr	r2, [sp, #4]
 800b0bc:	4b0f      	ldr	r3, [pc, #60]	@ (800b0fc <__ulp+0x48>)
 800b0be:	4013      	ands	r3, r2
 800b0c0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	dc08      	bgt.n	800b0da <__ulp+0x26>
 800b0c8:	425b      	negs	r3, r3
 800b0ca:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b0ce:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b0d2:	da04      	bge.n	800b0de <__ulp+0x2a>
 800b0d4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b0d8:	4113      	asrs	r3, r2
 800b0da:	2200      	movs	r2, #0
 800b0dc:	e008      	b.n	800b0f0 <__ulp+0x3c>
 800b0de:	f1a2 0314 	sub.w	r3, r2, #20
 800b0e2:	2b1e      	cmp	r3, #30
 800b0e4:	bfda      	itte	le
 800b0e6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b0ea:	40da      	lsrle	r2, r3
 800b0ec:	2201      	movgt	r2, #1
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	4610      	mov	r0, r2
 800b0f4:	ec41 0b10 	vmov	d0, r0, r1
 800b0f8:	b002      	add	sp, #8
 800b0fa:	4770      	bx	lr
 800b0fc:	7ff00000 	.word	0x7ff00000

0800b100 <__b2d>:
 800b100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b104:	6906      	ldr	r6, [r0, #16]
 800b106:	f100 0814 	add.w	r8, r0, #20
 800b10a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b10e:	1f37      	subs	r7, r6, #4
 800b110:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b114:	4610      	mov	r0, r2
 800b116:	f7ff fd4b 	bl	800abb0 <__hi0bits>
 800b11a:	f1c0 0320 	rsb	r3, r0, #32
 800b11e:	280a      	cmp	r0, #10
 800b120:	600b      	str	r3, [r1, #0]
 800b122:	491b      	ldr	r1, [pc, #108]	@ (800b190 <__b2d+0x90>)
 800b124:	dc15      	bgt.n	800b152 <__b2d+0x52>
 800b126:	f1c0 0c0b 	rsb	ip, r0, #11
 800b12a:	fa22 f30c 	lsr.w	r3, r2, ip
 800b12e:	45b8      	cmp	r8, r7
 800b130:	ea43 0501 	orr.w	r5, r3, r1
 800b134:	bf34      	ite	cc
 800b136:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b13a:	2300      	movcs	r3, #0
 800b13c:	3015      	adds	r0, #21
 800b13e:	fa02 f000 	lsl.w	r0, r2, r0
 800b142:	fa23 f30c 	lsr.w	r3, r3, ip
 800b146:	4303      	orrs	r3, r0
 800b148:	461c      	mov	r4, r3
 800b14a:	ec45 4b10 	vmov	d0, r4, r5
 800b14e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b152:	45b8      	cmp	r8, r7
 800b154:	bf3a      	itte	cc
 800b156:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b15a:	f1a6 0708 	subcc.w	r7, r6, #8
 800b15e:	2300      	movcs	r3, #0
 800b160:	380b      	subs	r0, #11
 800b162:	d012      	beq.n	800b18a <__b2d+0x8a>
 800b164:	f1c0 0120 	rsb	r1, r0, #32
 800b168:	fa23 f401 	lsr.w	r4, r3, r1
 800b16c:	4082      	lsls	r2, r0
 800b16e:	4322      	orrs	r2, r4
 800b170:	4547      	cmp	r7, r8
 800b172:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b176:	bf8c      	ite	hi
 800b178:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b17c:	2200      	movls	r2, #0
 800b17e:	4083      	lsls	r3, r0
 800b180:	40ca      	lsrs	r2, r1
 800b182:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b186:	4313      	orrs	r3, r2
 800b188:	e7de      	b.n	800b148 <__b2d+0x48>
 800b18a:	ea42 0501 	orr.w	r5, r2, r1
 800b18e:	e7db      	b.n	800b148 <__b2d+0x48>
 800b190:	3ff00000 	.word	0x3ff00000

0800b194 <__d2b>:
 800b194:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b198:	460f      	mov	r7, r1
 800b19a:	2101      	movs	r1, #1
 800b19c:	ec59 8b10 	vmov	r8, r9, d0
 800b1a0:	4616      	mov	r6, r2
 800b1a2:	f7ff fc13 	bl	800a9cc <_Balloc>
 800b1a6:	4604      	mov	r4, r0
 800b1a8:	b930      	cbnz	r0, 800b1b8 <__d2b+0x24>
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	4b23      	ldr	r3, [pc, #140]	@ (800b23c <__d2b+0xa8>)
 800b1ae:	4824      	ldr	r0, [pc, #144]	@ (800b240 <__d2b+0xac>)
 800b1b0:	f240 310f 	movw	r1, #783	@ 0x30f
 800b1b4:	f000 fb02 	bl	800b7bc <__assert_func>
 800b1b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b1bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b1c0:	b10d      	cbz	r5, 800b1c6 <__d2b+0x32>
 800b1c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b1c6:	9301      	str	r3, [sp, #4]
 800b1c8:	f1b8 0300 	subs.w	r3, r8, #0
 800b1cc:	d023      	beq.n	800b216 <__d2b+0x82>
 800b1ce:	4668      	mov	r0, sp
 800b1d0:	9300      	str	r3, [sp, #0]
 800b1d2:	f7ff fd0c 	bl	800abee <__lo0bits>
 800b1d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b1da:	b1d0      	cbz	r0, 800b212 <__d2b+0x7e>
 800b1dc:	f1c0 0320 	rsb	r3, r0, #32
 800b1e0:	fa02 f303 	lsl.w	r3, r2, r3
 800b1e4:	430b      	orrs	r3, r1
 800b1e6:	40c2      	lsrs	r2, r0
 800b1e8:	6163      	str	r3, [r4, #20]
 800b1ea:	9201      	str	r2, [sp, #4]
 800b1ec:	9b01      	ldr	r3, [sp, #4]
 800b1ee:	61a3      	str	r3, [r4, #24]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	bf0c      	ite	eq
 800b1f4:	2201      	moveq	r2, #1
 800b1f6:	2202      	movne	r2, #2
 800b1f8:	6122      	str	r2, [r4, #16]
 800b1fa:	b1a5      	cbz	r5, 800b226 <__d2b+0x92>
 800b1fc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b200:	4405      	add	r5, r0
 800b202:	603d      	str	r5, [r7, #0]
 800b204:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b208:	6030      	str	r0, [r6, #0]
 800b20a:	4620      	mov	r0, r4
 800b20c:	b003      	add	sp, #12
 800b20e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b212:	6161      	str	r1, [r4, #20]
 800b214:	e7ea      	b.n	800b1ec <__d2b+0x58>
 800b216:	a801      	add	r0, sp, #4
 800b218:	f7ff fce9 	bl	800abee <__lo0bits>
 800b21c:	9b01      	ldr	r3, [sp, #4]
 800b21e:	6163      	str	r3, [r4, #20]
 800b220:	3020      	adds	r0, #32
 800b222:	2201      	movs	r2, #1
 800b224:	e7e8      	b.n	800b1f8 <__d2b+0x64>
 800b226:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b22a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b22e:	6038      	str	r0, [r7, #0]
 800b230:	6918      	ldr	r0, [r3, #16]
 800b232:	f7ff fcbd 	bl	800abb0 <__hi0bits>
 800b236:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b23a:	e7e5      	b.n	800b208 <__d2b+0x74>
 800b23c:	0800c06e 	.word	0x0800c06e
 800b240:	0800c0df 	.word	0x0800c0df

0800b244 <__ratio>:
 800b244:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b248:	4688      	mov	r8, r1
 800b24a:	4669      	mov	r1, sp
 800b24c:	4681      	mov	r9, r0
 800b24e:	f7ff ff57 	bl	800b100 <__b2d>
 800b252:	a901      	add	r1, sp, #4
 800b254:	4640      	mov	r0, r8
 800b256:	ec55 4b10 	vmov	r4, r5, d0
 800b25a:	f7ff ff51 	bl	800b100 <__b2d>
 800b25e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b262:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800b266:	1ad2      	subs	r2, r2, r3
 800b268:	e9dd 3100 	ldrd	r3, r1, [sp]
 800b26c:	1a5b      	subs	r3, r3, r1
 800b26e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800b272:	ec57 6b10 	vmov	r6, r7, d0
 800b276:	2b00      	cmp	r3, #0
 800b278:	bfd6      	itet	le
 800b27a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b27e:	462a      	movgt	r2, r5
 800b280:	463a      	movle	r2, r7
 800b282:	46ab      	mov	fp, r5
 800b284:	46a2      	mov	sl, r4
 800b286:	bfce      	itee	gt
 800b288:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b28c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800b290:	ee00 3a90 	vmovle	s1, r3
 800b294:	ec4b ab17 	vmov	d7, sl, fp
 800b298:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800b29c:	b003      	add	sp, #12
 800b29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b2a2 <__copybits>:
 800b2a2:	3901      	subs	r1, #1
 800b2a4:	b570      	push	{r4, r5, r6, lr}
 800b2a6:	1149      	asrs	r1, r1, #5
 800b2a8:	6914      	ldr	r4, [r2, #16]
 800b2aa:	3101      	adds	r1, #1
 800b2ac:	f102 0314 	add.w	r3, r2, #20
 800b2b0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b2b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b2b8:	1f05      	subs	r5, r0, #4
 800b2ba:	42a3      	cmp	r3, r4
 800b2bc:	d30c      	bcc.n	800b2d8 <__copybits+0x36>
 800b2be:	1aa3      	subs	r3, r4, r2
 800b2c0:	3b11      	subs	r3, #17
 800b2c2:	f023 0303 	bic.w	r3, r3, #3
 800b2c6:	3211      	adds	r2, #17
 800b2c8:	42a2      	cmp	r2, r4
 800b2ca:	bf88      	it	hi
 800b2cc:	2300      	movhi	r3, #0
 800b2ce:	4418      	add	r0, r3
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	4288      	cmp	r0, r1
 800b2d4:	d305      	bcc.n	800b2e2 <__copybits+0x40>
 800b2d6:	bd70      	pop	{r4, r5, r6, pc}
 800b2d8:	f853 6b04 	ldr.w	r6, [r3], #4
 800b2dc:	f845 6f04 	str.w	r6, [r5, #4]!
 800b2e0:	e7eb      	b.n	800b2ba <__copybits+0x18>
 800b2e2:	f840 3b04 	str.w	r3, [r0], #4
 800b2e6:	e7f4      	b.n	800b2d2 <__copybits+0x30>

0800b2e8 <__any_on>:
 800b2e8:	f100 0214 	add.w	r2, r0, #20
 800b2ec:	6900      	ldr	r0, [r0, #16]
 800b2ee:	114b      	asrs	r3, r1, #5
 800b2f0:	4298      	cmp	r0, r3
 800b2f2:	b510      	push	{r4, lr}
 800b2f4:	db11      	blt.n	800b31a <__any_on+0x32>
 800b2f6:	dd0a      	ble.n	800b30e <__any_on+0x26>
 800b2f8:	f011 011f 	ands.w	r1, r1, #31
 800b2fc:	d007      	beq.n	800b30e <__any_on+0x26>
 800b2fe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b302:	fa24 f001 	lsr.w	r0, r4, r1
 800b306:	fa00 f101 	lsl.w	r1, r0, r1
 800b30a:	428c      	cmp	r4, r1
 800b30c:	d10b      	bne.n	800b326 <__any_on+0x3e>
 800b30e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b312:	4293      	cmp	r3, r2
 800b314:	d803      	bhi.n	800b31e <__any_on+0x36>
 800b316:	2000      	movs	r0, #0
 800b318:	bd10      	pop	{r4, pc}
 800b31a:	4603      	mov	r3, r0
 800b31c:	e7f7      	b.n	800b30e <__any_on+0x26>
 800b31e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b322:	2900      	cmp	r1, #0
 800b324:	d0f5      	beq.n	800b312 <__any_on+0x2a>
 800b326:	2001      	movs	r0, #1
 800b328:	e7f6      	b.n	800b318 <__any_on+0x30>

0800b32a <__ascii_wctomb>:
 800b32a:	4603      	mov	r3, r0
 800b32c:	4608      	mov	r0, r1
 800b32e:	b141      	cbz	r1, 800b342 <__ascii_wctomb+0x18>
 800b330:	2aff      	cmp	r2, #255	@ 0xff
 800b332:	d904      	bls.n	800b33e <__ascii_wctomb+0x14>
 800b334:	228a      	movs	r2, #138	@ 0x8a
 800b336:	601a      	str	r2, [r3, #0]
 800b338:	f04f 30ff 	mov.w	r0, #4294967295
 800b33c:	4770      	bx	lr
 800b33e:	700a      	strb	r2, [r1, #0]
 800b340:	2001      	movs	r0, #1
 800b342:	4770      	bx	lr

0800b344 <__ssputs_r>:
 800b344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b348:	688e      	ldr	r6, [r1, #8]
 800b34a:	461f      	mov	r7, r3
 800b34c:	42be      	cmp	r6, r7
 800b34e:	680b      	ldr	r3, [r1, #0]
 800b350:	4682      	mov	sl, r0
 800b352:	460c      	mov	r4, r1
 800b354:	4690      	mov	r8, r2
 800b356:	d82d      	bhi.n	800b3b4 <__ssputs_r+0x70>
 800b358:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b35c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b360:	d026      	beq.n	800b3b0 <__ssputs_r+0x6c>
 800b362:	6965      	ldr	r5, [r4, #20]
 800b364:	6909      	ldr	r1, [r1, #16]
 800b366:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b36a:	eba3 0901 	sub.w	r9, r3, r1
 800b36e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b372:	1c7b      	adds	r3, r7, #1
 800b374:	444b      	add	r3, r9
 800b376:	106d      	asrs	r5, r5, #1
 800b378:	429d      	cmp	r5, r3
 800b37a:	bf38      	it	cc
 800b37c:	461d      	movcc	r5, r3
 800b37e:	0553      	lsls	r3, r2, #21
 800b380:	d527      	bpl.n	800b3d2 <__ssputs_r+0x8e>
 800b382:	4629      	mov	r1, r5
 800b384:	f7ff fa84 	bl	800a890 <_malloc_r>
 800b388:	4606      	mov	r6, r0
 800b38a:	b360      	cbz	r0, 800b3e6 <__ssputs_r+0xa2>
 800b38c:	6921      	ldr	r1, [r4, #16]
 800b38e:	464a      	mov	r2, r9
 800b390:	f7fe f8d3 	bl	800953a <memcpy>
 800b394:	89a3      	ldrh	r3, [r4, #12]
 800b396:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b39a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b39e:	81a3      	strh	r3, [r4, #12]
 800b3a0:	6126      	str	r6, [r4, #16]
 800b3a2:	6165      	str	r5, [r4, #20]
 800b3a4:	444e      	add	r6, r9
 800b3a6:	eba5 0509 	sub.w	r5, r5, r9
 800b3aa:	6026      	str	r6, [r4, #0]
 800b3ac:	60a5      	str	r5, [r4, #8]
 800b3ae:	463e      	mov	r6, r7
 800b3b0:	42be      	cmp	r6, r7
 800b3b2:	d900      	bls.n	800b3b6 <__ssputs_r+0x72>
 800b3b4:	463e      	mov	r6, r7
 800b3b6:	6820      	ldr	r0, [r4, #0]
 800b3b8:	4632      	mov	r2, r6
 800b3ba:	4641      	mov	r1, r8
 800b3bc:	f000 f9c6 	bl	800b74c <memmove>
 800b3c0:	68a3      	ldr	r3, [r4, #8]
 800b3c2:	1b9b      	subs	r3, r3, r6
 800b3c4:	60a3      	str	r3, [r4, #8]
 800b3c6:	6823      	ldr	r3, [r4, #0]
 800b3c8:	4433      	add	r3, r6
 800b3ca:	6023      	str	r3, [r4, #0]
 800b3cc:	2000      	movs	r0, #0
 800b3ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3d2:	462a      	mov	r2, r5
 800b3d4:	f000 fa24 	bl	800b820 <_realloc_r>
 800b3d8:	4606      	mov	r6, r0
 800b3da:	2800      	cmp	r0, #0
 800b3dc:	d1e0      	bne.n	800b3a0 <__ssputs_r+0x5c>
 800b3de:	6921      	ldr	r1, [r4, #16]
 800b3e0:	4650      	mov	r0, sl
 800b3e2:	f7fe fea7 	bl	800a134 <_free_r>
 800b3e6:	230c      	movs	r3, #12
 800b3e8:	f8ca 3000 	str.w	r3, [sl]
 800b3ec:	89a3      	ldrh	r3, [r4, #12]
 800b3ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3f2:	81a3      	strh	r3, [r4, #12]
 800b3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b3f8:	e7e9      	b.n	800b3ce <__ssputs_r+0x8a>
	...

0800b3fc <_svfiprintf_r>:
 800b3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b400:	4698      	mov	r8, r3
 800b402:	898b      	ldrh	r3, [r1, #12]
 800b404:	061b      	lsls	r3, r3, #24
 800b406:	b09d      	sub	sp, #116	@ 0x74
 800b408:	4607      	mov	r7, r0
 800b40a:	460d      	mov	r5, r1
 800b40c:	4614      	mov	r4, r2
 800b40e:	d510      	bpl.n	800b432 <_svfiprintf_r+0x36>
 800b410:	690b      	ldr	r3, [r1, #16]
 800b412:	b973      	cbnz	r3, 800b432 <_svfiprintf_r+0x36>
 800b414:	2140      	movs	r1, #64	@ 0x40
 800b416:	f7ff fa3b 	bl	800a890 <_malloc_r>
 800b41a:	6028      	str	r0, [r5, #0]
 800b41c:	6128      	str	r0, [r5, #16]
 800b41e:	b930      	cbnz	r0, 800b42e <_svfiprintf_r+0x32>
 800b420:	230c      	movs	r3, #12
 800b422:	603b      	str	r3, [r7, #0]
 800b424:	f04f 30ff 	mov.w	r0, #4294967295
 800b428:	b01d      	add	sp, #116	@ 0x74
 800b42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b42e:	2340      	movs	r3, #64	@ 0x40
 800b430:	616b      	str	r3, [r5, #20]
 800b432:	2300      	movs	r3, #0
 800b434:	9309      	str	r3, [sp, #36]	@ 0x24
 800b436:	2320      	movs	r3, #32
 800b438:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b43c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b440:	2330      	movs	r3, #48	@ 0x30
 800b442:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b5e0 <_svfiprintf_r+0x1e4>
 800b446:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b44a:	f04f 0901 	mov.w	r9, #1
 800b44e:	4623      	mov	r3, r4
 800b450:	469a      	mov	sl, r3
 800b452:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b456:	b10a      	cbz	r2, 800b45c <_svfiprintf_r+0x60>
 800b458:	2a25      	cmp	r2, #37	@ 0x25
 800b45a:	d1f9      	bne.n	800b450 <_svfiprintf_r+0x54>
 800b45c:	ebba 0b04 	subs.w	fp, sl, r4
 800b460:	d00b      	beq.n	800b47a <_svfiprintf_r+0x7e>
 800b462:	465b      	mov	r3, fp
 800b464:	4622      	mov	r2, r4
 800b466:	4629      	mov	r1, r5
 800b468:	4638      	mov	r0, r7
 800b46a:	f7ff ff6b 	bl	800b344 <__ssputs_r>
 800b46e:	3001      	adds	r0, #1
 800b470:	f000 80a7 	beq.w	800b5c2 <_svfiprintf_r+0x1c6>
 800b474:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b476:	445a      	add	r2, fp
 800b478:	9209      	str	r2, [sp, #36]	@ 0x24
 800b47a:	f89a 3000 	ldrb.w	r3, [sl]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	f000 809f 	beq.w	800b5c2 <_svfiprintf_r+0x1c6>
 800b484:	2300      	movs	r3, #0
 800b486:	f04f 32ff 	mov.w	r2, #4294967295
 800b48a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b48e:	f10a 0a01 	add.w	sl, sl, #1
 800b492:	9304      	str	r3, [sp, #16]
 800b494:	9307      	str	r3, [sp, #28]
 800b496:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b49a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b49c:	4654      	mov	r4, sl
 800b49e:	2205      	movs	r2, #5
 800b4a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4a4:	484e      	ldr	r0, [pc, #312]	@ (800b5e0 <_svfiprintf_r+0x1e4>)
 800b4a6:	f7f4 fecb 	bl	8000240 <memchr>
 800b4aa:	9a04      	ldr	r2, [sp, #16]
 800b4ac:	b9d8      	cbnz	r0, 800b4e6 <_svfiprintf_r+0xea>
 800b4ae:	06d0      	lsls	r0, r2, #27
 800b4b0:	bf44      	itt	mi
 800b4b2:	2320      	movmi	r3, #32
 800b4b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4b8:	0711      	lsls	r1, r2, #28
 800b4ba:	bf44      	itt	mi
 800b4bc:	232b      	movmi	r3, #43	@ 0x2b
 800b4be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4c2:	f89a 3000 	ldrb.w	r3, [sl]
 800b4c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4c8:	d015      	beq.n	800b4f6 <_svfiprintf_r+0xfa>
 800b4ca:	9a07      	ldr	r2, [sp, #28]
 800b4cc:	4654      	mov	r4, sl
 800b4ce:	2000      	movs	r0, #0
 800b4d0:	f04f 0c0a 	mov.w	ip, #10
 800b4d4:	4621      	mov	r1, r4
 800b4d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4da:	3b30      	subs	r3, #48	@ 0x30
 800b4dc:	2b09      	cmp	r3, #9
 800b4de:	d94b      	bls.n	800b578 <_svfiprintf_r+0x17c>
 800b4e0:	b1b0      	cbz	r0, 800b510 <_svfiprintf_r+0x114>
 800b4e2:	9207      	str	r2, [sp, #28]
 800b4e4:	e014      	b.n	800b510 <_svfiprintf_r+0x114>
 800b4e6:	eba0 0308 	sub.w	r3, r0, r8
 800b4ea:	fa09 f303 	lsl.w	r3, r9, r3
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	9304      	str	r3, [sp, #16]
 800b4f2:	46a2      	mov	sl, r4
 800b4f4:	e7d2      	b.n	800b49c <_svfiprintf_r+0xa0>
 800b4f6:	9b03      	ldr	r3, [sp, #12]
 800b4f8:	1d19      	adds	r1, r3, #4
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	9103      	str	r1, [sp, #12]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	bfbb      	ittet	lt
 800b502:	425b      	neglt	r3, r3
 800b504:	f042 0202 	orrlt.w	r2, r2, #2
 800b508:	9307      	strge	r3, [sp, #28]
 800b50a:	9307      	strlt	r3, [sp, #28]
 800b50c:	bfb8      	it	lt
 800b50e:	9204      	strlt	r2, [sp, #16]
 800b510:	7823      	ldrb	r3, [r4, #0]
 800b512:	2b2e      	cmp	r3, #46	@ 0x2e
 800b514:	d10a      	bne.n	800b52c <_svfiprintf_r+0x130>
 800b516:	7863      	ldrb	r3, [r4, #1]
 800b518:	2b2a      	cmp	r3, #42	@ 0x2a
 800b51a:	d132      	bne.n	800b582 <_svfiprintf_r+0x186>
 800b51c:	9b03      	ldr	r3, [sp, #12]
 800b51e:	1d1a      	adds	r2, r3, #4
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	9203      	str	r2, [sp, #12]
 800b524:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b528:	3402      	adds	r4, #2
 800b52a:	9305      	str	r3, [sp, #20]
 800b52c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b5f0 <_svfiprintf_r+0x1f4>
 800b530:	7821      	ldrb	r1, [r4, #0]
 800b532:	2203      	movs	r2, #3
 800b534:	4650      	mov	r0, sl
 800b536:	f7f4 fe83 	bl	8000240 <memchr>
 800b53a:	b138      	cbz	r0, 800b54c <_svfiprintf_r+0x150>
 800b53c:	9b04      	ldr	r3, [sp, #16]
 800b53e:	eba0 000a 	sub.w	r0, r0, sl
 800b542:	2240      	movs	r2, #64	@ 0x40
 800b544:	4082      	lsls	r2, r0
 800b546:	4313      	orrs	r3, r2
 800b548:	3401      	adds	r4, #1
 800b54a:	9304      	str	r3, [sp, #16]
 800b54c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b550:	4824      	ldr	r0, [pc, #144]	@ (800b5e4 <_svfiprintf_r+0x1e8>)
 800b552:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b556:	2206      	movs	r2, #6
 800b558:	f7f4 fe72 	bl	8000240 <memchr>
 800b55c:	2800      	cmp	r0, #0
 800b55e:	d036      	beq.n	800b5ce <_svfiprintf_r+0x1d2>
 800b560:	4b21      	ldr	r3, [pc, #132]	@ (800b5e8 <_svfiprintf_r+0x1ec>)
 800b562:	bb1b      	cbnz	r3, 800b5ac <_svfiprintf_r+0x1b0>
 800b564:	9b03      	ldr	r3, [sp, #12]
 800b566:	3307      	adds	r3, #7
 800b568:	f023 0307 	bic.w	r3, r3, #7
 800b56c:	3308      	adds	r3, #8
 800b56e:	9303      	str	r3, [sp, #12]
 800b570:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b572:	4433      	add	r3, r6
 800b574:	9309      	str	r3, [sp, #36]	@ 0x24
 800b576:	e76a      	b.n	800b44e <_svfiprintf_r+0x52>
 800b578:	fb0c 3202 	mla	r2, ip, r2, r3
 800b57c:	460c      	mov	r4, r1
 800b57e:	2001      	movs	r0, #1
 800b580:	e7a8      	b.n	800b4d4 <_svfiprintf_r+0xd8>
 800b582:	2300      	movs	r3, #0
 800b584:	3401      	adds	r4, #1
 800b586:	9305      	str	r3, [sp, #20]
 800b588:	4619      	mov	r1, r3
 800b58a:	f04f 0c0a 	mov.w	ip, #10
 800b58e:	4620      	mov	r0, r4
 800b590:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b594:	3a30      	subs	r2, #48	@ 0x30
 800b596:	2a09      	cmp	r2, #9
 800b598:	d903      	bls.n	800b5a2 <_svfiprintf_r+0x1a6>
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d0c6      	beq.n	800b52c <_svfiprintf_r+0x130>
 800b59e:	9105      	str	r1, [sp, #20]
 800b5a0:	e7c4      	b.n	800b52c <_svfiprintf_r+0x130>
 800b5a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5a6:	4604      	mov	r4, r0
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	e7f0      	b.n	800b58e <_svfiprintf_r+0x192>
 800b5ac:	ab03      	add	r3, sp, #12
 800b5ae:	9300      	str	r3, [sp, #0]
 800b5b0:	462a      	mov	r2, r5
 800b5b2:	4b0e      	ldr	r3, [pc, #56]	@ (800b5ec <_svfiprintf_r+0x1f0>)
 800b5b4:	a904      	add	r1, sp, #16
 800b5b6:	4638      	mov	r0, r7
 800b5b8:	f7fd f80a 	bl	80085d0 <_printf_float>
 800b5bc:	1c42      	adds	r2, r0, #1
 800b5be:	4606      	mov	r6, r0
 800b5c0:	d1d6      	bne.n	800b570 <_svfiprintf_r+0x174>
 800b5c2:	89ab      	ldrh	r3, [r5, #12]
 800b5c4:	065b      	lsls	r3, r3, #25
 800b5c6:	f53f af2d 	bmi.w	800b424 <_svfiprintf_r+0x28>
 800b5ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5cc:	e72c      	b.n	800b428 <_svfiprintf_r+0x2c>
 800b5ce:	ab03      	add	r3, sp, #12
 800b5d0:	9300      	str	r3, [sp, #0]
 800b5d2:	462a      	mov	r2, r5
 800b5d4:	4b05      	ldr	r3, [pc, #20]	@ (800b5ec <_svfiprintf_r+0x1f0>)
 800b5d6:	a904      	add	r1, sp, #16
 800b5d8:	4638      	mov	r0, r7
 800b5da:	f7fd fa81 	bl	8008ae0 <_printf_i>
 800b5de:	e7ed      	b.n	800b5bc <_svfiprintf_r+0x1c0>
 800b5e0:	0800c238 	.word	0x0800c238
 800b5e4:	0800c242 	.word	0x0800c242
 800b5e8:	080085d1 	.word	0x080085d1
 800b5ec:	0800b345 	.word	0x0800b345
 800b5f0:	0800c23e 	.word	0x0800c23e

0800b5f4 <__sflush_r>:
 800b5f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5fc:	0716      	lsls	r6, r2, #28
 800b5fe:	4605      	mov	r5, r0
 800b600:	460c      	mov	r4, r1
 800b602:	d454      	bmi.n	800b6ae <__sflush_r+0xba>
 800b604:	684b      	ldr	r3, [r1, #4]
 800b606:	2b00      	cmp	r3, #0
 800b608:	dc02      	bgt.n	800b610 <__sflush_r+0x1c>
 800b60a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	dd48      	ble.n	800b6a2 <__sflush_r+0xae>
 800b610:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b612:	2e00      	cmp	r6, #0
 800b614:	d045      	beq.n	800b6a2 <__sflush_r+0xae>
 800b616:	2300      	movs	r3, #0
 800b618:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b61c:	682f      	ldr	r7, [r5, #0]
 800b61e:	6a21      	ldr	r1, [r4, #32]
 800b620:	602b      	str	r3, [r5, #0]
 800b622:	d030      	beq.n	800b686 <__sflush_r+0x92>
 800b624:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b626:	89a3      	ldrh	r3, [r4, #12]
 800b628:	0759      	lsls	r1, r3, #29
 800b62a:	d505      	bpl.n	800b638 <__sflush_r+0x44>
 800b62c:	6863      	ldr	r3, [r4, #4]
 800b62e:	1ad2      	subs	r2, r2, r3
 800b630:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b632:	b10b      	cbz	r3, 800b638 <__sflush_r+0x44>
 800b634:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b636:	1ad2      	subs	r2, r2, r3
 800b638:	2300      	movs	r3, #0
 800b63a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b63c:	6a21      	ldr	r1, [r4, #32]
 800b63e:	4628      	mov	r0, r5
 800b640:	47b0      	blx	r6
 800b642:	1c43      	adds	r3, r0, #1
 800b644:	89a3      	ldrh	r3, [r4, #12]
 800b646:	d106      	bne.n	800b656 <__sflush_r+0x62>
 800b648:	6829      	ldr	r1, [r5, #0]
 800b64a:	291d      	cmp	r1, #29
 800b64c:	d82b      	bhi.n	800b6a6 <__sflush_r+0xb2>
 800b64e:	4a2a      	ldr	r2, [pc, #168]	@ (800b6f8 <__sflush_r+0x104>)
 800b650:	410a      	asrs	r2, r1
 800b652:	07d6      	lsls	r6, r2, #31
 800b654:	d427      	bmi.n	800b6a6 <__sflush_r+0xb2>
 800b656:	2200      	movs	r2, #0
 800b658:	6062      	str	r2, [r4, #4]
 800b65a:	04d9      	lsls	r1, r3, #19
 800b65c:	6922      	ldr	r2, [r4, #16]
 800b65e:	6022      	str	r2, [r4, #0]
 800b660:	d504      	bpl.n	800b66c <__sflush_r+0x78>
 800b662:	1c42      	adds	r2, r0, #1
 800b664:	d101      	bne.n	800b66a <__sflush_r+0x76>
 800b666:	682b      	ldr	r3, [r5, #0]
 800b668:	b903      	cbnz	r3, 800b66c <__sflush_r+0x78>
 800b66a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b66c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b66e:	602f      	str	r7, [r5, #0]
 800b670:	b1b9      	cbz	r1, 800b6a2 <__sflush_r+0xae>
 800b672:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b676:	4299      	cmp	r1, r3
 800b678:	d002      	beq.n	800b680 <__sflush_r+0x8c>
 800b67a:	4628      	mov	r0, r5
 800b67c:	f7fe fd5a 	bl	800a134 <_free_r>
 800b680:	2300      	movs	r3, #0
 800b682:	6363      	str	r3, [r4, #52]	@ 0x34
 800b684:	e00d      	b.n	800b6a2 <__sflush_r+0xae>
 800b686:	2301      	movs	r3, #1
 800b688:	4628      	mov	r0, r5
 800b68a:	47b0      	blx	r6
 800b68c:	4602      	mov	r2, r0
 800b68e:	1c50      	adds	r0, r2, #1
 800b690:	d1c9      	bne.n	800b626 <__sflush_r+0x32>
 800b692:	682b      	ldr	r3, [r5, #0]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d0c6      	beq.n	800b626 <__sflush_r+0x32>
 800b698:	2b1d      	cmp	r3, #29
 800b69a:	d001      	beq.n	800b6a0 <__sflush_r+0xac>
 800b69c:	2b16      	cmp	r3, #22
 800b69e:	d11e      	bne.n	800b6de <__sflush_r+0xea>
 800b6a0:	602f      	str	r7, [r5, #0]
 800b6a2:	2000      	movs	r0, #0
 800b6a4:	e022      	b.n	800b6ec <__sflush_r+0xf8>
 800b6a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6aa:	b21b      	sxth	r3, r3
 800b6ac:	e01b      	b.n	800b6e6 <__sflush_r+0xf2>
 800b6ae:	690f      	ldr	r7, [r1, #16]
 800b6b0:	2f00      	cmp	r7, #0
 800b6b2:	d0f6      	beq.n	800b6a2 <__sflush_r+0xae>
 800b6b4:	0793      	lsls	r3, r2, #30
 800b6b6:	680e      	ldr	r6, [r1, #0]
 800b6b8:	bf08      	it	eq
 800b6ba:	694b      	ldreq	r3, [r1, #20]
 800b6bc:	600f      	str	r7, [r1, #0]
 800b6be:	bf18      	it	ne
 800b6c0:	2300      	movne	r3, #0
 800b6c2:	eba6 0807 	sub.w	r8, r6, r7
 800b6c6:	608b      	str	r3, [r1, #8]
 800b6c8:	f1b8 0f00 	cmp.w	r8, #0
 800b6cc:	dde9      	ble.n	800b6a2 <__sflush_r+0xae>
 800b6ce:	6a21      	ldr	r1, [r4, #32]
 800b6d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b6d2:	4643      	mov	r3, r8
 800b6d4:	463a      	mov	r2, r7
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	47b0      	blx	r6
 800b6da:	2800      	cmp	r0, #0
 800b6dc:	dc08      	bgt.n	800b6f0 <__sflush_r+0xfc>
 800b6de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6e6:	81a3      	strh	r3, [r4, #12]
 800b6e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6f0:	4407      	add	r7, r0
 800b6f2:	eba8 0800 	sub.w	r8, r8, r0
 800b6f6:	e7e7      	b.n	800b6c8 <__sflush_r+0xd4>
 800b6f8:	dfbffffe 	.word	0xdfbffffe

0800b6fc <_fflush_r>:
 800b6fc:	b538      	push	{r3, r4, r5, lr}
 800b6fe:	690b      	ldr	r3, [r1, #16]
 800b700:	4605      	mov	r5, r0
 800b702:	460c      	mov	r4, r1
 800b704:	b913      	cbnz	r3, 800b70c <_fflush_r+0x10>
 800b706:	2500      	movs	r5, #0
 800b708:	4628      	mov	r0, r5
 800b70a:	bd38      	pop	{r3, r4, r5, pc}
 800b70c:	b118      	cbz	r0, 800b716 <_fflush_r+0x1a>
 800b70e:	6a03      	ldr	r3, [r0, #32]
 800b710:	b90b      	cbnz	r3, 800b716 <_fflush_r+0x1a>
 800b712:	f7fd fd9d 	bl	8009250 <__sinit>
 800b716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d0f3      	beq.n	800b706 <_fflush_r+0xa>
 800b71e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b720:	07d0      	lsls	r0, r2, #31
 800b722:	d404      	bmi.n	800b72e <_fflush_r+0x32>
 800b724:	0599      	lsls	r1, r3, #22
 800b726:	d402      	bmi.n	800b72e <_fflush_r+0x32>
 800b728:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b72a:	f7fd ff04 	bl	8009536 <__retarget_lock_acquire_recursive>
 800b72e:	4628      	mov	r0, r5
 800b730:	4621      	mov	r1, r4
 800b732:	f7ff ff5f 	bl	800b5f4 <__sflush_r>
 800b736:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b738:	07da      	lsls	r2, r3, #31
 800b73a:	4605      	mov	r5, r0
 800b73c:	d4e4      	bmi.n	800b708 <_fflush_r+0xc>
 800b73e:	89a3      	ldrh	r3, [r4, #12]
 800b740:	059b      	lsls	r3, r3, #22
 800b742:	d4e1      	bmi.n	800b708 <_fflush_r+0xc>
 800b744:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b746:	f7fd fef7 	bl	8009538 <__retarget_lock_release_recursive>
 800b74a:	e7dd      	b.n	800b708 <_fflush_r+0xc>

0800b74c <memmove>:
 800b74c:	4288      	cmp	r0, r1
 800b74e:	b510      	push	{r4, lr}
 800b750:	eb01 0402 	add.w	r4, r1, r2
 800b754:	d902      	bls.n	800b75c <memmove+0x10>
 800b756:	4284      	cmp	r4, r0
 800b758:	4623      	mov	r3, r4
 800b75a:	d807      	bhi.n	800b76c <memmove+0x20>
 800b75c:	1e43      	subs	r3, r0, #1
 800b75e:	42a1      	cmp	r1, r4
 800b760:	d008      	beq.n	800b774 <memmove+0x28>
 800b762:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b766:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b76a:	e7f8      	b.n	800b75e <memmove+0x12>
 800b76c:	4402      	add	r2, r0
 800b76e:	4601      	mov	r1, r0
 800b770:	428a      	cmp	r2, r1
 800b772:	d100      	bne.n	800b776 <memmove+0x2a>
 800b774:	bd10      	pop	{r4, pc}
 800b776:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b77a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b77e:	e7f7      	b.n	800b770 <memmove+0x24>

0800b780 <strchr>:
 800b780:	b2c9      	uxtb	r1, r1
 800b782:	4603      	mov	r3, r0
 800b784:	4618      	mov	r0, r3
 800b786:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b78a:	b112      	cbz	r2, 800b792 <strchr+0x12>
 800b78c:	428a      	cmp	r2, r1
 800b78e:	d1f9      	bne.n	800b784 <strchr+0x4>
 800b790:	4770      	bx	lr
 800b792:	2900      	cmp	r1, #0
 800b794:	bf18      	it	ne
 800b796:	2000      	movne	r0, #0
 800b798:	4770      	bx	lr
	...

0800b79c <_sbrk_r>:
 800b79c:	b538      	push	{r3, r4, r5, lr}
 800b79e:	4d06      	ldr	r5, [pc, #24]	@ (800b7b8 <_sbrk_r+0x1c>)
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	4604      	mov	r4, r0
 800b7a4:	4608      	mov	r0, r1
 800b7a6:	602b      	str	r3, [r5, #0]
 800b7a8:	f7f6 fabe 	bl	8001d28 <_sbrk>
 800b7ac:	1c43      	adds	r3, r0, #1
 800b7ae:	d102      	bne.n	800b7b6 <_sbrk_r+0x1a>
 800b7b0:	682b      	ldr	r3, [r5, #0]
 800b7b2:	b103      	cbz	r3, 800b7b6 <_sbrk_r+0x1a>
 800b7b4:	6023      	str	r3, [r4, #0]
 800b7b6:	bd38      	pop	{r3, r4, r5, pc}
 800b7b8:	20000c40 	.word	0x20000c40

0800b7bc <__assert_func>:
 800b7bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b7be:	4614      	mov	r4, r2
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	4b09      	ldr	r3, [pc, #36]	@ (800b7e8 <__assert_func+0x2c>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	4605      	mov	r5, r0
 800b7c8:	68d8      	ldr	r0, [r3, #12]
 800b7ca:	b954      	cbnz	r4, 800b7e2 <__assert_func+0x26>
 800b7cc:	4b07      	ldr	r3, [pc, #28]	@ (800b7ec <__assert_func+0x30>)
 800b7ce:	461c      	mov	r4, r3
 800b7d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b7d4:	9100      	str	r1, [sp, #0]
 800b7d6:	462b      	mov	r3, r5
 800b7d8:	4905      	ldr	r1, [pc, #20]	@ (800b7f0 <__assert_func+0x34>)
 800b7da:	f000 f84f 	bl	800b87c <fiprintf>
 800b7de:	f000 f85f 	bl	800b8a0 <abort>
 800b7e2:	4b04      	ldr	r3, [pc, #16]	@ (800b7f4 <__assert_func+0x38>)
 800b7e4:	e7f4      	b.n	800b7d0 <__assert_func+0x14>
 800b7e6:	bf00      	nop
 800b7e8:	2000018c 	.word	0x2000018c
 800b7ec:	0800c284 	.word	0x0800c284
 800b7f0:	0800c256 	.word	0x0800c256
 800b7f4:	0800c249 	.word	0x0800c249

0800b7f8 <_calloc_r>:
 800b7f8:	b570      	push	{r4, r5, r6, lr}
 800b7fa:	fba1 5402 	umull	r5, r4, r1, r2
 800b7fe:	b93c      	cbnz	r4, 800b810 <_calloc_r+0x18>
 800b800:	4629      	mov	r1, r5
 800b802:	f7ff f845 	bl	800a890 <_malloc_r>
 800b806:	4606      	mov	r6, r0
 800b808:	b928      	cbnz	r0, 800b816 <_calloc_r+0x1e>
 800b80a:	2600      	movs	r6, #0
 800b80c:	4630      	mov	r0, r6
 800b80e:	bd70      	pop	{r4, r5, r6, pc}
 800b810:	220c      	movs	r2, #12
 800b812:	6002      	str	r2, [r0, #0]
 800b814:	e7f9      	b.n	800b80a <_calloc_r+0x12>
 800b816:	462a      	mov	r2, r5
 800b818:	4621      	mov	r1, r4
 800b81a:	f7fd fde6 	bl	80093ea <memset>
 800b81e:	e7f5      	b.n	800b80c <_calloc_r+0x14>

0800b820 <_realloc_r>:
 800b820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b824:	4680      	mov	r8, r0
 800b826:	4615      	mov	r5, r2
 800b828:	460c      	mov	r4, r1
 800b82a:	b921      	cbnz	r1, 800b836 <_realloc_r+0x16>
 800b82c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b830:	4611      	mov	r1, r2
 800b832:	f7ff b82d 	b.w	800a890 <_malloc_r>
 800b836:	b92a      	cbnz	r2, 800b844 <_realloc_r+0x24>
 800b838:	f7fe fc7c 	bl	800a134 <_free_r>
 800b83c:	2400      	movs	r4, #0
 800b83e:	4620      	mov	r0, r4
 800b840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b844:	f000 f833 	bl	800b8ae <_malloc_usable_size_r>
 800b848:	4285      	cmp	r5, r0
 800b84a:	4606      	mov	r6, r0
 800b84c:	d802      	bhi.n	800b854 <_realloc_r+0x34>
 800b84e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b852:	d8f4      	bhi.n	800b83e <_realloc_r+0x1e>
 800b854:	4629      	mov	r1, r5
 800b856:	4640      	mov	r0, r8
 800b858:	f7ff f81a 	bl	800a890 <_malloc_r>
 800b85c:	4607      	mov	r7, r0
 800b85e:	2800      	cmp	r0, #0
 800b860:	d0ec      	beq.n	800b83c <_realloc_r+0x1c>
 800b862:	42b5      	cmp	r5, r6
 800b864:	462a      	mov	r2, r5
 800b866:	4621      	mov	r1, r4
 800b868:	bf28      	it	cs
 800b86a:	4632      	movcs	r2, r6
 800b86c:	f7fd fe65 	bl	800953a <memcpy>
 800b870:	4621      	mov	r1, r4
 800b872:	4640      	mov	r0, r8
 800b874:	f7fe fc5e 	bl	800a134 <_free_r>
 800b878:	463c      	mov	r4, r7
 800b87a:	e7e0      	b.n	800b83e <_realloc_r+0x1e>

0800b87c <fiprintf>:
 800b87c:	b40e      	push	{r1, r2, r3}
 800b87e:	b503      	push	{r0, r1, lr}
 800b880:	4601      	mov	r1, r0
 800b882:	ab03      	add	r3, sp, #12
 800b884:	4805      	ldr	r0, [pc, #20]	@ (800b89c <fiprintf+0x20>)
 800b886:	f853 2b04 	ldr.w	r2, [r3], #4
 800b88a:	6800      	ldr	r0, [r0, #0]
 800b88c:	9301      	str	r3, [sp, #4]
 800b88e:	f000 f83f 	bl	800b910 <_vfiprintf_r>
 800b892:	b002      	add	sp, #8
 800b894:	f85d eb04 	ldr.w	lr, [sp], #4
 800b898:	b003      	add	sp, #12
 800b89a:	4770      	bx	lr
 800b89c:	2000018c 	.word	0x2000018c

0800b8a0 <abort>:
 800b8a0:	b508      	push	{r3, lr}
 800b8a2:	2006      	movs	r0, #6
 800b8a4:	f000 fa08 	bl	800bcb8 <raise>
 800b8a8:	2001      	movs	r0, #1
 800b8aa:	f7f6 f9c5 	bl	8001c38 <_exit>

0800b8ae <_malloc_usable_size_r>:
 800b8ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8b2:	1f18      	subs	r0, r3, #4
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	bfbc      	itt	lt
 800b8b8:	580b      	ldrlt	r3, [r1, r0]
 800b8ba:	18c0      	addlt	r0, r0, r3
 800b8bc:	4770      	bx	lr

0800b8be <__sfputc_r>:
 800b8be:	6893      	ldr	r3, [r2, #8]
 800b8c0:	3b01      	subs	r3, #1
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	b410      	push	{r4}
 800b8c6:	6093      	str	r3, [r2, #8]
 800b8c8:	da08      	bge.n	800b8dc <__sfputc_r+0x1e>
 800b8ca:	6994      	ldr	r4, [r2, #24]
 800b8cc:	42a3      	cmp	r3, r4
 800b8ce:	db01      	blt.n	800b8d4 <__sfputc_r+0x16>
 800b8d0:	290a      	cmp	r1, #10
 800b8d2:	d103      	bne.n	800b8dc <__sfputc_r+0x1e>
 800b8d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8d8:	f000 b932 	b.w	800bb40 <__swbuf_r>
 800b8dc:	6813      	ldr	r3, [r2, #0]
 800b8de:	1c58      	adds	r0, r3, #1
 800b8e0:	6010      	str	r0, [r2, #0]
 800b8e2:	7019      	strb	r1, [r3, #0]
 800b8e4:	4608      	mov	r0, r1
 800b8e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8ea:	4770      	bx	lr

0800b8ec <__sfputs_r>:
 800b8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ee:	4606      	mov	r6, r0
 800b8f0:	460f      	mov	r7, r1
 800b8f2:	4614      	mov	r4, r2
 800b8f4:	18d5      	adds	r5, r2, r3
 800b8f6:	42ac      	cmp	r4, r5
 800b8f8:	d101      	bne.n	800b8fe <__sfputs_r+0x12>
 800b8fa:	2000      	movs	r0, #0
 800b8fc:	e007      	b.n	800b90e <__sfputs_r+0x22>
 800b8fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b902:	463a      	mov	r2, r7
 800b904:	4630      	mov	r0, r6
 800b906:	f7ff ffda 	bl	800b8be <__sfputc_r>
 800b90a:	1c43      	adds	r3, r0, #1
 800b90c:	d1f3      	bne.n	800b8f6 <__sfputs_r+0xa>
 800b90e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b910 <_vfiprintf_r>:
 800b910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b914:	460d      	mov	r5, r1
 800b916:	b09d      	sub	sp, #116	@ 0x74
 800b918:	4614      	mov	r4, r2
 800b91a:	4698      	mov	r8, r3
 800b91c:	4606      	mov	r6, r0
 800b91e:	b118      	cbz	r0, 800b928 <_vfiprintf_r+0x18>
 800b920:	6a03      	ldr	r3, [r0, #32]
 800b922:	b90b      	cbnz	r3, 800b928 <_vfiprintf_r+0x18>
 800b924:	f7fd fc94 	bl	8009250 <__sinit>
 800b928:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b92a:	07d9      	lsls	r1, r3, #31
 800b92c:	d405      	bmi.n	800b93a <_vfiprintf_r+0x2a>
 800b92e:	89ab      	ldrh	r3, [r5, #12]
 800b930:	059a      	lsls	r2, r3, #22
 800b932:	d402      	bmi.n	800b93a <_vfiprintf_r+0x2a>
 800b934:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b936:	f7fd fdfe 	bl	8009536 <__retarget_lock_acquire_recursive>
 800b93a:	89ab      	ldrh	r3, [r5, #12]
 800b93c:	071b      	lsls	r3, r3, #28
 800b93e:	d501      	bpl.n	800b944 <_vfiprintf_r+0x34>
 800b940:	692b      	ldr	r3, [r5, #16]
 800b942:	b99b      	cbnz	r3, 800b96c <_vfiprintf_r+0x5c>
 800b944:	4629      	mov	r1, r5
 800b946:	4630      	mov	r0, r6
 800b948:	f000 f938 	bl	800bbbc <__swsetup_r>
 800b94c:	b170      	cbz	r0, 800b96c <_vfiprintf_r+0x5c>
 800b94e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b950:	07dc      	lsls	r4, r3, #31
 800b952:	d504      	bpl.n	800b95e <_vfiprintf_r+0x4e>
 800b954:	f04f 30ff 	mov.w	r0, #4294967295
 800b958:	b01d      	add	sp, #116	@ 0x74
 800b95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b95e:	89ab      	ldrh	r3, [r5, #12]
 800b960:	0598      	lsls	r0, r3, #22
 800b962:	d4f7      	bmi.n	800b954 <_vfiprintf_r+0x44>
 800b964:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b966:	f7fd fde7 	bl	8009538 <__retarget_lock_release_recursive>
 800b96a:	e7f3      	b.n	800b954 <_vfiprintf_r+0x44>
 800b96c:	2300      	movs	r3, #0
 800b96e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b970:	2320      	movs	r3, #32
 800b972:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b976:	f8cd 800c 	str.w	r8, [sp, #12]
 800b97a:	2330      	movs	r3, #48	@ 0x30
 800b97c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bb2c <_vfiprintf_r+0x21c>
 800b980:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b984:	f04f 0901 	mov.w	r9, #1
 800b988:	4623      	mov	r3, r4
 800b98a:	469a      	mov	sl, r3
 800b98c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b990:	b10a      	cbz	r2, 800b996 <_vfiprintf_r+0x86>
 800b992:	2a25      	cmp	r2, #37	@ 0x25
 800b994:	d1f9      	bne.n	800b98a <_vfiprintf_r+0x7a>
 800b996:	ebba 0b04 	subs.w	fp, sl, r4
 800b99a:	d00b      	beq.n	800b9b4 <_vfiprintf_r+0xa4>
 800b99c:	465b      	mov	r3, fp
 800b99e:	4622      	mov	r2, r4
 800b9a0:	4629      	mov	r1, r5
 800b9a2:	4630      	mov	r0, r6
 800b9a4:	f7ff ffa2 	bl	800b8ec <__sfputs_r>
 800b9a8:	3001      	adds	r0, #1
 800b9aa:	f000 80a7 	beq.w	800bafc <_vfiprintf_r+0x1ec>
 800b9ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9b0:	445a      	add	r2, fp
 800b9b2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b9b4:	f89a 3000 	ldrb.w	r3, [sl]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	f000 809f 	beq.w	800bafc <_vfiprintf_r+0x1ec>
 800b9be:	2300      	movs	r3, #0
 800b9c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b9c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9c8:	f10a 0a01 	add.w	sl, sl, #1
 800b9cc:	9304      	str	r3, [sp, #16]
 800b9ce:	9307      	str	r3, [sp, #28]
 800b9d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b9d4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b9d6:	4654      	mov	r4, sl
 800b9d8:	2205      	movs	r2, #5
 800b9da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9de:	4853      	ldr	r0, [pc, #332]	@ (800bb2c <_vfiprintf_r+0x21c>)
 800b9e0:	f7f4 fc2e 	bl	8000240 <memchr>
 800b9e4:	9a04      	ldr	r2, [sp, #16]
 800b9e6:	b9d8      	cbnz	r0, 800ba20 <_vfiprintf_r+0x110>
 800b9e8:	06d1      	lsls	r1, r2, #27
 800b9ea:	bf44      	itt	mi
 800b9ec:	2320      	movmi	r3, #32
 800b9ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9f2:	0713      	lsls	r3, r2, #28
 800b9f4:	bf44      	itt	mi
 800b9f6:	232b      	movmi	r3, #43	@ 0x2b
 800b9f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9fc:	f89a 3000 	ldrb.w	r3, [sl]
 800ba00:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba02:	d015      	beq.n	800ba30 <_vfiprintf_r+0x120>
 800ba04:	9a07      	ldr	r2, [sp, #28]
 800ba06:	4654      	mov	r4, sl
 800ba08:	2000      	movs	r0, #0
 800ba0a:	f04f 0c0a 	mov.w	ip, #10
 800ba0e:	4621      	mov	r1, r4
 800ba10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba14:	3b30      	subs	r3, #48	@ 0x30
 800ba16:	2b09      	cmp	r3, #9
 800ba18:	d94b      	bls.n	800bab2 <_vfiprintf_r+0x1a2>
 800ba1a:	b1b0      	cbz	r0, 800ba4a <_vfiprintf_r+0x13a>
 800ba1c:	9207      	str	r2, [sp, #28]
 800ba1e:	e014      	b.n	800ba4a <_vfiprintf_r+0x13a>
 800ba20:	eba0 0308 	sub.w	r3, r0, r8
 800ba24:	fa09 f303 	lsl.w	r3, r9, r3
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	9304      	str	r3, [sp, #16]
 800ba2c:	46a2      	mov	sl, r4
 800ba2e:	e7d2      	b.n	800b9d6 <_vfiprintf_r+0xc6>
 800ba30:	9b03      	ldr	r3, [sp, #12]
 800ba32:	1d19      	adds	r1, r3, #4
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	9103      	str	r1, [sp, #12]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	bfbb      	ittet	lt
 800ba3c:	425b      	neglt	r3, r3
 800ba3e:	f042 0202 	orrlt.w	r2, r2, #2
 800ba42:	9307      	strge	r3, [sp, #28]
 800ba44:	9307      	strlt	r3, [sp, #28]
 800ba46:	bfb8      	it	lt
 800ba48:	9204      	strlt	r2, [sp, #16]
 800ba4a:	7823      	ldrb	r3, [r4, #0]
 800ba4c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba4e:	d10a      	bne.n	800ba66 <_vfiprintf_r+0x156>
 800ba50:	7863      	ldrb	r3, [r4, #1]
 800ba52:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba54:	d132      	bne.n	800babc <_vfiprintf_r+0x1ac>
 800ba56:	9b03      	ldr	r3, [sp, #12]
 800ba58:	1d1a      	adds	r2, r3, #4
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	9203      	str	r2, [sp, #12]
 800ba5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba62:	3402      	adds	r4, #2
 800ba64:	9305      	str	r3, [sp, #20]
 800ba66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bb3c <_vfiprintf_r+0x22c>
 800ba6a:	7821      	ldrb	r1, [r4, #0]
 800ba6c:	2203      	movs	r2, #3
 800ba6e:	4650      	mov	r0, sl
 800ba70:	f7f4 fbe6 	bl	8000240 <memchr>
 800ba74:	b138      	cbz	r0, 800ba86 <_vfiprintf_r+0x176>
 800ba76:	9b04      	ldr	r3, [sp, #16]
 800ba78:	eba0 000a 	sub.w	r0, r0, sl
 800ba7c:	2240      	movs	r2, #64	@ 0x40
 800ba7e:	4082      	lsls	r2, r0
 800ba80:	4313      	orrs	r3, r2
 800ba82:	3401      	adds	r4, #1
 800ba84:	9304      	str	r3, [sp, #16]
 800ba86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba8a:	4829      	ldr	r0, [pc, #164]	@ (800bb30 <_vfiprintf_r+0x220>)
 800ba8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba90:	2206      	movs	r2, #6
 800ba92:	f7f4 fbd5 	bl	8000240 <memchr>
 800ba96:	2800      	cmp	r0, #0
 800ba98:	d03f      	beq.n	800bb1a <_vfiprintf_r+0x20a>
 800ba9a:	4b26      	ldr	r3, [pc, #152]	@ (800bb34 <_vfiprintf_r+0x224>)
 800ba9c:	bb1b      	cbnz	r3, 800bae6 <_vfiprintf_r+0x1d6>
 800ba9e:	9b03      	ldr	r3, [sp, #12]
 800baa0:	3307      	adds	r3, #7
 800baa2:	f023 0307 	bic.w	r3, r3, #7
 800baa6:	3308      	adds	r3, #8
 800baa8:	9303      	str	r3, [sp, #12]
 800baaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baac:	443b      	add	r3, r7
 800baae:	9309      	str	r3, [sp, #36]	@ 0x24
 800bab0:	e76a      	b.n	800b988 <_vfiprintf_r+0x78>
 800bab2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bab6:	460c      	mov	r4, r1
 800bab8:	2001      	movs	r0, #1
 800baba:	e7a8      	b.n	800ba0e <_vfiprintf_r+0xfe>
 800babc:	2300      	movs	r3, #0
 800babe:	3401      	adds	r4, #1
 800bac0:	9305      	str	r3, [sp, #20]
 800bac2:	4619      	mov	r1, r3
 800bac4:	f04f 0c0a 	mov.w	ip, #10
 800bac8:	4620      	mov	r0, r4
 800baca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bace:	3a30      	subs	r2, #48	@ 0x30
 800bad0:	2a09      	cmp	r2, #9
 800bad2:	d903      	bls.n	800badc <_vfiprintf_r+0x1cc>
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d0c6      	beq.n	800ba66 <_vfiprintf_r+0x156>
 800bad8:	9105      	str	r1, [sp, #20]
 800bada:	e7c4      	b.n	800ba66 <_vfiprintf_r+0x156>
 800badc:	fb0c 2101 	mla	r1, ip, r1, r2
 800bae0:	4604      	mov	r4, r0
 800bae2:	2301      	movs	r3, #1
 800bae4:	e7f0      	b.n	800bac8 <_vfiprintf_r+0x1b8>
 800bae6:	ab03      	add	r3, sp, #12
 800bae8:	9300      	str	r3, [sp, #0]
 800baea:	462a      	mov	r2, r5
 800baec:	4b12      	ldr	r3, [pc, #72]	@ (800bb38 <_vfiprintf_r+0x228>)
 800baee:	a904      	add	r1, sp, #16
 800baf0:	4630      	mov	r0, r6
 800baf2:	f7fc fd6d 	bl	80085d0 <_printf_float>
 800baf6:	4607      	mov	r7, r0
 800baf8:	1c78      	adds	r0, r7, #1
 800bafa:	d1d6      	bne.n	800baaa <_vfiprintf_r+0x19a>
 800bafc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bafe:	07d9      	lsls	r1, r3, #31
 800bb00:	d405      	bmi.n	800bb0e <_vfiprintf_r+0x1fe>
 800bb02:	89ab      	ldrh	r3, [r5, #12]
 800bb04:	059a      	lsls	r2, r3, #22
 800bb06:	d402      	bmi.n	800bb0e <_vfiprintf_r+0x1fe>
 800bb08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb0a:	f7fd fd15 	bl	8009538 <__retarget_lock_release_recursive>
 800bb0e:	89ab      	ldrh	r3, [r5, #12]
 800bb10:	065b      	lsls	r3, r3, #25
 800bb12:	f53f af1f 	bmi.w	800b954 <_vfiprintf_r+0x44>
 800bb16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb18:	e71e      	b.n	800b958 <_vfiprintf_r+0x48>
 800bb1a:	ab03      	add	r3, sp, #12
 800bb1c:	9300      	str	r3, [sp, #0]
 800bb1e:	462a      	mov	r2, r5
 800bb20:	4b05      	ldr	r3, [pc, #20]	@ (800bb38 <_vfiprintf_r+0x228>)
 800bb22:	a904      	add	r1, sp, #16
 800bb24:	4630      	mov	r0, r6
 800bb26:	f7fc ffdb 	bl	8008ae0 <_printf_i>
 800bb2a:	e7e4      	b.n	800baf6 <_vfiprintf_r+0x1e6>
 800bb2c:	0800c238 	.word	0x0800c238
 800bb30:	0800c242 	.word	0x0800c242
 800bb34:	080085d1 	.word	0x080085d1
 800bb38:	0800b8ed 	.word	0x0800b8ed
 800bb3c:	0800c23e 	.word	0x0800c23e

0800bb40 <__swbuf_r>:
 800bb40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb42:	460e      	mov	r6, r1
 800bb44:	4614      	mov	r4, r2
 800bb46:	4605      	mov	r5, r0
 800bb48:	b118      	cbz	r0, 800bb52 <__swbuf_r+0x12>
 800bb4a:	6a03      	ldr	r3, [r0, #32]
 800bb4c:	b90b      	cbnz	r3, 800bb52 <__swbuf_r+0x12>
 800bb4e:	f7fd fb7f 	bl	8009250 <__sinit>
 800bb52:	69a3      	ldr	r3, [r4, #24]
 800bb54:	60a3      	str	r3, [r4, #8]
 800bb56:	89a3      	ldrh	r3, [r4, #12]
 800bb58:	071a      	lsls	r2, r3, #28
 800bb5a:	d501      	bpl.n	800bb60 <__swbuf_r+0x20>
 800bb5c:	6923      	ldr	r3, [r4, #16]
 800bb5e:	b943      	cbnz	r3, 800bb72 <__swbuf_r+0x32>
 800bb60:	4621      	mov	r1, r4
 800bb62:	4628      	mov	r0, r5
 800bb64:	f000 f82a 	bl	800bbbc <__swsetup_r>
 800bb68:	b118      	cbz	r0, 800bb72 <__swbuf_r+0x32>
 800bb6a:	f04f 37ff 	mov.w	r7, #4294967295
 800bb6e:	4638      	mov	r0, r7
 800bb70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb72:	6823      	ldr	r3, [r4, #0]
 800bb74:	6922      	ldr	r2, [r4, #16]
 800bb76:	1a98      	subs	r0, r3, r2
 800bb78:	6963      	ldr	r3, [r4, #20]
 800bb7a:	b2f6      	uxtb	r6, r6
 800bb7c:	4283      	cmp	r3, r0
 800bb7e:	4637      	mov	r7, r6
 800bb80:	dc05      	bgt.n	800bb8e <__swbuf_r+0x4e>
 800bb82:	4621      	mov	r1, r4
 800bb84:	4628      	mov	r0, r5
 800bb86:	f7ff fdb9 	bl	800b6fc <_fflush_r>
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	d1ed      	bne.n	800bb6a <__swbuf_r+0x2a>
 800bb8e:	68a3      	ldr	r3, [r4, #8]
 800bb90:	3b01      	subs	r3, #1
 800bb92:	60a3      	str	r3, [r4, #8]
 800bb94:	6823      	ldr	r3, [r4, #0]
 800bb96:	1c5a      	adds	r2, r3, #1
 800bb98:	6022      	str	r2, [r4, #0]
 800bb9a:	701e      	strb	r6, [r3, #0]
 800bb9c:	6962      	ldr	r2, [r4, #20]
 800bb9e:	1c43      	adds	r3, r0, #1
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d004      	beq.n	800bbae <__swbuf_r+0x6e>
 800bba4:	89a3      	ldrh	r3, [r4, #12]
 800bba6:	07db      	lsls	r3, r3, #31
 800bba8:	d5e1      	bpl.n	800bb6e <__swbuf_r+0x2e>
 800bbaa:	2e0a      	cmp	r6, #10
 800bbac:	d1df      	bne.n	800bb6e <__swbuf_r+0x2e>
 800bbae:	4621      	mov	r1, r4
 800bbb0:	4628      	mov	r0, r5
 800bbb2:	f7ff fda3 	bl	800b6fc <_fflush_r>
 800bbb6:	2800      	cmp	r0, #0
 800bbb8:	d0d9      	beq.n	800bb6e <__swbuf_r+0x2e>
 800bbba:	e7d6      	b.n	800bb6a <__swbuf_r+0x2a>

0800bbbc <__swsetup_r>:
 800bbbc:	b538      	push	{r3, r4, r5, lr}
 800bbbe:	4b29      	ldr	r3, [pc, #164]	@ (800bc64 <__swsetup_r+0xa8>)
 800bbc0:	4605      	mov	r5, r0
 800bbc2:	6818      	ldr	r0, [r3, #0]
 800bbc4:	460c      	mov	r4, r1
 800bbc6:	b118      	cbz	r0, 800bbd0 <__swsetup_r+0x14>
 800bbc8:	6a03      	ldr	r3, [r0, #32]
 800bbca:	b90b      	cbnz	r3, 800bbd0 <__swsetup_r+0x14>
 800bbcc:	f7fd fb40 	bl	8009250 <__sinit>
 800bbd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbd4:	0719      	lsls	r1, r3, #28
 800bbd6:	d422      	bmi.n	800bc1e <__swsetup_r+0x62>
 800bbd8:	06da      	lsls	r2, r3, #27
 800bbda:	d407      	bmi.n	800bbec <__swsetup_r+0x30>
 800bbdc:	2209      	movs	r2, #9
 800bbde:	602a      	str	r2, [r5, #0]
 800bbe0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbe4:	81a3      	strh	r3, [r4, #12]
 800bbe6:	f04f 30ff 	mov.w	r0, #4294967295
 800bbea:	e033      	b.n	800bc54 <__swsetup_r+0x98>
 800bbec:	0758      	lsls	r0, r3, #29
 800bbee:	d512      	bpl.n	800bc16 <__swsetup_r+0x5a>
 800bbf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bbf2:	b141      	cbz	r1, 800bc06 <__swsetup_r+0x4a>
 800bbf4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bbf8:	4299      	cmp	r1, r3
 800bbfa:	d002      	beq.n	800bc02 <__swsetup_r+0x46>
 800bbfc:	4628      	mov	r0, r5
 800bbfe:	f7fe fa99 	bl	800a134 <_free_r>
 800bc02:	2300      	movs	r3, #0
 800bc04:	6363      	str	r3, [r4, #52]	@ 0x34
 800bc06:	89a3      	ldrh	r3, [r4, #12]
 800bc08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bc0c:	81a3      	strh	r3, [r4, #12]
 800bc0e:	2300      	movs	r3, #0
 800bc10:	6063      	str	r3, [r4, #4]
 800bc12:	6923      	ldr	r3, [r4, #16]
 800bc14:	6023      	str	r3, [r4, #0]
 800bc16:	89a3      	ldrh	r3, [r4, #12]
 800bc18:	f043 0308 	orr.w	r3, r3, #8
 800bc1c:	81a3      	strh	r3, [r4, #12]
 800bc1e:	6923      	ldr	r3, [r4, #16]
 800bc20:	b94b      	cbnz	r3, 800bc36 <__swsetup_r+0x7a>
 800bc22:	89a3      	ldrh	r3, [r4, #12]
 800bc24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bc28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc2c:	d003      	beq.n	800bc36 <__swsetup_r+0x7a>
 800bc2e:	4621      	mov	r1, r4
 800bc30:	4628      	mov	r0, r5
 800bc32:	f000 f883 	bl	800bd3c <__smakebuf_r>
 800bc36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc3a:	f013 0201 	ands.w	r2, r3, #1
 800bc3e:	d00a      	beq.n	800bc56 <__swsetup_r+0x9a>
 800bc40:	2200      	movs	r2, #0
 800bc42:	60a2      	str	r2, [r4, #8]
 800bc44:	6962      	ldr	r2, [r4, #20]
 800bc46:	4252      	negs	r2, r2
 800bc48:	61a2      	str	r2, [r4, #24]
 800bc4a:	6922      	ldr	r2, [r4, #16]
 800bc4c:	b942      	cbnz	r2, 800bc60 <__swsetup_r+0xa4>
 800bc4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bc52:	d1c5      	bne.n	800bbe0 <__swsetup_r+0x24>
 800bc54:	bd38      	pop	{r3, r4, r5, pc}
 800bc56:	0799      	lsls	r1, r3, #30
 800bc58:	bf58      	it	pl
 800bc5a:	6962      	ldrpl	r2, [r4, #20]
 800bc5c:	60a2      	str	r2, [r4, #8]
 800bc5e:	e7f4      	b.n	800bc4a <__swsetup_r+0x8e>
 800bc60:	2000      	movs	r0, #0
 800bc62:	e7f7      	b.n	800bc54 <__swsetup_r+0x98>
 800bc64:	2000018c 	.word	0x2000018c

0800bc68 <_raise_r>:
 800bc68:	291f      	cmp	r1, #31
 800bc6a:	b538      	push	{r3, r4, r5, lr}
 800bc6c:	4605      	mov	r5, r0
 800bc6e:	460c      	mov	r4, r1
 800bc70:	d904      	bls.n	800bc7c <_raise_r+0x14>
 800bc72:	2316      	movs	r3, #22
 800bc74:	6003      	str	r3, [r0, #0]
 800bc76:	f04f 30ff 	mov.w	r0, #4294967295
 800bc7a:	bd38      	pop	{r3, r4, r5, pc}
 800bc7c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bc7e:	b112      	cbz	r2, 800bc86 <_raise_r+0x1e>
 800bc80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc84:	b94b      	cbnz	r3, 800bc9a <_raise_r+0x32>
 800bc86:	4628      	mov	r0, r5
 800bc88:	f000 f830 	bl	800bcec <_getpid_r>
 800bc8c:	4622      	mov	r2, r4
 800bc8e:	4601      	mov	r1, r0
 800bc90:	4628      	mov	r0, r5
 800bc92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc96:	f000 b817 	b.w	800bcc8 <_kill_r>
 800bc9a:	2b01      	cmp	r3, #1
 800bc9c:	d00a      	beq.n	800bcb4 <_raise_r+0x4c>
 800bc9e:	1c59      	adds	r1, r3, #1
 800bca0:	d103      	bne.n	800bcaa <_raise_r+0x42>
 800bca2:	2316      	movs	r3, #22
 800bca4:	6003      	str	r3, [r0, #0]
 800bca6:	2001      	movs	r0, #1
 800bca8:	e7e7      	b.n	800bc7a <_raise_r+0x12>
 800bcaa:	2100      	movs	r1, #0
 800bcac:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bcb0:	4620      	mov	r0, r4
 800bcb2:	4798      	blx	r3
 800bcb4:	2000      	movs	r0, #0
 800bcb6:	e7e0      	b.n	800bc7a <_raise_r+0x12>

0800bcb8 <raise>:
 800bcb8:	4b02      	ldr	r3, [pc, #8]	@ (800bcc4 <raise+0xc>)
 800bcba:	4601      	mov	r1, r0
 800bcbc:	6818      	ldr	r0, [r3, #0]
 800bcbe:	f7ff bfd3 	b.w	800bc68 <_raise_r>
 800bcc2:	bf00      	nop
 800bcc4:	2000018c 	.word	0x2000018c

0800bcc8 <_kill_r>:
 800bcc8:	b538      	push	{r3, r4, r5, lr}
 800bcca:	4d07      	ldr	r5, [pc, #28]	@ (800bce8 <_kill_r+0x20>)
 800bccc:	2300      	movs	r3, #0
 800bcce:	4604      	mov	r4, r0
 800bcd0:	4608      	mov	r0, r1
 800bcd2:	4611      	mov	r1, r2
 800bcd4:	602b      	str	r3, [r5, #0]
 800bcd6:	f7f5 ff9f 	bl	8001c18 <_kill>
 800bcda:	1c43      	adds	r3, r0, #1
 800bcdc:	d102      	bne.n	800bce4 <_kill_r+0x1c>
 800bcde:	682b      	ldr	r3, [r5, #0]
 800bce0:	b103      	cbz	r3, 800bce4 <_kill_r+0x1c>
 800bce2:	6023      	str	r3, [r4, #0]
 800bce4:	bd38      	pop	{r3, r4, r5, pc}
 800bce6:	bf00      	nop
 800bce8:	20000c40 	.word	0x20000c40

0800bcec <_getpid_r>:
 800bcec:	f7f5 bf8c 	b.w	8001c08 <_getpid>

0800bcf0 <__swhatbuf_r>:
 800bcf0:	b570      	push	{r4, r5, r6, lr}
 800bcf2:	460c      	mov	r4, r1
 800bcf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcf8:	2900      	cmp	r1, #0
 800bcfa:	b096      	sub	sp, #88	@ 0x58
 800bcfc:	4615      	mov	r5, r2
 800bcfe:	461e      	mov	r6, r3
 800bd00:	da0d      	bge.n	800bd1e <__swhatbuf_r+0x2e>
 800bd02:	89a3      	ldrh	r3, [r4, #12]
 800bd04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bd08:	f04f 0100 	mov.w	r1, #0
 800bd0c:	bf14      	ite	ne
 800bd0e:	2340      	movne	r3, #64	@ 0x40
 800bd10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bd14:	2000      	movs	r0, #0
 800bd16:	6031      	str	r1, [r6, #0]
 800bd18:	602b      	str	r3, [r5, #0]
 800bd1a:	b016      	add	sp, #88	@ 0x58
 800bd1c:	bd70      	pop	{r4, r5, r6, pc}
 800bd1e:	466a      	mov	r2, sp
 800bd20:	f000 f848 	bl	800bdb4 <_fstat_r>
 800bd24:	2800      	cmp	r0, #0
 800bd26:	dbec      	blt.n	800bd02 <__swhatbuf_r+0x12>
 800bd28:	9901      	ldr	r1, [sp, #4]
 800bd2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bd2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bd32:	4259      	negs	r1, r3
 800bd34:	4159      	adcs	r1, r3
 800bd36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bd3a:	e7eb      	b.n	800bd14 <__swhatbuf_r+0x24>

0800bd3c <__smakebuf_r>:
 800bd3c:	898b      	ldrh	r3, [r1, #12]
 800bd3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd40:	079d      	lsls	r5, r3, #30
 800bd42:	4606      	mov	r6, r0
 800bd44:	460c      	mov	r4, r1
 800bd46:	d507      	bpl.n	800bd58 <__smakebuf_r+0x1c>
 800bd48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bd4c:	6023      	str	r3, [r4, #0]
 800bd4e:	6123      	str	r3, [r4, #16]
 800bd50:	2301      	movs	r3, #1
 800bd52:	6163      	str	r3, [r4, #20]
 800bd54:	b003      	add	sp, #12
 800bd56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd58:	ab01      	add	r3, sp, #4
 800bd5a:	466a      	mov	r2, sp
 800bd5c:	f7ff ffc8 	bl	800bcf0 <__swhatbuf_r>
 800bd60:	9f00      	ldr	r7, [sp, #0]
 800bd62:	4605      	mov	r5, r0
 800bd64:	4639      	mov	r1, r7
 800bd66:	4630      	mov	r0, r6
 800bd68:	f7fe fd92 	bl	800a890 <_malloc_r>
 800bd6c:	b948      	cbnz	r0, 800bd82 <__smakebuf_r+0x46>
 800bd6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd72:	059a      	lsls	r2, r3, #22
 800bd74:	d4ee      	bmi.n	800bd54 <__smakebuf_r+0x18>
 800bd76:	f023 0303 	bic.w	r3, r3, #3
 800bd7a:	f043 0302 	orr.w	r3, r3, #2
 800bd7e:	81a3      	strh	r3, [r4, #12]
 800bd80:	e7e2      	b.n	800bd48 <__smakebuf_r+0xc>
 800bd82:	89a3      	ldrh	r3, [r4, #12]
 800bd84:	6020      	str	r0, [r4, #0]
 800bd86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd8a:	81a3      	strh	r3, [r4, #12]
 800bd8c:	9b01      	ldr	r3, [sp, #4]
 800bd8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bd92:	b15b      	cbz	r3, 800bdac <__smakebuf_r+0x70>
 800bd94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd98:	4630      	mov	r0, r6
 800bd9a:	f000 f81d 	bl	800bdd8 <_isatty_r>
 800bd9e:	b128      	cbz	r0, 800bdac <__smakebuf_r+0x70>
 800bda0:	89a3      	ldrh	r3, [r4, #12]
 800bda2:	f023 0303 	bic.w	r3, r3, #3
 800bda6:	f043 0301 	orr.w	r3, r3, #1
 800bdaa:	81a3      	strh	r3, [r4, #12]
 800bdac:	89a3      	ldrh	r3, [r4, #12]
 800bdae:	431d      	orrs	r5, r3
 800bdb0:	81a5      	strh	r5, [r4, #12]
 800bdb2:	e7cf      	b.n	800bd54 <__smakebuf_r+0x18>

0800bdb4 <_fstat_r>:
 800bdb4:	b538      	push	{r3, r4, r5, lr}
 800bdb6:	4d07      	ldr	r5, [pc, #28]	@ (800bdd4 <_fstat_r+0x20>)
 800bdb8:	2300      	movs	r3, #0
 800bdba:	4604      	mov	r4, r0
 800bdbc:	4608      	mov	r0, r1
 800bdbe:	4611      	mov	r1, r2
 800bdc0:	602b      	str	r3, [r5, #0]
 800bdc2:	f7f5 ff89 	bl	8001cd8 <_fstat>
 800bdc6:	1c43      	adds	r3, r0, #1
 800bdc8:	d102      	bne.n	800bdd0 <_fstat_r+0x1c>
 800bdca:	682b      	ldr	r3, [r5, #0]
 800bdcc:	b103      	cbz	r3, 800bdd0 <_fstat_r+0x1c>
 800bdce:	6023      	str	r3, [r4, #0]
 800bdd0:	bd38      	pop	{r3, r4, r5, pc}
 800bdd2:	bf00      	nop
 800bdd4:	20000c40 	.word	0x20000c40

0800bdd8 <_isatty_r>:
 800bdd8:	b538      	push	{r3, r4, r5, lr}
 800bdda:	4d06      	ldr	r5, [pc, #24]	@ (800bdf4 <_isatty_r+0x1c>)
 800bddc:	2300      	movs	r3, #0
 800bdde:	4604      	mov	r4, r0
 800bde0:	4608      	mov	r0, r1
 800bde2:	602b      	str	r3, [r5, #0]
 800bde4:	f7f5 ff88 	bl	8001cf8 <_isatty>
 800bde8:	1c43      	adds	r3, r0, #1
 800bdea:	d102      	bne.n	800bdf2 <_isatty_r+0x1a>
 800bdec:	682b      	ldr	r3, [r5, #0]
 800bdee:	b103      	cbz	r3, 800bdf2 <_isatty_r+0x1a>
 800bdf0:	6023      	str	r3, [r4, #0]
 800bdf2:	bd38      	pop	{r3, r4, r5, pc}
 800bdf4:	20000c40 	.word	0x20000c40

0800bdf8 <_init>:
 800bdf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdfa:	bf00      	nop
 800bdfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdfe:	bc08      	pop	{r3}
 800be00:	469e      	mov	lr, r3
 800be02:	4770      	bx	lr

0800be04 <_fini>:
 800be04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be06:	bf00      	nop
 800be08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be0a:	bc08      	pop	{r3}
 800be0c:	469e      	mov	lr, r3
 800be0e:	4770      	bx	lr
